# compress.test --
#
# Part of: Marco's BASH Functions Library
# Contents: tests for the compress.sh example script
# Date: Tue Aug 16, 2005
#
# Abstract
#
#	To select the tests in this file:
#
#		$ TESTMATCH=compress- make all test
#
# Copyright (c) 2005, 2012, 2013, 2018 Marco Maggi
# <mrc.mgg@gmail.com>
#
# This is free  software you can redistribute it  and/or modify it under
# the terms of  the GNU General Public License as  published by the Free
# Software Foundation; either  version 3, or (at your  option) any later
# version.
#
# This  file is  distributed in  the hope  that it  will be  useful, but
# WITHOUT   ANY  WARRANTY;  without   even  the   implied  warranty   of
# MERCHANTABILITY  or FITNESS  FOR A  PARTICULAR PURPOSE.   See  the GNU
# General Public License for more details.
#
# You  should have received  a copy  of the  GNU General  Public License
# along with this file; see the file COPYING.  If not, write to the Free
# Software Foundation,  Inc., 59  Temple Place -  Suite 330,  Boston, MA
# 02111-1307, USA.
#

#PAGE
#### setup

source setup.sh

function compress () {
    top_srcdir=${top_srcdir:=${PWD}/..}
    examplesdir=${examplesdir:?'missing examplesdir in the environment'}

    if false
    then "$BASH" examples/compress.sh --debug -v "$@"
    else "$BASH" examples/compress.sh "$@"
    fi
}

# These functions access uplevel variables.
function sub-compress-assert-after-compression () {
    sub-compress-assert-unexistent-original && sub-compress-assert-existent-compressed
}
function sub-compress-assert-after-decompression () {
    sub-compress-assert-existent-original && sub-compress-assert-unexistent-compressed
}

function sub-compress-assert-unexistent-original () {
    dotest-assert-file-unexists "$original" 'original file still exists'
}
function sub-compress-assert-unexistent-compressed () {
    dotest-assert-file-unexists "$compressed" 'compressed file still exists'
}
function sub-compress-assert-existent-original () {
    dotest-assert-file-exists "$original" 'original file does not exist'
}
function sub-compress-assert-existent-compressed () {
    dotest-assert-file-exists "$compressed" 'compressed file does not exist'
}

#page

function compress-gzip-compress-1.1 () {
    dotest-mktmpdir
    local original=$(dotest-mkfile file.ext)
    local compressed="${original}.gz"

    mbfl_file_enable_remove
    compress --compress "$original"
    sub-compress-assert-after-compression
    dotest-clean-files
}
function compress-gzip-compress-1.2 () {
    dotest-mktmpdir
    local original=$(dotest-mkfile file.ext)
    local compressed="${original}.gz"

    mbfl_file_enable_remove
    compress --keep --compress "$original"
    sub-compress-assert-existent-original && sub-compress-assert-existent-compressed
    dotest-clean-files
}
function compress-gzip-compress-1.3 () {
    dotest-mktmpdir
    local original=$(dotest-mkfile file.ext)
    local compressed="${original}.gz"

    mbfl_file_enable_remove
    compress --stdout --compress "$original" >"$compressed"
    sub-compress-assert-existent-original && sub-compress-assert-existent-compressed
    dotest-clean-files
}

#page

function compress-gzip-decompress-2.1 () {
    dotest-mktmpdir
    local original=$(dotest-mkfile file.ext)
    local compressed="${original}.gz"

    compress --compress "$original"
    sub-compress-assert-after-compression || dotest-clean-files
    compress --decompress "$compressed"
    sub-compress-assert-after-decompression
    dotest-clean-files
}
function compress-gzip-decompress-2.2 () {
    dotest-mktmpdir
    local original=$(dotest-mkfile file.ext)
    local compressed="${original}.gz"

    compress --compress "$original"
    sub-compress-assert-after-compression || dotest-clean-files
    compress --keep --decompress "$compressed"
    sub-compress-assert-existent-original && sub-compress-assert-existent-compressed
    dotest-clean-files
}
function compress-gzip-decompress-2.3 () {
    dotest-mktmpdir
    local original=$(dotest-mkfile file.ext)
    local compressed="${original}.gz"

    compress --compress "$original"
    sub-compress-assert-after-compression || dotest-clean-files
    compress --stdout --decompress "$compressed" >"$original"
    sub-compress-assert-existent-original && sub-compress-assert-existent-compressed
    dotest-clean-files
}

#page

function compress-bzip-compress-1.1 () {
    dotest-mktmpdir
    local original=$(dotest-mkfile file.ext)
    local compressed="${original}.bz2"

    mbfl_file_enable_remove
    compress --bzip --compress "$original"
    sub-compress-assert-after-compression
    dotest-clean-files
}
function compress-bzip-compress-1.2 () {
    dotest-mktmpdir
    local original=$(dotest-mkfile file.ext)
    local compressed="${original}.bz2"

    mbfl_file_enable_remove
    compress --bzip --keep --compress "$original"
    sub-compress-assert-existent-original && sub-compress-assert-existent-compressed
    dotest-clean-files
}
function compress-bzip-compress-1.3 () {
    dotest-mktmpdir
    local original=$(dotest-mkfile file.ext)
    local compressed="${original}.bz2"

    mbfl_file_enable_remove
    compress --bzip --stdout --compress "$original" >"$compressed"
    sub-compress-assert-existent-original && sub-compress-assert-existent-compressed
    dotest-clean-files
}

#page

function compress-bzip-decompress-2.1 () {
    dotest-mktmpdir
    local original=$(dotest-mkfile file.ext)
    local compressed="${original}.bz2"
    local result=

    compress --bzip --compress "$original"
    sub-compress-assert-after-compression || dotest-clean-files
    compress --decompress "$compressed"
    sub-compress-assert-after-decompression
    dotest-clean-files
}
function compress-bzip-decompress-2.2 () {
    dotest-mktmpdir
    local original=$(dotest-mkfile file.ext)
    local compressed="${original}.bz2"

    compress --bzip --compress "$original"
    sub-compress-assert-after-compression || dotest-clean-files
    compress --keep --decompress "$compressed"
    sub-compress-assert-existent-original && sub-compress-assert-existent-compressed
    dotest-clean-files
}
function compress-bzip-decompress-2.3 () {
    dotest-mktmpdir
    local original=$(dotest-mkfile file.ext)
    local compressed="${original}.bz2"

    compress --bzip --compress "$original"
    sub-compress-assert-after-compression || dotest-clean-files
    compress --stdout --decompress "$compressed" >"$original"
    sub-compress-assert-existent-original && sub-compress-assert-existent-compressed
    dotest-clean-files
}

#PAGE

dotest compress-
dotest-final-report

### end of file
# Local Variables:
# mode: sh
# End:
