\input texinfo.tex
@c %**start of header
@setfilename mbfl.info
@settitle Marco's Bash Functions Libraries
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------------------
@c Local macros.
@c ------------------------------------------------------------------------

@macro mfourref{NODE, TITLE}
@xref{\NODE\,\TITLE\,\TITLE\,m4}
@end macro

@macro coreutilsref{NODE, TITLE}
@xref{\NODE\,\TITLE\,\TITLE\,coreutils}
@end macro

@macro gawkref{NODE, TITLE}
@xref{\NODE\,\TITLE\,\TITLE\,gawk}
@end macro

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Marco's Bash Functions Libraries

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    @mbfl{}

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           mbfl

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{mrc.mgg@@gmail.com}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2003-2005, 2009-2010, 2012-2015, 2017-2018, 2020, 2022, 2023, 2024

@c ------------------------------------------------------------------------

@set REQUIRED_BASH_VERSION      4.3

@set GITHUB_URL                 @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set BITBUCKET_URL              @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DOWNLOAD_URL               @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}/downloads}
@set DOCUMENTATION_URL          @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@set PROSCRIPT                  mbflpp.bash
@set PROSCRIPTCMD               @command{@value{PROSCRIPT}}

@set LIBMBFL                    libmbfl.sh
@set LIBMBFLTESTS               libmbfl-tests.sh
@set LIBMBFLUTILS               libmbfl-utils.sh
@set LIBMBFLAT                  libmbfl-at.bash
@set LIBMBFLARCH                libmbfl-arch.bash
@set LIBMBFLPASSWORDS           libmbfl-passwords.bash
@set LIBMBFLGIT                 libmbfl-git.bash

@set LIBMBFLFILE                @file{libmbfl-core.bash}
@set LIBMBFLLINKERFILE          @file{libmbfl-linker.bash}
@set LIBMBFLTESTSFILE           @file{libmbfl-tests.bash}
@set LIBMBFLUTILSFILE           @file{libmbfl-utils.bash}
@set LIBMBFLATFILE              @file{libmbfl-at.bash}
@set LIBMBFLARCHFILE            @file{libmbfl-arch.bash}
@set LIBMBFLPASSWORDSFILE       @file{libmbfl-passwords.bash}
@set LIBMBFLGIT                 @file{libmbfl-git.bash}
@set LIBMBFLCONTAINERS          @file{libmbfl-containers.bash}

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{VERSION} of @value{PACKAGE}, a collection of libraries of
functions for the @gnu{} Bash shell.  It requires @gnu{} Bash at least version
@value{REQUIRED_BASH_VERSION}; it require @gnu{} m4 (other m4 implementations will not do).  The
package is distributed under the terms of the @gnu{} Lesser General Public License (@lgpl{}).

The latest release can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} Lesser
General Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* mbfl: (mbfl).                 @value{TITLE}.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* preprocessor::                Using the script preprocessor.
* base::                        Some base functions.
* shell::                       Shell facilities.
* exit::                        Exit codes and return codes.
* locations::                   Running location handlers.
* variables::                   Manipulating variables.
* arrays::                      Manipulating arrays with functions and macros.
* functions::                   Manipulating functions.
* hooks::                       Executing commands with event hooks.
* objects::                     Object-oriented programming.
* conditions::                  Exceptional-condition objects.
* exceptions::                  Raising and handling exceptions.
* strings::                     Manipulating strings with functions.
* integers::                    Manipulating integers.
* actions::                     Selecting actions to perform.
* getopts::                     Parsing command line options.
* message::                     Printing messages to the console.
* dialog::                      Interacting with the user.
* file::                        Manipulating files and pathnames.
* fd::                          Handling file descriptors.
* program::                     Using external programs.
* process::                     Job control.
* signal::                      Interprocess signals.
* times::                       Times and dates.
* math::                        Evaluating mathematical expressions.
* system::                      Interfacing with the system.
* semver::                      Semantic-version specifications
* main::                        Main function.
* testing::                     Building test suites.

Appendices

* linker::                      Searching and sourcing libraries at run--time.
* libmbfl-utils::               Utilities library.
* libmbfl-at::                  Interface to the external program @command{at}.
* libmbfl-arch::                Archiving and compressing files.
* passwords::                   Generating somewhat random passwords.
* git::                         Version control with @command{git}.
* containers::                  Data containers library.
* Package License::             GNU Lesser General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
@c * type index::                  An entry for each type.

@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}, a collection of libraries of
functions for the @gnu{} Bash shell.  It requires @gnu{} Bash at least version
@value{REQUIRED_BASH_VERSION}; it require @gnu{} m4 (other m4 implementations will not do).  The
package is distributed under the terms of the @gnu{} Lesser General Public License (@lgpl{}).

This package is an attempt to make @gnu{} Bash a viable solution for medium sized scripts; a set of
modules implementing common operations and script templates are offered by this package and the
author has used them with success in implementing non--small scripts.

The philosophy of @mbfl{} is to do the work as much as possible without external commands.  For
example: string manipulation is implemented using the special variable substitution provided by
Bash, and no use is done of utilities like @command{sed}, @command{grep} and @command{ed}.  Despite
that, @value{PACKAGE} really needs the @gnu{} Coreutils package to perform a lot of tasks.

The libraries are better used starting from the template scripts in the @file{examples/}
subdirectory of the distribution, especially @file{template.sh} and @file{template-actions.sh}.
This is because, with @mbfl{}, some choices are made to reduce the application--dependent part of
the script to the smallest dimension; if we follow another schema, @mbfl{} modules may be
inadequate.  This is especially true for the actions and options parsing modules.

The installed libraries are:

@table @asis
@item @file{libmbfl.bash}
@itemx @file{libmbfl-core.bash}
The core library implementing shell language extensions, adaptations and system interface.
@file{libmbfl.bash} should be a symbolic link to @file{libmbfl-core.bash}.

@item @file{libmbfl-linker.bash}
A library to embed into scripts to load other libraries at run--time; @ref{linker, Searching and
loading libraries at run--time}.

@item @file{libmbfl-tests.bash}
A library to organise test suites for shell functions; @ref{testing, Building test suites}.

@item @file{libmbfl-utils.bash}
A library of utilities, not always required by a script; @ref{libmbfl-utils, Utilities library}.

@item @file{libmbfl-at.bash}
An interface to the executable @command{at} and the daemon @command{atd}; @ref{libmbfl-at, Interface
to the external program @command{at}}.

@item @file{libmbfl-arch.bash}
An interface to the common file system archiving and compressing tools; @ref{libmbfl-arch, Archiving
and compressing files}.

@item @file{libmbfl-passwords.bash}
Password strings generation; @ref{passwords, Generating somewhat random passwords}.

@item @file{libmbfl-git.bash}
Basic interface to the version control program @command{git}; @ref{git, Version control with
@command{git}}.

@item @file{libmbfl-containers.bash}
Data containers library; @ref{containers, Data containers library}.
@end table

Starting with version 3: this package installs files under directories @strong{without} the version
part.  If we desire to install multiple versions of the package: we should install under
@file{/opt/mbfl/$VERSION}, by using the appropriate command line option at configuration time:

@example
$ ./configure --prefix=/opt/mbfl/3.0.0
@end example

This package relies on: @gnu{} @mfour{} for preprocessing scripts; the @gnu{} Coreutils to perform
many file system related tasks; the package @command{sudo} to perform tasks with modified user
privileges.

@menu
* overview loading::            How to load the core library.
* overview autotools::          Using the @gnu{} Autotools.
* overview rv::                 Result variables.
* overview notes::              Miscellaneous notes.
@end menu

@c page
@node overview loading
@section Loading the library


The easiest way to use the core library is to include at run--time the library file
@value{LIBMBFLFILE} in the script.  To do it, we install the package on the system and use this code
in the scripts:

@example
source "$@{MBFL_LIBMBFL:=$(mbflpp.bash --print-libmbfl)@}" || exit 100
@end example

@noindent
after the service variables have been declared; @ref{variables service, Required user defined
variables}.  The exit code @samp{100} is reserved for errors while loading libraries;
@ref{exit_because_error_loading_library, Exit codes and return codes}.

This code will read the full pathname of the library from the environment variable
@env{MBFL_LIBMBFL}; if this variable is not set: the script @value{PROSCRIPTCMD} is executed to
acquire the pathname.  @value{PROSCRIPTCMD} is installed by the package in the @code{$bindir}
directory, which we must include in the @env{PATH} environment variable.

The reliable way to load the library is to use the preprocessor macros @func{mbfl_embed_library} or
@func{mbfl_load_library}, @ref{preprocessor loading, Libraries loading and embedding}.  Either the
library is embedded in the script or it is sourced from a hard--coded file system pathname; this
reduces the chances of a script being tricked into loading a file different from the actual library.

To use the preprocessor macros we must process a script's source file with the preprocessor script
@value{PROSCRIPTCMD}, possibly using an appropriate @file{Makefile}; @ref{preprocessor, Using the
script preprocessor}.

@c page
@node overview autotools
@section Using the @gnu{} Autotools


When we use the full @gnu{} Autotools suite to organise a package's infrastructure depending on
@mbfl{}, we should do the following:

@enumerate
@item
Include the @gnu{} Autoconf macro file @file{mbfl.m4} (distributed with @mbfl{}) in the distribution
and use it by adding the following to @file{acinclude.m4}:

@example
m4_include(path/to/mbfl.m4)
@end example

@item
In the template @file{configure.ac} we add the macro use, optionally specifying the minimum @mbfl{}
semantic version we need (@pxref{semver spec, Semantic Versioning specification}):

@example
MBFL_SETUP(v3.0.0)
@end example

@noindent
it will add to @file{Makefile.in} the following variable definitions:

@example
MBFLPP                  = @@MBFLPP@@
MBFL_LIBDIR             = @@MBFL_LIBDIR@@
MBFL_LIBMBFL            = @@MBFL_LIBMBFL@@
MBFL_LIBMBFL_CORE       = @@MBFL_LIBMBFL_CORE@@
MBFL_LIBMBFL_LINKER     = @@MBFL_LIBMBFL_LINKER@@
MBFL_LIBMBFL_TESTS      = @@MBFL_LIBMBFL_TESTS@@
MBFL_LIBMBFL_UTILS      = @@MBFL_LIBMBFL_UTILS@@
MBFL_LIBMBFL_AT         = @@MBFL_LIBMBFL_AT@@
MBFL_LIBMBFL_ARCH       = @@MBFL_LIBMBFL_ARCH@@
MBFL_LIBMBFL_PASSWORDS  = @@MBFL_LIBMBFL_PASSWORDS@@
MBFL_LIBMBFL_GIT        = @@MBFL_LIBMBFL_GIT@@
MBFL_LIBMBFL_CONTAINRES = @@MBFL_LIBMBFL_CONTAINERS
@end example

@noindent
holding the absolute file system pathnames of the preprocessor script, the libraries installation
directory, and the libraries pathnames.

@item
In the template file @file{Makefile.am} we can use the @env{MBFL_} variables to drive the loading or
embedding of libraries into our scripts, libraries and test files.
@end enumerate

@c page
@node overview rv
@section Result variables


Some functions have a @code{_var} variant; for example, two functions exists to extract the filename
extension:

@example
mbfl_file_extension
mbfl_file_extension_var
@end example

@noindent
the first variant will print the result to @stdout{}, while the @code{_var} variant will store the
result in a ``result variable'' whose name is handed to it as first argument; this mechanism is
built using the @code{local -n} feature of Bash.  The @code{_var} variants are often a bit faster
because many output variants are wrappers for the @code{_var} variants.

Basic @api{} usage example:

@example
mbfl_file_extension /path/to/file.ext
@print{} ext

local _RV
mbfl_file_extension_var _RV /path/to/file.ext
"$_RV"  @result{} ext
@end example

@noindent
read below to understand why we should use the preprocessor and write the code like this:

@example
mbfl_declare_varref(RV)
mbfl_file_extension_var mbfl_datavar(RV) /path/to/file.ext
"$RV"   @result{} ext
@end example

@c ------------------------------------------------------------------------

@subsubheading Dangers of result variables

@strong{We must be careful when using this feature!}  Let's consider this script:

@example
function main () @{
    local -i X=0
    mbfl_func X
    echo X=$X >&2
@}
function mbfl_func () @{
    local -n Y=$@{1:?@}
    Y=1
@}

main
@end example

@noindent
everything is fine: the script will print @code{X=1} because the call to @code{mbfl_func} will
mutate the variable @code{X} in its execution environment, and such variable happens to be defined
in the scope of @code{main}.

Now let's consider this script:

@example
function main () @{
    local -i X=0
    mbfl_func X
    echo X=$X >&2
@}
function mbfl_func () @{
    local -n Y=$@{1:?@}
    local X
    Y=1
@}

main
@end example

@noindent
it will print @code{X=0} because @code{mbfl_func} accesses the variable @code{X} in its execution
environment, and such variable is defined by @code{mbfl_func} itself; the local definition of
@code{X} shadows the upper level definition.

There is no true escape from this problem!  There is no definitive way to avoid ``fishing'' a local
variable in a lower function from an upper function.  @mbfl{} attempts to mitigate the problem by
prefixing its variables with @code{mbfl_} when a function uses reference variables.  We should also
prefix our ``result variables'', for example with a leading or trailing underscore: @mbfl{} never
uses such a prefix or suffix.

So we should write the script as follows:

@example
function main () @{
    local -i _X=0
    mbfl_func _X
    echo _X=$_X >&2
@}
function mbfl_func () @{
    local -n mbfl_Y=$@{1:?@}
    local mbfl_X
    mbfl_Y=1
@}

main
@end example

@c ------------------------------------------------------------------------

@subsubheading Using the preprocessor


@mbfl{}'s preprocessor has facilities to help us create variables with unique names that we can
safely use as argument to functions, @ref{preprocessor, Using the script preprocessor}.

With these facilities, the first example should be written as:

@example
mbfl_declare_varref(RV)

mbfl_file_extension_var mbfl_datavar(RV) /path/to/file.ext
"$RV"  @result{} ext
@end example

@noindent
and the demo script as:

@example
function main () @{
    mbfl_declare_integer_varref(X, 0)
    mbfl_func mbfl_datavar(X)
    echo X=$X >&2
@}
function mbfl_func () @{
    mbfl_mandatory_nameref_parameter(Y, 1, the result variable)
    Y=1
@}

main
@end example

Using such preprocessor facilities consumes some computation time; they should be used when we do
not care about execution time and when such time is significantly less than running a subshell.
Otherwise we should just run the functions in a subshell:

@example
RESULT=$(mbfl_file_extension /path/to/file.ext)

"$RESULT" @result{} ext
@end example

@c page
@node overview notes
@section Notes


When using @mbfl{} we want to be aware of the following:

@itemize
@item
When in doubt about how some functions work: we should take a look at the source code.  When doing
this we must remember that: there is no word splitting when performing variable assignment; so there
is no need to use double quotes in the following cases:

@example
alpha=$beta
alpha=$@{beta:1:3@}
alpha=$@{beta:-$gamma@}
alpha=$@{#beta@}
@end example

There is also no word splitting when evaluating the @var{WORD} in the @code{case} statement; so
there is no need to use double quotes in the following case:

@example
case $WORD in
  ...
esac
@end example

@item
Some functions take a variable name as argument and store in the referenced variable some value; to
avoid name collision without using the preprocessor: select a name that starts with @code{p_}.  It
is guaranteed that @mbfl{} never uses variables with name starting with such a prefix.

@item
The @code{read} built in does word splitting on the text it reads, even when there is a single
output variable.  We can verify it with:

@example
printf '\tciao\n' | @{
    read line
    echo line was "'$line'"
@}
@print{} line was 'ciao'
@end example

@noindent
we see that the initial tabulation character has been stripped, because it is a character in the
default value of @code{IFS}.  Word splitting does not happen when we set @code{IFS} to the empty
string:

@example
printf '\tciao\n' | @{
    IFS= read line
    echo line was "'$line'"
@}
@print{} line was '        ciao'
@end example

To avoid the mutation of text read with @code{read}, @mbfl{} always sets @code{IFS} to the empty
string in the environment in which @code{read} is evaluated.  This happens in functions like
@func{mbfl_read_maybe_null} and @func{mbfl_dialog_ask_password}; notice, though, that these
functions @strong{do not} mutate the @code{IFS} value in the environment of the caller.
@end itemize

@c page
@node preprocessor
@chapter Using the script preprocessor


The @mbfl{} script preprocessor is a command line program named @value{PROSCRIPTCMD}; it is itself a
@gnu{} Bash script that makes use of the @mbfl{} library (embedded in the source code).  It can
remove comments, blank lines, blank characters at the beginning of lines, and it can expand macros.

The macro preprocessing is performed by the @gnu{} @mfour{} program, using a library of macros
called @file{libmbfl-preprocessor.m4} which is installed on the system with the @mbfl{} package.

While some features of @value{PACKAGE} are available without: use of the preprocessor is strongly
recommended.

@menu
* preprocessor invoking::       Invoking the preprocessor.
* preprocessor quoting::        Quotes and quoted macro names.
* preprocessor defines::        Predefined symbols.
* preprocessor loading::        Libraries loading and embedding.
* preprocessor parameters::     Function parameters handling.
* preprocessor arguments::      Script arguments handling.
* preprocessor nameref::        Variable name references.
@end menu

@c page
@node preprocessor invoking
@section Invoking the preprocessor


Synopsis:

@smallexample
mbflpp.bash [@var{OPTIONS}] <@var{INFILE} >@var{OUTFILE}
mbflpp.bash [@var{OPTIONS}] --output=@var{OUTFILE} [--] @vari{INFILE} @varii{INFILE} ...
@end smallexample

@noindent
all the @var{INFILE} arguments are interpreted as file system pathnames selecting input files to
concatenate in the specified order.

All the @mbfl{} built--in command line options are available, @ref{getopts options, Predefined
options}.  Additionally the following options are supported.

@table @code
@item --preserve-comments
@anchor{--preserve-comments}
@cindex @option{--preserve-comments}, preprocessor option
@cindex Preprocessor option @option{--preserve-comments}
Do not filter out comments.  By default every line starting with optional blanks followed by
@samp{#} is removed, unless the character right after @samp{#} is @samp{!}; this option turns off
this removal.  If we want a persistent comment we just start it with @samp{#!}.

@item --add-bash
@anchor{--add-bash}
@cindex @option{--add-bash}, preprocessor option
@cindex Preprocessor option @option{--add-bash}
Add @code{#!BASH_PROGRAM} at the beginning of the output, where @code{BASH_PROGRAM} is selected with
the command line option @option{--bash-program}.

@item --bash-program=BASH_PROGRAM
@anchor{--bash-program}
@cindex @option{--bash-program}, preprocessor option
@cindex Preprocessor option @option{--bash-program}
Select the absolute file pathname of the Bash executable to use when the option @option{--add-bash}
is used.  It defaults to the preselected @command{bash} program, @ref{mbfl_PROGRAM_BASH, Preselected
programs}.

@item -D@var{NAME}[=@var{VALUE}]
@itemx --define=@var{NAME}[=@var{VALUE}]
@anchor{--define}
@cindex @option{--define}, preprocessor option
@cindex Preprocessor option @option{--define}
Define a new symbol (@mfour{} syntax).  This is equivalent to the @option{--define} option of
@mfour{}.

@item -I@var{INCLUDE_DIRECTORY_PATHNAME}
@itemx --include=@var{INCLUDE_DIRECTORY_PATHNAME}
@anchor{--include}
@cindex @option{--include}, preprocessor option
@cindex Preprocessor option @option{--include}
Add a directory to the search path for include files.  @var{INCLUDE_DIRECTORY_PATHNAME} must be a
directory pathname and it is handed to @mfour{} to search for macro files.  We can use this option
multiple times.  @mfour{} can include files using the built--in @func{m4_include},
@mfourref{Include, Including named files}.

@item --library=@var{LIBRARY_FILE_PATHNAME}
@anchor{--library}
@cindex @option{--library}, preprocessor option
@cindex Preprocessor option @option{--library}
Include an @mfour{} library.  @var{LIBRARY_FILE_PATHNAME} must be the name of an @mfour{} macro file
which is evaluated before the input files.

@item -o@var{OUTPUT_FILE_PATHNAME}
@itemx --output=@var{OUTPUT_FILE_PATHNAME}
@anchor{--output}
@cindex @option{--output}, preprocessor option
@cindex Preprocessor option @option{--output}
Select an output file, @code{-} for stdout.

@item -e
@itemx --eval
@anchor{--eval}
@cindex @option{--eval}, preprocessor option
@cindex Preprocessor option @option{--eval}
Send the result of preprocessing to @bash{}, rather than print it.  The evaluation is performed by
the preselected @command{bash} program, @ref{mbfl_PROGRAM_BASH, Preselected programs}.

@item --no-prepro
@anchor{--no-prepro}
@cindex @option{--no-prepro}, preprocessor option
@cindex Preprocessor option @option{--no-prepro}
Do not load the installed preprocessor's macros library @file{libmbfl-preprocessor.m4}.  If we use this
option: we are meant to use the option @option{--library} to load a replacement macros library from
a known location.

@item --libmbfl=@var{LIBMBFL}
@anchor{--libmbfl}
@cindex @option{--libmbfl}, preprocessor option
@cindex Preprocessor option @option{--libmbfl}
Select the pathname to a @value{LIBMBFLFILE} file to use in the macros @func{mbfl_load_library} and
@func{mbfl_embed_library}, @ref{preprocessor loading, Libraries loading and embedding}.  The
selected pathname overrides the library installed on the system.

@item --print-libdir
@anchor{--print-libdir}
@cindex @option{--print-libdir}, preprocessor option
@cindex Preprocessor option @option{--print-libdir}
Print to @stdout{} the file system absolute pathname of the libraries installation directory, then
exit successfully.  The installation directory is selected with the option @option{--datadir} of
@command{configure} at package--configuration time.

@item --print-libmbfl
@anchor{--print-libmbfl}
@cindex @option{--print-libmbfl}, preprocessor option
@cindex Preprocessor option @option{--print-libmbfl}
Print to @stdout{} the file system absolute pathname of the installed library @value{LIBMBFLFILE},
then exit successfully.

@item --print-libmbfl-linker
@anchor{--print-libmbfl-linker}
@cindex @option{--print-libmbfl-linker}, preprocessor option
@cindex Preprocessor option @option{--print-libmbfl-linker}
Print to @stdout{} the file system absolute pathname of the installed library
@value{LIBMBFLLINKERFILE}, then exit successfully.

@item --print-libmbfl-tests
@anchor{--print-libmbfl-tests}
@cindex @option{--print-libmbfl-tests}, preprocessor option
@cindex Preprocessor option @option{--print-libmbfl-tests}
Print to @stdout{} the file system absolute pathname of the installed library @value{LIBMBFLTESTSFILE},
then exit successfully.

@item --print-libmbfl-utils
@anchor{--print-libmbfl-utils}
@cindex @option{--print-libmbfl-utils}, preprocessor option
@cindex Preprocessor option @option{--print-libmbfl-utils}
Print to @stdout{} the file system absolute pathname of the installed library
@value{LIBMBFLUTILSFILE}, then exit successfully.

@item --print-libmbfl-arch
@anchor{--print-libmbfl-arch}
@cindex @option{--print-libmbfl-arch}, preprocessor option
@cindex Preprocessor option @option{--print-libmbfl-arch}
Print to @stdout{} the file system absolute pathname of the installed library
@value{LIBMBFLARCHFILE}, then exit successfully.

@item --print-libmbfl-at
@anchor{--print-libmbfl-at}
@cindex @option{--print-libmbfl-at}, preprocessor option
@cindex Preprocessor option @option{--print-libmbfl-at}
Print to @stdout{} the file system absolute pathname of the installed library @value{LIBMBFLATFILE},
then exit successfully.

@item --print-libmbfl-passwords
@anchor{--print-libmbfl-passwords}
@cindex @option{--print-libmbfl-passwords}, preprocessor option
@cindex Preprocessor option @option{--print-libmbfl-passwords}
Print to @stdout{} the file system absolute pathname of the installed library
@value{LIBMBFLPASSWORDSFILE}, then exit successfully.

@item --print-libmbfl-git
@anchor{--print-libmbfl-git}
@cindex @option{--print-libmbfl-git}, preprocessor option
@cindex Preprocessor option @option{--print-libmbfl-git}
Print to @stdout{} the file system absolute pathname of the installed library
@value{LIBMBFLGIT}, then exit successfully.

@item --print-libmbfl-containers
@anchor{--print-libmbfl-containers}
@cindex @option{--print-libmbfl-containers}, preprocessor option
@cindex Preprocessor option @option{--print-libmbfl-containers}
Print to @stdout{} the file system absolute pathname of the installed library
@value{LIBMBFLCONTAINERS}, then exit successfully.

@item --check-version=@var{MINIMUM_REQUIRED_SEMANTIC_VERSION}
@anchor{--check-version}
@cindex @option{--check-version}, preprocessor option
@cindex Preprocessor option @option{--check-version}
Compare the given @var{MINIMUM_REQUIRED_SEMANTIC_VERSION} with the version of the installed @mbfl{}
package:

@itemize
@item
If the option's value is less than, or equal to, the package value: exit successfully with exit code
@samp{0}.

@item
If the option's value is greater than the package value: exit with failure with exit code @samp{1}.

@item
If the value @var{MINIMUM_REQUIRED_SEMANTIC_VERSION} is a string invalid as semantic version: exit
with failure with exit code @code{3}.
@end itemize

If the option @option{--verbose} is used @strong{before} this option: a message describing the
result of the comparison is printed on @stderr{}.
@end table

@c page
@node preprocessor quoting
@section Quotes and quoted macro names


The @mfour{} preprocessor is invoked by @value{PROSCRIPTCMD} with the @option{--prefix-builtins}
option; so all the @mfour{} built--in macros and directives are available prefixed with @code{m4_}.

The quoting for the preprocessor is changed with:

@example
m4_changequote(`[[[', `]]]')
@end example

@c page
@node preprocessor defines
@section Predefined symbols


The preprocessor predefines the following symbols.


@deffn {Preprocessor Macro} __PACKAGE_VERSION__
Expands into the version number of this package.
@end deffn


@deffn {Preprocessor Macro} __PACKAGE_DATADIR__
Expands into the absolute pathname of the directory under which the libraries distributed with
@value{PACKAGE} are installed.  For example:

@example
/usr/local/share/mbfl
@end example
@end deffn


@deffn {Preprocessor Macro} __MBFL_LIBRARY__
Expands into the absolute pathname of the @value{PACKAGE} library file.  For example:

@example
/usr/local/share/mbfl/libmbfl.sh
@end example
@end deffn

@c page
@node preprocessor loading
@section Libraries loading and embedding


We can include in scripts the code needed to source a library at run--time or we can embed a whole
library itself.


@deffn {Preprocessor Macro} mbfl_embed_library
@deffnx {Preprocessor Macro} mbfl_embed_library (@var{LIBRARY_FILE_PATHNAME})
Expands into the contents of a library file; the resulting output script does not need to load the
library at runtime, let's say it is ``statically linked''.

@itemize
@item
If the optional argument @var{LIBRARY_FILE_PATHNAME} @strong{is not} used:

@itemize -
@item
If the option @option{--libmbfl} @strong{is not} used on the command line of @value{PROSCRIPTCMD}:
the library @value{LIBMBFLFILE} installed on the system is embedded.

@item
If the option @option{--libmbfl} @strong{is} used on the command line of @value{PROSCRIPTCMD}: the
file pathname selected by the option is used to locate the library @value{LIBMBFLFILE} to be embedded.
@end itemize

@item
If the optional argument @var{LIBRARY_FILE_PATHNAME} @strong{is} used: that argument is interpreted
as file system pathname of a library to embed in the source file.  Does not matter which library,
either a @value{LIBMBFLFILE} implementation or some other library.
@end itemize

The macro expands into a use of the m4 built--in @func{m4_undivert}:

@example
m4_undivert(@var{LIBRARY_FILE_PATHNAME})
@end example

@noindent
so the argument @var{LIBRARY_FILE_PATHNAME} must be a m4 expression expanding into a file system
pathname.  @mfourref{Include, Including named files}, for details on including files.
@mfourref{Undivert, Undiverting output}, for details on undiverting named files.

As example, we could preprocess a script with the following command line:

@example
@value{PROSCRIPT} --define=__LIBFILE_PTN__=/path/to/libmy.bash -oscript.bash script.bash.m4
@end example

@noindent
and in the script's source file we write:

@example
mbfl_embed_library(__LIBFILE_PTN__)
@end example
@end deffn


@deffn {Preprocessor Macro} mbfl_library_loader
@deffnx {Preprocessor Macro} mbfl_library_loader (@var{LIBRARY_FILE_PATHNAME})
@deffnx {Preprocessor Macro} mbfl_load_library
@deffnx {Preprocessor Macro} mbfl_load_library (@var{LIBRARY_FILE_PATHNAME})
Expand to a block of code that sources a library file; the resulting output script does need to
source the library at runtime, let's say it is ``dynamically linked''.

@itemize
@item
If the optional argument @var{LIBRARY_FILE_PATHNAME} @strong{is not} used:

@itemize -
@item
If the option @option{--libmbfl} @strong{is not} used on the command line of @value{PROSCRIPTCMD}:
the macro use expands into shell code that sources the library @value{LIBMBFLFILE} installed on the
system.

@item
If the option @option{--libmbfl} @strong{is} used on the command line of @value{PROSCRIPTCMD}: the
macro use expands into shell code that sources the file pathname selected by the option; it is meant
to be an implementation of @value{LIBMBFLFILE}.
@end itemize

@item
If the optional argument @var{LIBRARY_FILE_PATHNAME} @strong{is} used: that argument is interpreted
as file system pathname of a library to source in the code; does not matter which library, either a
@value{LIBMBFLFILE} implementation or some other library.  The macro use expands into shell code
that sources the library.
@end itemize

The macro use expands into:

@example
source @var{LIBRARY_FILE_PATHNAME} || exit 100
@end example

@noindent
so, in the general case, the argument @var{LIBRARY_FILE_PATHNAME} must be a M4 expression expanding
into a Bash expression evaluating into a file system pathname.

As example, we can load a library selecting it from an environment variable as follows:

@example
mbfl_load_library("$@{MY_LIBPTN:?'variable not set'@}")
@end example

@noindent
or we can select only the library's installation directory with an environment variable:

@example
mbfl_load_library("$@{MY_LIBPATH:?'variable not set'@}/libmy.bash")
@end example

As other example, we could preprocess a script with the following command line:

@example
@value{PROSCRIPT} --define=__LIBFILE_PTN__=/path/to/libmy.bash -oscript.bash script.bash.m4
@end example

@noindent
and in the script's source file we write:

@example
mbfl_load_library('__LIBFILE_PTN__')
@end example
@end deffn

@c page
@node preprocessor parameters
@section Function parameters handling


@deffn {Preprocessor Macro} mbfl_mandatory_parameter (@var{VARNAME}, @var{NUMBER}, @var{DESCRIPTION}, @var{OPTIONS})
Define a variable local to a shell function holding an argument to the function.  @var{VARNAME} is
the name of the variable; @var{NUMBER} is the positional parameter number; @var{DESCRIPTION} is a
description of the argument; @var{OPTIONS} are options for the shell built--in @code{declare}.

For example, the following:

@example
mbfl_mandatory_parameter(PATHNAME, 2, file pathname)
@end example

@noindent
is expanded to:

@smallexample
declare PATHNAME=$@{2:?"missing file pathname parameter to '$FUNCNAME'"@}
@end smallexample

Another example the following function:

@example
function message () @{
  mbfl_mandatory_parameter(PROGNAME, 1, program name, -r)
  mbfl_mandatory_parameter(STRING,   2, message string)

  printf '%s: %s\n' "$PROGNAME" "$STRING"
@}
@end example

@noindent
is expanded to:

@smallexample
function message () @{
  declare -r PROGNAME=$@{1:?"missing program name parameter to '$FUNCNAME'"@}
  declare    STRING=$@{2:?"missing message string parameter to '$FUNCNAME'"@}

  printf '%s: %s\n' "$PROGNAME" "$STRING"
@}
@end smallexample

@noindent
and so it is a function with two mandatory parameters.
@end deffn


@anchor{mbfl_mandatory_nameref_parameter}
@deffn {Preprocessor Macro} mbfl_mandatory_nameref_parameter (@var{NAME}, @var{NUMBER}, @var{DESCRIPTION})
Similar to @func{mbfl_mandatory_parameter} but use the @code{-n} attribute when declaring the
variable.  This makes the new variable a NAMEREF for the given variable name; @bashref{Shell
Parameters, Shell Parameters}.

A use of this macro roughly expands into:

@example
declare mbfl_a_variable_@var{NAME}=$@{@var{NUMBER}:?@}
declare -n @var{NAME}=$mbfl_a_variable_@var{NAME}
@end example

@noindent
where the @emph{proxy variable} @var{NAME} is defined as an alias of the @emph{data variable}, whose
name is stored in the numeric parameter; the additional @emph{name variable}
@code{mbfl_a_variable_@var{NAME}} holds the name of the @emph{data variable}.  We can use the macro
@func{mbfl_datavar} to retrieve the name of the data variable.  @ref{preprocessor nameref, Variable
name references}.
@end deffn


@deffn {Preprocessor Macro} mbfl_mandatory_integer_parameter (@var{VARNAME},  @var{NUMBER}, @var{DESCRIPTION})
Like @func{mbfl_mandatory_parameter} but use the @code{-i} attribute when declaring the variable.
This assigns the integer attribute to the variable; @bashref{Bash Builtins, Bash Builtins}.
@end deffn


@deffn {Preprocessor Macro} mbfl_optional_parameter (@var{VARNAME}, @var{NUMBER})
@deffnx {Preprocessor Macro} mbfl_optional_parameter (@var{VARNAME}, @var{NUMBER}, @var{DEFAULT_VALUE})
@deffnx {Preprocessor Macro} mbfl_optional_parameter (@var{VARNAME}, @var{NUMBER}, @var{DEFAULT_VALUE}, @var{OPTIONS})
Define a variable local to a shell function holding an argument to the
function.

The argument @var{VARNAME} is the name of the variable.  The argument @var{NUMBER} is the positional
parameter number.  The argument @var{DEFAULT_VALUE} is the initialisation value for the variable if
the argument is not used; when @var{DEFAULT_VALUE} is not present: the variable is left empty;
@var{OPTIONS} are options for the shell built--in @code{declare}.

Example, the following:

@example
mbfl_optional_parameter(COUNT, 2, 123)
@end example

@noindent
is expanded to:

@smallexample
declare COUNT=$@{2:-123@}"
@end smallexample

@noindent
and the following:

@example
mbfl_optional_parameter(COUNT, 2,,-i)
@end example

@noindent
is expanded to:

@smallexample
declare -i COUNT=$@{2:-@}"
@end smallexample
@end deffn


@deffn {Preprocessor Macro} mbfl_optional_integer_parameter (@var{VARNAME}, @var{NUMBER})
@deffnx {Preprocessor Macro} mbfl_optional_integer_parameter (@var{VARNAME}, @var{NUMBER}, @var{DEFAULT_VALUE})
Like @func{mbfl_optional_parameter} but use the @code{-i} attribute when declaring the variable;
this assigns the integer attribute to the variable; @bashref{Bash Builtins, Bash Builtins}.

@strong{NOTE} When the default value is missing: Bash automatically sets the variable to zero!
@end deffn

@c page
@node preprocessor arguments
@section Script arguments handling


@deffn {Preprocessor Macro} mbfl_command_line_argument (@var{VARNAME}, @var{ARGINDEX})
@deffnx {Preprocessor Macro} mbfl_command_line_argument (@var{VARNAME}, @var{ARGINDEX}, @var{OPTIONS})
Define a variable holding an argument to the script: store in the variable @var{VARNAME} the value
at key @var{ARGINDEX} in the index array @var{ARGV}; the first argument has index 0.  The optional
@var{OPTIONS} are options for the shell built--in @code{declare}.

Example, the following:

@example
mbfl_command_line_argument(PATHNAME, 3, -r)
@end example

@noindent
is expanded to:

@example
declare -r PATHNAME=$@{ARGV[3]@}
@end example
@end deffn


@deffn {Preprocessor Macro} mbfl_extract_command_line_argument (@var{VARNAME}, @var{ARGINDEX})
@deffnx {Preprocessor Macro} mbfl_extract_command_line_argument (@var{VARNAME}, @var{ARGINDEX}, @var{OPTIONS})
Expand into an equivalent of:

@example
mbfl_command_line_argument(@var{VARNAME}, @var{ARGINDEX}, @var{OPTIONS})
mbfl_variable_unset(ARGV[@var{ARGINDEX}])
@end example

We use this macro to access a non--option command line argument and to remove it from the array
@env{ARGV}, so that it will no longer be included in expansions like:

@example
$@{ARGV[@@]@}
@end example
@end deffn

@c page
@node preprocessor nameref
@section Variable name references


The preprocessor implements facilities to declare variables with unique names and use them as target
for variables with the NAMEREF attribute.

The basic usage pattern is to declare a variable in a caller function with the preprocessor
directive @func{mbfl_declare_varref} and to access such a variable from a callee function using the
preprocessor directive @func{mbfl_mandatory_nameref_parameter} as follows:

@example
function caller () @{
    mbfl_declare_varref(VAR)

    callee mbfl_datavar(VAR)
    echo $VAR
@}

function callee () @{
    mbfl_mandatory_nameref_parameter(VAR, 1, variable reference)

    VAR=123
@}
@end example

@noindent
mutating the variable @samp{VAR} in @func{callee} will mutate the variable @var{VAR} in
@func{caller}.  For details on declaring the variable @ref{mbfl_declare_varref, Full NAMEREF
declarations}.  For details on accessing the variable @ref{mbfl_mandatory_nameref_parameter,
Preprocessor parameters}.

@menu
* preprocessor nameref intro::          Introduction to the NAMEREF mechanism.
* preprocessor nameref access::         Variables accessors.
* preprocessor nameref declaring::      Full NAMEREF declarations.
* preprocessor nameref unset::          Unsetting NAMEREF declarations.
@end menu

@c page
@node preprocessor nameref intro
@subsection Introduction to the NAMEREF mechanism


@cindex Data variable, definition
@cindex Definition of data variable
@cindex Proxy variable, definition
@cindex Definition of proxy variable


With these facilities we can use the @code{_var} variants of @mbfl{} functions as follows:

@example
mbfl_declare_varref(RV)

mbfl_file_extension_var mbfl_datavar(RV) /path/to/file.ext
"$RV"  @result{} ext
@end example

@noindent
without risking a variable name collision and without using the standard output of callee functions
to acquire a result.  In this example, the use of @func{mbfl_declare_varref} expands into:

@example
declare mbfl_a_variable_RV
mbfl_variable_alloc mbfl_a_variable_RV
declare $mbfl_a_variable_RV
declare -n RV=$mbfl_a_variable_RV
@end example

@noindent
a @dfn{name variable} @code{mbfl_a_variable_RV} is declared and filled with a unique @dfn{data
variable} name by @func{mbfl_variable_alloc}; then the @dfn{data variable} is declared; finally a
@dfn{proxy variable} @code{RV} is defined as alias for the @dfn{data variable}.

@quotation
Remember that when using @code{declare}: if we are at the top--level, the variable will be global;
if we are in a function, the variable will be local.
@end quotation

Given a @dfn{proxy variable} name defined this way: we can retrieve its @dfn{name variable} name
with the macro @func{mbfl_namevar}; we can retrieve its @dfn{data variable} name with the macro
@func{mbfl_datavar}.

Other macros declare variables similarly, using the same scheme of 3 variable declarations: name
variable, data variable, proxy variable.

If we declare a data variable as global: we can pass its name around and accessing it into other
functions; we have to remember to release it somewhere.

Yes: it's madness@dots{}

@c page
@node preprocessor nameref access
@subsection Variables accessors


@deffn {Preprocessor Macro} mbfl_namevar (@var{NAME})
The argument @var{NAME} must be the name of a proxy variable.  Uses of this macro expand into:

@example
mbfl_a_variable_@var{NAME}
@end example

Given the name of a @emph{proxy variable}: expand into the name of the @emph{name variable}.
@end deffn


@deffn {Preprocessor Macro} mbfl_datavar (@var{NAME})
The argument @var{NAME} must be the name of a proxy variable.  Uses of this macro expand into:

@example
$mbfl_a_variable_@var{NAME}
@end example

Given the name of a @emph{proxy variable}: expand into code that, executed at run--time, returns the
name of the @emph{data variable}.

@quotation
This macro is often used, we may find useful a shortcut like:

@example
m4_define([[[_]]],[[[mbfl_datavar([[[$1]]])]]])
@end example

@noindent
with which we write code like:

@example
mbfl_declare_varref(RV)

mbfl_file_extension_var _(RV) /path/to/file.ext
"$RV"  @result{} ext
@end example

We must be careful if the source code contains the standalone underscore character.
@end quotation
@end deffn

@c page
@node preprocessor nameref declaring
@subsection Full NAMEREF declarations


The following macros declare local and global variables we can use with the NAMEREF mechanism.  All
the variables declared with the macros below can be unset using @func{mbfl_unset_varref}; for
details @ref{mbfl_unset_varref, Unsetting NAMEREF declarations}.  When defining array variables we
can use specific macros, rather than the ones below; @ref{arrays nameref, Declaring arrays as
variable references}.


@anchor{mbfl_declare_varref}
@deffn {Preprocessor Macro} mbfl_declare_varref (@var{NAME}, @var{INIT_VALUE}, @var{DECLARE_OPTIONS})
A use of this macro expands into:

@example
declare mbfl_a_variable_@var{NAME}
mbfl_variable_alloc mbfl_a_variable_@var{NAME}
declare @var{DECLARE_OPTIONS} $mbfl_a_variable_@var{NAME}
declare -n @var{NAME}=$mbfl_a_variable_@var{NAME}
@end example

When @var{INIT_VALUE} is empty, it finishes with:

@example
@var{NAME}=
@end example

@noindent
which defines the variable and causes @code{test -v @var{VARNAME}} to return true; defining the
variable this way works with scalar variables, but defines an array variables as containing an
element with key @samp{0}, which is probably not what we want.

When @var{INIT_VALUE} is @strong{not} empty, it finishes with:

@example
@var{NAME}=@var{INIT_VALUE}
@end example

A @dfn{name variable} @code{mbfl_a_variable_@var{NAME}} is declared and filled with a unique
@dfn{data variable} name by @func{mbfl_variable_alloc}; then the @dfn{data variable} is declared;
finally a @dfn{proxy variable} @var{NAME} is defined as alias for the @dfn{data variable}.  If the
macro is used at top--level: the variables are global.

We can use the argument @var{DECLARE_OPTIONS} to declare a global data variable:

@example
mbfl_declare_varref(@var{VARNAME}, @var{INIT_VALUE}, -g)
@end example
@end deffn

@c ------------------------------------------------------------------------

@deffn {Preprocessor Macro} mbfl_declare_global_varref (@var{NAME}, @var{INIT_VALUE}, @var{OPTIONS})
Like @func{mbfl_declare_varref} but always include the option @option{-g}.  Its expansion is:

@example
mbfl_declare_global_varref(@var{NAME}, @var{INIT_VALUE}, @var{OPTIONS})
@expansion{} mbfl_declare_varref(@var{NAME}, @var{INIT_VALUE}, -g @var{OPTIONS})
@end example
@end deffn

@cindex Declaring read--only arrays

With these macros it is not possible to declare a read--only array; the macro use:

@example
mbfl_declare_varref(ARRY, ([a]=1), -rA)
@end example

@noindent
expands into:

@example
declare mbfl_a_variable_ARRY
mbfl_variable_alloc mbfl_a_variable_ARRY
declare -rA $mbfl_a_variable_ARRY
declare -n ARRY=$mbfl_a_variable_ARRY
ARRY=([a]=1)
@end example

@noindent
so when the array is initialised it has already been declared as read--only: an error results.  It
is not possible to modify this macro to allow such declaration, because, while this syntax works:

@example
declare -rA ARRY=([a]=1)
@end example

@noindent
the following is invalid according to Bash:

@example
declare -rA $mbfl_a_variable_ARRY=([a]=1)
@end example


@deffn {Preprocessor Macro} mbfl_declare_nameref (@var{NAME}, @var{DATA_VARNAME_EXPR})
A use of this macro expands into:

@example
declare    mbfl_a_variable_@var{NAME}=@var{DATA_VARNAME_EXPR}
declare -n @var{NAME}=$mbfl_a_variable_@var{NAME}
@end example

Declare a proxy variable @var{NAME} aliasing the data variable whose value is the result of
evaluating @var{DATA_VARNAME_EXPR}.

@quotation
@strong{NOTE} We cannot declare @code{mbfl_a_variable_@var{NAME}} as read--only because the we
cannot unset it.
@end quotation

We can use this macro as follows:

@example
function main () @{
    declare VARNAME
    worker VARNAME
    mbfl_declare_nameref(VAR, $VARNAME)
    ...
@}

function worker () @{
    mbfl_mandatory_nameref_parameter(RV, 1)
    mbfl_declare_varref(VAR, 123, -g)
    RV=mbfl_datavar(VAR)
@}

main
@end example
@end deffn

@c page
@node preprocessor nameref unset
@subsection Unsetting NAMEREF declarations


@anchor{mbfl_undeclare_varref}
@anchor{mbfl_unset_varref}
@deffn {Preprocessor Macro} mbfl_undeclare_varref (@var{NAME})
@deffnx {Preprocessor Macro} mbfl_unset_varref (@var{NAME})
The argument @var{NAME} must be the first argument to a previous call to @func{mbfl_declare_varref}.
A use of this macro expands into:

@example
unset -v $mbfl_a_variable_@var{NAME}
unset -v mbfl_a_variable_@var{NAME}
unset -v -n @var{NAME}
unset -v @var{NAME}
@end example

Unset the @emph{proxy variable} @var{NAME} and all the variables associated to it.
@end deffn

@c page
@node base
@chapter Some base functions and variables


@menu
* base variables::              Miscellaneous variables.
* base functions::              Miscellaneous functions.
@end menu

@c page
@node base variables
@section Miscellaneous variables


@defvar mbfl_INSTDIR_PREFIX
Hold the value of the @gnu{} Autoconf substitution @code{@@prefix@@}.
@end defvar


@defvar mbfl_INSTDIR_EXEC_PREFIX
Hold the value of the @gnu{} Autoconf substitution @code{@@exec_prefix@@}.
@end defvar


@defvar mbfl_INSTDIR_BINDIR
Hold the value of the @gnu{} Autoconf substitution @code{@@bindir@@}.  The preprocessor script is
installed under this directory, so we can compose its pathname as follows:

@example
printf -v MBFLPP_PATHNAME '%s/@value{PROSCRIPT}' "$mbfl_INSTDIR_BINDIR"
@end example
@end defvar


@defvar mbfl_INSTDIR_DATAROOTDIR
Hold the value of the @gnu{} Autoconf substitution @code{@@datarootdir@@}.
@end defvar


@defvar mbfl_INSTDIR_DATADIR
Hold the value of the @gnu{} Autoconf substitution @code{@@datadir@@}.  All the libraries installed
by @value{PACKAGE} are under this directory, so we can compose pathnames as follows:

@example
printf -v LIBMBFL_PATHNAME '%s/@value{LIBMBFL}'      "$mbfl_INSTDIR_DATADIR"
printf -v PREPRO_PATHNAME  '%s/libmbfl-preprocessor.m4' "$mbfl_INSTDIR_DATADIR"
@end example
@end defvar

@c page
@node base functions
@section Miscellaneous functions


@defun mbfl_set_maybe @var{NAME} @var{VALUE}
Set a variable named @var{NAME} to @var{VALUE}, but only if @var{NAME}
is not the empty string; if @var{VALUE} is the empty string: the old
value of @var{NAME} is left untouched.
@end defun


@defun mbfl_read_maybe_null @var{VARNAME}
Read a line from its stdin and store it in a variable named
@var{VARNAME}.  If @func{mbfl_option_null} returns true: the null
character is used as terminator, as in:

@example
IFS= read -d $'\x00'
@end example
@end defun

@c page
@node shell
@chapter Shell facilities


@menu
* shell introspection::         Introspection facilities.
@end menu

@c page
@node shell introspection
@section Introspection facilities


@defun mbfl_shell_is_function @var{NAME}
Return successfully if @var{NAME} is an identifier representing a defined function name; otherwise
return unsuccessfully.
@end defun

@c page
@node exit
@chapter Script termination facilities


Exiting a script is no joking matter!  If we do not use the facilities described in this chapter: we
can still safely exit a script by calling Bash's built--in @code{exit}.  But it is preferable to use
the function @func{mbfl_exit}.

@menu
* exit facilities::             Facilities to exit a script.
* exit codes::                  Exit codes and return codes
* exit atexit::                 Running scripts at exit-time.
@end menu

@c page
@node exit facilities
@section Facilities to exit a script


@defun mbfl_exit @var{CODE}
Wrapper for the @command{exit} command that updates the internal script's state.
@end defun


@defvar mbfl_PENDING_EXIT_CODE
Set by @func{mbfl_exit} to the exit code this script is using.  This variable might be accessed by
atexit commands to appropriately react to an error condition; @ref{exit atexit, Running scripts at
exit-time}.
@end defvar


@defun mbfl_script_is_exiting
Return true if the script is exiting.  This function might be called by a location command being run
by an atexit command, @ref{exit atexit, Running scripts at exit--time}.
@end defun

@c page
@node exit codes
@section Exit codes and return codes


Some functions and global variables are provided to declare script's exit codes.  @mbfl{} declares
its own exit codes starting from @code{100} and decreasing; we should declare our exit codes
starting from @code{3} and increasing.  The exit codes @code{0} and @code{1} are reserved for the
functions @func{exit_because_success} and @func{exit_because_failure}.


@defun mbfl_declare_exit_code @var{CODE} @var{NAME}
Declare an exit code and a return code with value @var{CODE} and identifier @var{NAME}.  This
function creates a function and an alias equivalent to the following:

@example
function exit_because_@var{NAME} () @{ mbfl_exit @var{CODE}; @}
alias return_because_@var{NAME}='return @var{CODE};'
@end example

@noindent
the name of the function is the string @code{exit_because_} followed by the exit code name; the name
of the alias is the string @code{return_because_} followed by the exit code name.
@end defun


@defun mbfl_print_exit_code @var{NAME}
Print the code associated to @var{NAME}.
@end defun


@defvar mbfl_EXIT_CODES_BY_NAME
A global associative array whose keys are the code names used as @var{NAME} argument to
@func{mbfl_declare_exit_code} and whose values are the code values used as @var{CODE} argument to
@func{mbfl_declare_exit_code}.
@end defvar


By default the exit code @code{0} is associated to the name @code{success} and the exit code
@code{1} is associated to the name @code{failure}; so the following functions exist.


@defun exit_because_success
@defunx exit_success
Exit the script with code @code{0}.
@end defun


@deffn {Alias} return_because_success
@deffnx {Alias} return_success
Return with code @code{0}.
@end deffn


@defun exit_because_failure
@defunx exit_failure
Exit the script with code @code{1}.
@end defun


@deffn {Alias} return_because_failure
@deffnx {Alias} return_failure
Return with code @code{1}.
@end deffn


In addition, the following functions are predefined; @mbfl{}'s modules define other exit and return
functions.


@anchor{exit_because_error_loading_library}
@anchor{return_because_error_loading_library}
@deffn {Function} exit_because_error_loading_library
@deffnx {Alias} return_because_error_loading_library
Exit or return with code @code{100}.
@end deffn


@anchor{exit_because_invalid_function_name}
@anchor{return_because_invalid_function_name}
@deffn {Function} exit_because_invalid_function_name
@deffnx {Alias} return_because_invalid_function_name
Exit or return with code @code{91}.
@end deffn


@anchor{ecause_invalid_mbfl_version}
@anchor{return_invalid_mbfl_version}
@anchor{exit_because_invalid_mbfl_version}
@deffn {Function} exit_because_invalid_mbfl_version
@deffnx {Alias} return_because_invalid_mbfl_version
Exit or return with code @code{88}.
@end deffn

@c page
@node exit atexit
@section Running scripts at exit--time


Bash allows us to execute a command whenever it exits by issuing the command:

@example
trap @meta{script} EXIT
@end example

@noindent
the atexit @mbfl{} module uses this mechanism to register, forget and run multiple commands.


@defun mbfl_atexit_enable
@defunx mbfl_atexit_disable
Register or delete @func{mbfl_atexit_run} as command for the @code{EXIT} event.  We must call this
function first if we want to use this module.
@end defun


@defun mbfl_atexit_register @var{HANDLER}
@defunx mbfl_atexit_register @var{HANDLER} @var{IDVAR}
Register a new @var{HANDLER} command.  If the optional argument @var{IDVAR} is present, it must be
the name of a variable in the scope of the caller: store into such variable a unique identifier
associated to the handler.
@end defun


@defun mbfl_atexit_forget @var{ID}
Remove the, previously registered, handler command associated to @var{ID}.  If no handler is
associated to it: nothing happens.
@end defun


@defun mbfl_atexit_run
Run all the registered handlers, from the last registered to the first.  Whenever a handler is run:
it is removed from the internal registry.
@end defun


@defun mbfl_atexit_clear
Remove all the registered handlers from the internal registry.  This renders invalid all the handler
identifiers that were created.
@end defun

@c page
@node locations
@chapter Running location handlers


A @dfn{location} is a chunk of code between the following enter and leave actions:

@example
mbfl_location_enter
@{
   ...
@}
mbfl_location_leave
@end example

@noindent
inside a location we can register a ``handler command'' that is automatically executed whenever the
location is left by calling @func{mbfl_location_leave}.  We can nest locations at will.  We can run
all the handlers registered so far in a stack of locations.  Location handlers are stored in hooks,
@ref{hooks, Executing commands with event hooks}.

@menu
* locations core::              Locations programming interface.
* locations handlers::          Special location handlers.
* locations examples::          Locations usage examples.
@end menu

@c page
@node locations core
@section Locations programming interface


In this chapter we use the underscore syntax as defined in @ref{objects conventions underscore, The
underscore syntax}.


@defun mbfl_location_enter
Enter into a new location.  Initialise the internal state.
@end defun


@defun mbfl_location_leave
Leave the current location.  Run all the registered handlers in reverse order.  Return the return
status of the last command executed before the call to this function (@code{$?}).  If this function
is called when no location exists: nothing happens.

Before running the handlers the state of the current location is removed from the script's state.
@end defun


@deffn {Preprocessor Macro} mbfl_location_leave_then_return_failure
Expand as follows:

@example
mbfl_location_leave_then_return_failure
@expansion{} @{ mbfl_location_leave ; return_because_failure ; @}
@end example
@end deffn


@anchor{mbfl_location_handler}
@defun mbfl_location_handler @var{HANDLER_SCRIPT}
Register a new handler in the current location.

It is an error if this function is called outside a location: an exceptional--condition of class
@class{mbfl_outside_location_condition} is raised; @ref{conditions location outside, Invalid
operation outside location exceptional--condition objects}.
@end defun


@cindex Maker handlers for locations
@cindex Locations, maker handlers
@defun mbfl_location_maker_handler @var{HANDLER_SCRIPT}
Register a new handler in the current location.

It is an error if this function is called outside a location: an exceptional--condition of class
@class{mbfl_outside_location_condition} is raised; @ref{conditions location outside, Invalid
operation outside location exceptional--condition objects}.

@dfn{Maker handlers} are executed only if @func{mbfl_location_leave} is called after a command that
exited with non--zero status; otherwise they are skipped.  This is a scenario that happens in object
constructors:

@itemize
@item
some asynchronous resources ``belong'' to the constructor and must be released when
the constructor returns, either successfully or because of an error;

@item
other asynchronous resources ``belong'' to the constructed object and must be released only when the
constructor fails.
@end itemize
@end defun


@defun mbfl_location_run_all
Run all the handlers unwinding all the locations.  This is useful as atexit handler, @ref{exit
atexit, Running scripts at exit--time}.
@end defun


@defun mbfl_location_hook_var @var{HOOK_RV}
When called inside a location: store in the result variable @var{HOOK_RV} the hook associated to the
current location, then return true; otherwise return false.

@example
mbfl_location_enter
@{
    mbfl_declare_varref(HOOK_RV)

    if ! mbfl_location_hook_var _(HOOK_RV)
    then return_failure
    fi

    mbfl_hook_add $HOOK_RV my_handler_one

    mbfl_declare_nameref(HOOK, $HOOK_RV)
    mbfl_hook_add _(HOOK) my_handler_two
@}
mbfl_location_leave
@end example

We can use this function to add handlers to some outer location:

@example
function outer () @{
    mbfl_location_enter
    @{
        mbfl_declare_varref(OUTER_LOCATION_HOOK)
        mbfl_location_hook_var _(OUTER_LOCATION_HOOK)

        mbfl_location_handler my_handler_one
        inner $OUTER_LOCATION_HOOK
        do_some_thing
    @}
    mbfl_location_leave
@}

function inner () @{
    mbfl_mandatory_parameter(OUTER_LOCATION_HOOK, 1, outer hook)

    mbfl_location_enter
    @{
        mbfl_location_handler my_handler_two
        mbfl_hook_add $OUTER_LOCATION_HOOK my_handler_three
        do_some_other_thing
    @}
    mbfl_location_leave
@}
@end example
@end defun

@c page
@node locations handlers
@section Special location handlers


@anchor{mbfl_location_enable_cleanup_atexit}
@defun mbfl_location_enable_cleanup_atexit
@defunx mbfl_location_disable_cleanup_atexit
Enable or disable running the location handlers through an atexit handler, @ref{exit atexit, Running
scripts at exit--time}.  The enable operation registers an atexit handler that cleans up the current
stack of locations.

It is suggested to always add the following code to the preamble of a script:

@example
mbfl_atexit_enable
mbfl_location_enable_cleanup_atexit
@end example
@end defun


@defun mbfl_location_handler_suspend_testing
Suspend the test mode inside a location block, by executing the following code:

@example
mbfl_option_test_save
mbfl_location_handler mbfl_option_test_restore
@end example

For a discussion of its usage see @ref{program executing testing, Testing a script and running
programs}.
@end defun


@defun mbfl_location_handler_change_directory @var{NEWPWD}
Do this:

@enumerate
@item
Check that @var{NEWPWD} is a string representing the file system pathname of an existent and
executable directory.

@item
Push the current working directory to the directories stack (@command{pushd}).

@item
Change the current working directory to @var{NEWPWD} using @func{mbfl_cd}.

@item
Register a new location handler that pops the top from the directories stack (@command{popd}).
@end enumerate

When successful return true, otherwise return false.
@end defun


@defun mbfl_location_handler_restore_lastpipe
When called, save the state of the @code{lastpipe} option of @code{shopt} using:

@example
shopt -p lastpipe
@end example

Upon exiting the location: the handler restores the previous status of @code{lastpipe}.
@bashref{The Shopt Builtin, The Shopt Builtin}.

Using this handler is helpful when the last command of a pipe is executed in the current shell,
rather than a subshell, to store the result of a computation in a shell variable.

@example
declare RESULT

mbfl_location_enter
@{
    mbfl_location_handler_restore_lastpipe
    shopt -s lastpipe
    output_something | while read
    do RESULT+=$REPLY
    done
@}
mbfl_location_leave

# use $RESULT
@end example
@end defun


@defun mbfl_location_handler_restore_nullglob
When called, save the state of the @code{nullglob} option of @code{shopt} using:

@example
shopt -p nullglob
@end example

Upon exiting the location: the handler restores the previous status of @code{nullglob}.
@bashref{The Shopt Builtin, The Shopt Builtin}.
@end defun

@c page
@node locations examples
@section Locations usage examples


@menu
* locations examples 1::        Single location, syntactic scoping.
* locations examples 2::        Nested locations.
* locations examples 3::        Nested function calls.
@end menu

@c page
@node locations examples 1
@subsection Single location, syntactic scoping


The handler functions can access the variables in the uplevel function frames.

@example
function one   () @{ R_one=$X;   @}
function two   () @{ R_two=$Y;   @}
function three () @{ R_three=$Z; @}

@{
  local R_one R_two R_three
  local X=1 Y=2 Z=3

  mbfl_location_enter
  @{
    mbfl_location_handler one
    mbfl_location_handler two
    mbfl_location_handler three
  @}
  mbfl_location_leave

  $R_one          @result{} 1
  $R_two          @result{} 2
  $R_three        @result{} 3
@}
@end example

@c page
@node locations examples 2
@subsection Nested locations


Remember that the handlers are called when a location is left:

@example
function handler_append () @{
    local THING=$@{1:?"missing thing parameter"@}
    RESULT+=$THING
@}

@{
    local RESULT

    handler_append 0
    mbfl_location_enter
    @{
        mbfl_location_handler "handler_append 1"
        mbfl_location_enter
        @{
            mbfl_location_handler "handler_append 2"
            mbfl_location_enter
            @{
                mbfl_location_handler "handler_append 3"
            @}
            mbfl_location_leave
            mbfl_location_handler "handler_append 4"
        @}
        mbfl_location_leave
        mbfl_location_handler "handler_append 5"
    @}
    mbfl_location_leave
    handler_append 6

    "$RESULT"   @result{} 0342516
@}
@end example

@c page
@node locations examples 3
@subsection Nested function calls


Remember that the handlers are called when a location is left:

@example
declare RESULT

function handler_append () @{
    local THING=$@{1:?"missing thing parameter"@}
    RESULT+=$THING
@}

function func () @{
    handler_append 0
    mbfl_location_enter
    @{
        sub-func
    @}
    mbfl_location_leave
    handler_append 6
@}

function sub-func () @{
    mbfl_location_handler "handler_append 1"
    mbfl_location_enter
    @{
        sub-sub-func
    @}
    mbfl_location_leave
    mbfl_location_handler "handler_append 5"
@}

function sub-sub-func () @{
    mbfl_location_handler "handler_append 2"
    mbfl_location_enter
    @{
        mbfl_location_handler "handler_append 3"
    @}
    mbfl_location_leave
    mbfl_location_handler "handler_append 4"
@}

func
"$RESULT"       @result{} 0342516
@end example

@c page
@node variables
@chapter Manipulating variables


@menu
* variables service::           Required user defined variables.
* variables colon::             Manipulating colon variables.
* variables misc::              Miscellaneous variable facilities.
@end menu

@c page
@node variables service
@section Required user defined variables


The following variables are expected to be defined before the @mbfl{}
code is evaluated.  They are used by @mbfl{} to compute values for its
own variables.


@anchor{script_REQUIRED_MBFL_VERSION}
@defvar script_REQUIRED_MBFL_VERSION
The minimum, full, semantic version specification of the @mbfl{} library needed by this script,
optionally prefixed with a @code{v} character; @ref{semver, Semantic version specifications}.  We
can use this variable both to validate the required version at runtime or merely as a comment on the
requirements of the script.  We can request the main module to compare the version hard--coded in
the @mbfl{} with the one required by the script, as specified by this variable; @ref{main, Main
function}.
@end defvar


@anchor{script_PROGNAME}
@defvar script_PROGNAME
The name of the script.  It is used, for example, in error and verbose messages.
@end defvar


@anchor{script_AUTHOR}
@defvar script_AUTHOR
The name of the script author(s).  It is used in copyright statements.
@end defvar


@anchor{script_COPYRIGHT_YEARS}
@defvar script_COPYRIGHT_YEARS
A comma separated list of years of copyright.  It is used in copyright
statements.
@end defvar


@anchor{script_VERSION}
@defvar script_VERSION
The version number of the script.  It is used in copyright statements
and it can be directly queried using the command line options
@option{--version} and @option{--version-only}.
@end defvar


@anchor{script_LICENSE}
@defvar script_LICENSE
The identifier of the license under which the script is released.  Accepted values are: @code{GPL}
or @code{GPL2}, @code{GPL3}, @code{LGPL} or @code{LGPL2}, @code{LGPL3}, @code{BSD}, @code{liberal}.
It is used to select the appropriate value to be displayed when the user of the script selects the
@code{--license} option.  @ref{getopts options, Predefined options}
@end defvar


@anchor{script_USAGE}
@defvar script_USAGE
Must be a string, of one or more lines, describing the synopsis of the
program.  It is usually something like:

@example
script_USAGE="usage: $@{script_PROGNAME@} [options] ..."
@end example

@noindent
if the script accepts either input from the stdin channel and input from
a selected file, it is useful to present both cases:

@example
script_USAGE="usage: $@{script_PROGNAME@} [options] <INPUT-FILE
usage: $@{script_PROGNAME@} [options] INPUT-FILE"
@end example

If the script defines multiple actions: it is better to define a
synopsis description for every supported action, by setting this
variable in the action--specific ``before parsing options'' function.
@ref{actions} for details.
@end defvar


@anchor{script_DESCRIPTION}
@defvar script_DESCRIPTION
One line string providing a brief description of the program.  It is used
in the help screen (the one echoed when the @option{--help} option is
used) right after the content of @code{script_USAGE}.

If the script defines multiple actions: it is better to define a usage
description for every supported action, by setting this variable in the
action--specific ``before parsing options'' function.  @ref{actions} for
details.
@end defvar


@anchor{script_EXAMPLES}
@defvar script_EXAMPLES
One or more lines of text to be displayed at the end of the help screen,
after the options description.  It should contain examples of common
invocations for the script.

If the script defines multiple actions: it is better to define a set of
examples description for every supported action, by setting this
variable in the action--specific ``before parsing options'' function.
@ref{actions} for details.
@end defvar


All the text in these variables is used as argument to the @code{printf}
built--in command; in particular: @code{script_DESCRIPTION} and
@code{script_EXAMPLES} are used as first argument to @code{printf}, so
the escape sequences (in particular @code{\t} and @code{\n}) are
expanded.

@c ------------------------------------------------------------

@subsubheading Examples

The following example shows how to declare the variables.

@example
script_REQUIRED_MBFL_VERSION=v3.0.0-devel.4
script_PROGNAME=myscript.sh
script_AUTHOR='Marco Maggi and Marco Maggi'
script_COPYRIGHT_YEARS='2002, 2003, 2004'
script_VERSION=1.0
script_LICENSE=GPL3
script_USAGE="usage: $script_PROGNAME [options] ..."
script_DESCRIPTION='Does this and that.'
script_EXAMPLES='Examples:

\tmyscript.sh --do-something arg arg ...
\tmyscript.sh --do-other arg arg ...'
@end example

Notice that @code{script_DESCRIPTION} and @code{script_EXAMPLES}
@strong{do not} end with a newline character.

@c page
@node variables colon
@section Manipulating colon variables


@defun mbfl_variable_colon_variable_to_array @var{VARNAME}
Take @var{VARNAME}'s value, a colon separated list of string, and store each string in the array
@code{mbfl_FIELDS}, starting with a base index of zero.

Example:

@example
VAR=a:b:c:d:e
declare -a mbfl_FIELDS

mbfl_variable_colon_variable_to_array VAR

echo mbfl_slots_number(mbfl_FIELDS)     @print{} 5
echo mbfl_slot_ref(mbfl_FIELDS, 0)      @print{} a
echo mbfl_slot_ref(mbfl_FIELDS, 1)      @print{} b
echo mbfl_slot_ref(mbfl_FIELDS, 2)      @print{} c
echo mbfl_slot_ref(mbfl_FIELDS, 3)      @print{} d
echo mbfl_slot_ref(mbfl_FIELDS, 4)      @print{} e
@end example
@end defun


@defun mbfl_variable_array_to_colon_variable @var{VARNAME}
Store each value from the array @code{mbfl_FIELDS} (with base index zero) in @var{VARNAME} as a
colon separated list of strings.

Example:

@example
declare -a mbfl_FIELDS=(a b c d e)

mbfl_variable_array_to_colon_variable VAR
echo $VAR                       @print{} a:b:c:d:e
@end example
@end defun


@defun mbfl_variable_colon_variable_drop_duplicate @var{VARNAME}
Take @var{VARNAME}'s value, a colon separated list of string, and remove duplicates.  Reset
@var{VARNAME} to the result.
@end defun

@c page
@node variables misc
@section Miscellaneous variable facilities


@defun mbfl_variable_alloc @var{_RV}
Generate a unique variable name and store it in the variable @var{_RV}.

To avoid allocating the same name twice: the function examines the new name testing if its value as
variable is empty; if it is empty, it considers it ``new''.  So, whenever we allocate a name: we
should locally initialise the variable to some non--empty value.

@example
local NAME

mbfl_variable_alloc NAME
$NAME   @result{} mbfl_u_variable_2323
@end example
@end defun


@deffn {Preprocessor Macro} mbfl_variable_unset (@var{VAR})
@deffnx {Preprocessor Macro} mbfl_unset_variable (@var{VAR})
These macros are synonyms.  Expand into a command that unsets the variable @var{VAR}:

@example
unset -v @var{VAR}
@end example
@end deffn

@c page
@node arrays
@chapter Manipulating arrays with functions and macros


@menu
* arrays declare::              Declaring arrays.
* arrays nameref::              Declaring arrays as data variables.
* arrays slots::                Accessing slots.
* arrays constructors::         Constructing arrays.
* arrays inspection::           Inspecting arrays.
* arrays contains::             What arrays contain.
* arrays debug::                Facilities to debug code using arrays.
* arrays deprecated::           Deprecated functions.
@end menu

@c page
@node arrays declare
@section Declaring arrays


@cindex Declaring arrays
@cindex Arrays, declaring


@deffn {Preprocessor Macro} mbfl_declare_assoc_array (@var{ARRAYNAME})
@deffnx {Preprocessor Macro} mbfl_declare_assoc_array (@var{ARRAYNAME}, @var{INIT})
Respectively expand into the statements:

@example
declare -A @var{ARRAYNAME}
declare -A @var{ARRAYNAME}=$@var{INIT}
@end example
@end deffn


@deffn {Preprocessor Macro} mbfl_declare_index_array (@var{ARRAYNAME})
@deffnx {Preprocessor Macro} mbfl_declare_index_array (@var{ARRAYNAME}, @var{INIT})
Respectively expand into the statements:

@example
declare -a @var{ARRAYNAME}
declare -a @var{ARRAYNAME}=$@var{INIT}
@end example
@end deffn

@c page
@node arrays nameref
@section Declaring arrays as data variables


@cindex Arrays, declaring as data variables
@cindex Declaring arrays as data variables
@cindex NAMEREF usable arrays
@cindex Array declarations usable with NAMEREF variables


@deffn {Preprocessor Macro} mbfl_declare_index_array_varref (@var{NAME}, @var{INIT_VALUE}, @var{DECLARE_OPTIONS})
Like @func{mbfl_declare_varref} but always include the @code{-a} option to the @command{declare}
definition of the data variable.  This makes the data variable an indexed array.
@end deffn


@deffn {Preprocessor Macro} mbfl_declare_assoc_array_varref (@var{NAME}, @var{INIT_VALUE}, @var{DECLARE_OPTIONS})
Like @func{mbfl_declare_varref} but always include the @code{-A} option to the @command{declare}
definition of the data variable.  This makes the data variable an associative array.
@end deffn

@c page
@node arrays slots
@section Accessing slots


@deffn {Preprocessor Macros} mbfl_slot_spec (@var{ARRAYNAME}, @var{KEY})
Expand as follows:

@example
mbfl_slot_spec(@var{ARRAYNAME}, @var{KEY}) @expansion{} @var{ARRAYNAME}[@var{KEY}]
@end example

This is useful both to build other macros and in situations like the argument to the option
@option{-v} of @command{printf}:

@example
declare -A ARRY
printf -v mbfl_slot_spec(ARRY, KEY) 'A%sC' 'B'
@end example
@end deffn


@deffn {Preprocessor Macros} mbfl_slot_ref (@var{ARRAYNAME}, @var{KEY})
@deffnx {Preprocessor Macros} mbfl_slot_qref (@var{ARRAYNAME}, @var{KEY})
Expand as follows:

@example
mbfl_slot_ref(@var{ARRAYNAME},  @var{KEY}) @expansion{}  $@{@var{ARRAYNAME}[@var{KEY}]@}
mbfl_slot_qref(@var{ARRAYNAME}, @var{KEY}) @expansion{} "$@{@var{ARRAYNAME}[@var{KEY}]@}"
@end example

@noindent
which evaluate to the value of the slot @var{KEY} in the array variable @var{ARRAYNAME}.  These
macros works with both indexed and associative arrays.
@end deffn


@deffn {Preprocessor Macros} mbfl_slot_set (@var{ARRAYNAME}, @var{KEY}, @var{EXPR})
Expands into the expression:

@example
@var{ARRAYNAME}[@var{KEY}]=@var{EXPR}
@end example

@noindent
which stores the value of @var{EXPR} in the slot @var{KEY} of the array variable @var{ARRAYNAME}.
This macro works with both indexed and associative arrays.
@end deffn


@deffn {Preprocessor Macros} mbfl_slot_append (@var{ARRAYNAME}, @var{KEY}, @var{EXPR})
Expands into the expression:

@example
@var{ARRAYNAME}[@var{KEY}]+=@var{EXPR}
@end example

@noindent
which appends the value of @var{EXPR} in the slot @var{KEY} of the array variable @var{ARRAYNAME}.
This macro works with both indexed and associative arrays.

Example:

@example
mbfl_declare_assoc_array(PAIRS)
mbfl_slot_set(PAIRS, 'abc', '123')
mbfl_slot_append(PAIRS, 'abc', ' 456')
mbfl_slot_qref(PAIRS, 'abc')   @result{} 123\ 456
@end example
@end deffn


@deffn {Preprocessor Macro} mbfl_slot_value_len (@var{ARRAYNAME}, @var{KEY})
Expand into the expression:

@example
$@{#@var{ARRAYNAME}[@var{KEY}]@}
@end example

@noindent
which is meant to evaluate to the number of characters in the value of the slot @var{KEY}.
@end deffn

@c page
@node arrays constructors
@section Constructing arrays


@defun mbfl_array_copy @var{DST} @var{SRC}
Copy element--by--element the source array @var{SRC} into the destination array @var{DST}; both
@var{DST} and @var{SRC} should be references to variables.

@example
mbfl_declare_assoc_array_varref(SRC, ([a]=1 [b]=2 [c]=3))
mbfl_declare_assoc_array_varref(DST)

mbfl_array_copy mbfl_datavar(DST) mbfl_datavar(SRC)

mbfl_slot_ref(DST, a)   @result{} 1
mbfl_slot_ref(DST, b)   @result{} 2
mbfl_slot_ref(DST, c)   @result{} 3
@end example
@end defun


@c page
@node arrays inspection
@section Inspecting arrays


@deffn {Preprocessor Macro} mbfl_slots_number (@var{ARRAYNAME})
Expands into the expression:

@example
$@{#@var{ARRAYNAME}[@@]@}
@end example

@noindent
evaluating to the number of pairs in the array variable @var{ARRAYNAME}.
@end deffn


@deffn {Preprocessor Macro} mbfl_slots_values (@var{ARRAYNAME})
@deffnx {Preprocessor Macro} mbfl_slots_qvalues (@var{ARRAYNAME})
Expand to a ``list'' of array values, respectively:

@example
 mbfl_slots_values(@var{ARRAYNAME})     @expansion{}  $@{@var{ARRAYNAME}[@@]@}
mbfl_slots_qvalues(@var{ARRAYNAME})     @expansion{} "$@{@var{ARRAYNAME}[@@]@}"
@end example
@end deffn


@deffn {Preprocessor Macro} mbfl_slots_keys (@var{ARRAYNAME})
@deffnx {Preprocessor Macro} mbfl_slots_qkeys (@var{ARRAYNAME})
Expand to a ``list'' of array keys, respectively:

@example
 mbfl_slots_keys(@var{ARRAYNAME})       @expansion{}  $@{!@var{ARRAYNAME}[@@]@}
mbfl_slots_qkeys(@var{ARRAYNAME})       @expansion{} "$@{!@var{ARRAYNAME}[@@]@}"
@end example
@end deffn


@defun mbfl_array_is_empty @var{ARRAY_VARNAME}
Return successfully if the array is empty.

@example
declare -a ARRY
mbfl_array_is_empty ARRY        @result{} 0
ARRY=(a b c)
mbfl_array_is_empty ARRY        @result{} 1
@end example
@end defun


@defun mbfl_array_is_not_empty @var{ARRAY_VARNAME}
Return successfully if the array is not empty.

@example
declare -a ARRY
mbfl_array_is_not_empty ARRY    @result{} 1
ARRY=(a b c)
mbfl_array_is_not_empty ARRY    @result{} 0
@end example
@end defun


@defun mbfl_array_length @var{ARRAY_VARNAME}
@defunx mbfl_array_length_var @var{_RV} @var{ARRAY_VARNAME}
Print the number of pairs in the array.

@DocVarVariant{}

@example
declare -a ARRY
mbfl_array_length ARRY          @print{} 0
ARRY=(a b c)
mbfl_array_length ARRY          @print{} 3

local _RV
mbfl_array_length_var _RV ARRY
"$_RV"   @print{} 3
@end example
@end defun

@c page
@node arrays contains
@section What arrays contain


@defun mbfl_array_contains @var{ARRY_VAR} @var{KEY}
Return successfully if @var{KEY} is set in the array referenced by @var{ARRAY_VAR}.

@example
declare -a ARRY=([0]=a [1]=b [2]=c)

mbfl_array_contains    ARRY 0 &&
   mbfl_array_contains ARRY 1 &&
   mbfl_array_contains ARRY 2 &&
   ! mbfl_array_contains ARRY 3
@end example
@end defun


@defun mbfl_array_contains_value_var @var{RV} @var{ARRY_VAR} @var{VALUE}
Return successfully if @var{VALUE} is a value in the array; store the associated key in the result
variable @var{RV}.

@example
mbfl_declare_index_array_varref(ARRY, ([0]=a [1]=b [2]=c))
mbfl_declare_varref(KEY)

mbfl_array_contains_value_var mbfl_datavar(KEY) mbfl_datavar(ARRY) a
@result{} 0
"$KEY"  @result{} 0
@end example
@end defun


@defun mbfl_array_contains_all_keys @var{ARRY_VARNAME} @var{KEYS_VARNAME}
Return true if the array @var{ARRY_VARNAME} contains, as keys, all the values in the index array
@var{KEYS_VARNAME}; otherwise return false.

@example
mbfl_declare_assoc_array_varref(ARRY, ([alpha]=1 [beta]=2 [gamma]=3))
mbfl_declare_index_array_varref(KEYS, (alpha gamma))

mbfl_array_contains_all_keys mbfl_datavar(ARRY) mbfl_datavar(KEYS)
@result{} 1

mbfl_declare_index_array_varref(KEYS, (alpha gamma delta))

mbfl_array_contains_all_keys mbfl_datavar(ARRY) mbfl_datavar(KEYS)
@result{} 0
@end example
@end defun


@defun mbfl_array_contains_all_keys_and_only @var{ARRY_VARNAME} @var{KEYS_VARNAME}
Return true if the array @var{ARRY_VARNAME} contains, as keys, all the values in the index array
@var{KEYS_VARNAME} and only those; otherwise return false.

@example
mbfl_declare_assoc_array_varref(ARRY, ([alpha]=1 [beta]=2 [gamma]=3))

mbfl_declare_index_array_varref(KEYS, (alpha beta gamma))
mbfl_array_contains_all_keys_and_only mbfl_datavar(ARRY) mbfl_datavar(KEYS)
@result{} 0

mbfl_declare_index_array_varref(KEYS, (alpha gamma))
mbfl_array_contains_all_keys_and_only mbfl_datavar(ARRY) mbfl_datavar(KEYS)
@result{} 1

mbfl_declare_index_array_varref(KEYS, (alpha beta gamma delta))
mbfl_array_contains_all_keys_and_only mbfl_datavar(ARRY) mbfl_datavar(KEYS)
@result{} 1
@end example
@end defun

@c page
@node arrays debug
@section Facilities to debug code using arrays


@defun mbfl_array_dump @var{ARRY_VAR}
@defunx mbfl_array_dump @var{ARRY_VAR} @var{NAME}
For debugging purposes.  The argument @var{ARRY_VAR} must be the name of an array variable.  For
each key in the array print to @stderr{} a string of the form:

@example
@var{NAME}[@var{KEY}]="@var{VALUE}"
@end example

@noindent
where @var{KEY} is a key in the array and @var{VALUE} is its value.  If the optional argument
@var{NAME} is not present: it defaults to @var{ARRY_VAR}.
@end defun

@c page
@node arrays deprecated
@section Deprecated functions


@defun mbfl_variable_find_in_array @var{ELEMENT}
Search the array @code{mbfl_FIELDS} for a value equal to @var{ELEMENT}.  If it is found: Print the
index and return true; else print nothing and return false.

@code{mbfl_FIELDS} must be filled with elements having subsequent indexes starting at zero.

@quotation
@strong{NOTE} Use of this function is deprecated!  Use @func{mbfl_array_contains_value_var} instead.
@end quotation
@end defun


@defun mbfl_variable_element_is_in_array @var{ELEMENT}
A wrapper for @func{mbfl_variable_find_in_array} that does not print anything.

@quotation
@strong{NOTE} Use of this function is deprecated!  Use @func{mbfl_array_contains_value_var} instead.
@end quotation
@end defun

@c page
@node functions
@chapter Manipulating functions


@defun mbfl_function_copy @var{SRC_FUNCNAME} @var{DST_FUNCNAME}
Copy the function @var{SRC_FUNCNAME} to a new function with name @var{DST_FUNCNAME}; return true if
successful; return false otherwise.
@end defun


@defun mbfl_function_rename @var{SRC_FUNCNAME} @var{DST_FUNCNAME}
Rename the function @var{SRC_FUNCNAME} to @var{DST_FUNCNAME}; return true if successful; return
false otherwise.
@end defun


@defun mbfl_function_exists @var{FUNCNAME}
Return true if a function named @var{FUNCNAME} exists; otherwise return false.
@end defun


@defun mbfl_function_unset @var{FUNCNAME}
Unset the function @var{NICKNAME}.
@end defun

@c page
@node hooks
@chapter Executing commands with event hooks


Sometimes we must execute commands when a certain event happens; @dfn{hooks} provide storage for
such commands.

@menu
* hooks conventions::           Coding conventions and identifier names.
* hooks examples::              Hooks usage examples.
* hooks api::                   Hooks programming interface.
@end menu

@c page
@node hooks conventions
@section Coding conventions and identifier names


In this chapter we use the underscore syntax as defined in @ref{objects conventions underscore, The
underscore syntax}.  In this documentation the parameter @var{HOOK} represents the data variable of
a hook declared with @func{mbfl_hook_declare} and similar.

@c page
@node hooks examples
@section Hooks usage examples


Usage of hooks is as follows:

@example
mbfl_hook_global_declare(MY_HOOK)
declare FLAG1=false FLAG2=false

mbfl_hook_define _(MY_HOOK)

mbfl_hook_add _(MY_HOOK) 'FLAG1=true'
mbfl_hook_add _(MY_HOOK) 'FLAG2=true'

mbfl_hook_run _(MY_HOOK)

$FLAG1 && $FLAG2 ;# true

mbfl_hook_undefine _(MY_HOOK)
@end example

Hooks are usually declared as global variables, but, if needed, we can undefine a hook using a
location:

@example
mbfl_hook_declare(MY_HOOK)
declare FLAG1=false FLAG2=false

mbfl_location_enter
@{
    mbfl_hook_define _(MY_HOOK)
    mbfl_location_handler "mbfl_hook_undefine _(MY_HOOK)"

    mbfl_hook_add _(MY_HOOK) 'FLAG1=true'
    mbfl_hook_add _(MY_HOOK) 'FLAG2=true'
    mbfl_hook_run _(MY_HOOK)
@}
mbfl_location_leave

$FLAG1 && $FLAG2 ;# true
@end example

@c page
@node hooks api
@section Hooks programming interface


@deffn {Preprocessor Macro} mbfl_hook_declare (@var{HOOK_NAME})
Declare a hook's variables using @code{declare}, making all of them local or global depending on the
context of the macro use.  This macro is a wrapper for @func{mbfl_declare_varref}.
@end deffn


@deffn {Preprocessor Macro} mbfl_hook_global_declare (@var{HOOK_NAME})
Declare a global hook variable using @code{declare -g}, but define @var{HOOK_NAME} using
@code{declare} making it local or global depending on the context of the macro use.  This macro is a
wrapper for @func{mbfl_declare_varref}.
@end deffn


@defun mbfl_hook_define @var{HOOK}
Initialise a new already declared @var{HOOK}.  If @var{HOOK} has been previously used: this function
removes all the old registered commands.
@end defun


@defun mbfl_hook_undefine @var{HOOK}
Finalise the existent @var{HOOK}; all the registered commands are removed.  To use again this
variable we have to apply @func{mbfl_hook_define} to it.
@end defun


@defun mbfl_hook_add @var{HOOK} @var{HOOK_COMMAND}
@defunx mbfl_hook_add @var{HOOK} @var{HOOK_COMMAND} @var{IDVAR}
Add to @var{HOOK} the command @var{HOOK_COMMAND}.  When we run the hook: @var{HOOK_COMMAND} is
executed with:

@example
eval @var{HOOK_COMMAND}
@end example

If the optional parameter @var{IDVAR} is present: it must be the name of a variable in the scope of
the caller, which will be set to a unique identifier associated to the added command; later we can
use such identifier to remove the command with @func{mbfl_hook_remove}.
@end defun


@defun mbfl_hook_remove @var{HOOK} @var{COMMAND_ID}
Remove from the @var{HOOK} the command associated to @var{COMMAND_ID}, which must have been obtained
with a previous call to @func{mbfl_hook_remove}.
@end defun


@defun mbfl_hook_has_commands @var{HOOK}
Return true if @var{HOOK} has commands registered for execution; otherwise return false.
@end defun


@defun mbfl_hook_remove_commands @var{HOOK}
Remove all the registered commands in @var{HOOK}.
@end defun


@defun mbfl_hook_run @var{HOOK}
Run all the commands in @var{HOOK}, from the first added to the last added.
@end defun


@defun mbfl_hook_reverse_run @var{HOOK}
Run all the commands in @var{HOOK} in reverse order, from the last added to the first added.
@end defun

@c page
@node objects
@chapter Object-oriented programming


@mbfl{} implements data structures on top of Bash built--in values, by default index arrays; the
facilities are: single inheritance; instances with the same scope as Bash variables; automatically
generated field accessor and mutator functions.

In the implementation of data structures: many ideas were stolen from other languages, most notably
Lisp implementations.

@menu
* objects conventions::         Naming and coding conventions.
* objects default::             Default classes and objects.
* objects special::             Special predefined classes and objects.
@end menu

@c page
@node objects conventions
@section Naming and coding conventions


@cindex Object definition
@cindex Class definition
@cindex Metaclass definition
@cindex Definition of object
@cindex Definition of Class
@cindex Definition of metaclass


We establish the following definitions:

@table @dfn
@item object
An ensemble of Bash built--in values that represents an instance of a type.

@item class
An object that represents the definition of a type.

@item metaclass
A class that represents the definition of another class.

@item field accessor
A function used to retrieve the value of an object's field.

@item field mutator
A function used to store a new value in an object's field.
@end table

@menu
* objects conventions underscore::      The underscore syntax.
* objects conventions parameters::      Parameters naming conventions.
@end menu

@c page
@node objects conventions underscore
@subsection The underscore syntax


Unless otherwise stated, in every code example in this chapter, we assume the following macro has
been defined in the preamble:

@example
m4_define([[[_]]],[[[mbfl_datavar([[[$1]]])]]])
@end example

@noindent
which means the following syntax expansion takes place:

@example
_(SELF) @expansion{} mbfl_datavar(SELF)
@end example

@noindent
so to define a new class and a new instance we can use the syntax:

@example
mbfl_default_class_declare(COLOUR)
mbfl_default_object_declare(DARK_SLATE_BLUE)

mbfl_default_class_define _(COLOUR) _(mbfl_default_object) 'colour' red green blue
colour_define _(DARK_SLATE_BLUE) 72 61 139

mbfl_declare_varref(RED)
colour_red_var _(RED) _(DARK_SLATE_BLUE)
"$RED"  @result{} 72
@end example

Notice that @gnu{} Bash already uses the identifier @samp{_} to implement a built--in shell
variable, @bashref{Bash Variables, Bash Variables}.  To avoid unwanted expansion of the underscore
identifier as a macro, we must quote the uses of @samp{_} that are meant to reference the Bash
variable:

@example
[[[$_]]]
@end example

@c page
@node objects conventions parameters
@subsection Parameters naming conventions


@cindex @var{DEFOBJ} function parameter
@cindex @var{DEFCLS} function parameter
@cindex @var{DEFMETACLS} function parameter
@cindex Function parameter @var{DEFOBJ}
@cindex function parameter @var{DEFCLS}
@cindex function parameter @var{DEFMETACLS}
@cindex Parameter @var{DEFOBJ}
@cindex Parameter @var{DEFCLS}
@cindex Parameter @var{DEFMETACLS}


In this documentation we use @var{DEFOBJ} as function parameter name to indicate that the parameter
given to a function call must be a string representing the name of a data variable: such variable
must represent a default object.  If the function is given a parameter of another type: its
behaviour is undefined.

In this documentation we use @var{DEFCLS} as function parameter name to indicate that the parameter
given to a function call must be a string representing the name of a data variable: such variable
must be a default class.  If the function is given a parameter of another type: its behaviour is
undefined.

In this documentation we use @var{DEFMETACLS} as function parameter name to indicate that the
parameter given to a function call must be a string representing the name of a data variable: such
variable must be a default metaclass.  If the function is given a parameter of another type: its
behaviour is undefined.

If functions are described as follows:

@example
my_func @var{DEFOBJ}
my_other_func @var{DEFCLS}
@end example

@noindent
such functions must be used as follows:

@example
mbfl_default_class_declare(COLOUR)
mbfl_default_object_declare(DARK_SLATE_BLUE)

mbfl_default_class_define _(COLOUR) _(mbfl_default_object) 'colour' red green blue
colour_define _(DARK_SLATE_BLUE) 72 61 139

my_func _(DARK_SLATE_BLUE)
my_other_func _(COLOUR)
@end example

@c page
@node objects default
@section Default classes


@mbfl{} implements object--oriented programming facilities on top of Bash primitive values.
Compared to other object systems it is very limited; one of the core limitations is that Bash does
not provide disjoint types to implement data structures: it only implements variables and arrays.

@menu
* objects default overview::            Overview of default objects and classes.
* objects default instance::            Instances of the @emph{default object} class.
* objects default object::              The @emph{default object} class.
* objects default class::               The @emph{default class} metaclass.
* objects default abstract::            The @emph{default abstract class} metaclass.
@end menu

@c page
@node objects default overview
@subsection Overview of default objects and classes


The object--oriented programming facilities implemented by @mbfl{} have the following core concepts:

@itemize
@item
The object system implements single--inheritance.

@item
The object @class{mbfl_default_object} is a class; it is the default top superclass of classes in
@mbfl{}.

@item
We define new classes by subclassing from @class{mbfl_default_object}.

@item
We define new objects by instantiating a subclass of @class{mbfl_default_object}.

@item
The class @class{mbfl_default_object} has itself a class, called metaclass, it is
@class{mbfl_default_abstract_class}.  A class has @class{mbfl_default_object} as superclass if and
only if: its metaclass is @class{mbfl_default_class} or its metaclass is a subclass of
@class{mbfl_default_class}.

@item
Every instance of class @class{mbfl_default_object} has the layout specified by
@class{mbfl_default_object}.

@item
The class @class{mbfl_default_object} and its subclasses have the layout specified by
@class{mbfl_default_class}.

@item
Every instance of @class{mbfl_default_object} is a Bash index array with the following layout:

@example
instance[0] @result{} _(SUBCLASS_OF_MBFL_DEFAULT_OBJECT)
instance[1] @result{} 1st field value
instance[2] @result{} 2nd field value
...
@end example

@noindent
an array element with key @samp{0} is always present and its value is a string; the string
represents the name of an array; the array is the instance's class definition.

@item
We handle instances through @dfn{references}: a reference is a string representing a variable name;
the variable itself is an index array.  We manage references using the @code{NAMEREF} mechanism, a
reference is the name of a data variable; @ref{preprocessor nameref} for details.

@item
Default objects being arrays: they have a scope.  When a local scope is left, all the resources
associated with the instance, as defined by its class, are released.  If an object's field
references some asynchronous resources: such resources must be released with some other mechanism.
@end itemize

@menu
* objects default overview objects::    Overview of default objects.
* objects default overview classes::    Overview of default classes.
@end menu

@c page
@node objects default overview objects
@subsubsection Overview of default objects


If we subclass @class{mbfl_default_object} to define a new class with name @class{colour}:

@example
mbfl_default_class_declare(COLOUR)

mbfl_default_class_define _(COLOUR) _(mbfl_default_object) 'colour' red green blue
@end example

@noindent
and then we instantiate @class{colour}:

@example
mbfl_default_object_declare(DARK_SLATE_BLUE)

colour_define _(DARK_SLATE_BLUE) 72 61 139
@end example

@noindent
the layout of the instance array is:

@example
instance[0] @result{} _(COLOUR)
instance[1] @result{} 72
instance[2] @result{} 61
instance[3] @result{} 139
@end example

We can subclass @class{colour} to add a transparency field:

@example
mbfl_default_class_declare(TRANSPARENT_COLOUR)

mbfl_default_class_define _(TRANSPARENT_COLOUR) _(COLOUR) 'transparent_colour' transparency
@end example

@noindent
then we can instantiate @class{transparent_colour}:

@example
mbfl_default_object_declare(TRANSPARENT_DARK_SLATE_BLUE)

transparent_colour_define _(TRANSPARENT_DARK_SLATE_BLUE) 72 61 139 50
@end example

@noindent
the layout of the instance array is:

@example
instance[0] @result{} _(TRANSPARENT_COLOUR)
instance[1] @result{} 72
instance[2] @result{} 61
instance[3] @result{} 139
instance[4] @result{} 50
@end example

The diagram of instances and classes is as follows:

@example
 -class---------------
| mbfl_default_object |
 ---------------------
          ^
          | superclass
          |
       -class-       class         -instance--------
      | colour |<-----------------| DARK_SLATE_BLUE |
       -------                     -----------------
          ^
          | superclass
          |
 -class-------------    class   -instance--------------------
| transparent_colour |<--------| TRANSPARENT_DARK_SLATE_BLUE |
 -------------------            -----------------------------
@end example

The class constructor @func{mbfl_default_class_define} defines functions that we can use to operate
on class instances; with the class definition:

@example
mbfl_default_class_declare(COMPLEX)

mbfl_default_class_define _(COMPLEX) _(mbfl_default_object) 'complex' real imag
@end example

@noindent
the class identifier @code{complex} is used to generate an instance constructor:

@example
mbfl_default_object_declare(Z)

complex_define _(Z) 2 3
@end example

@noindent
and field accessors and mutators:

@example
declare REAL IMAG

complex_real_set _(Z) 8
complex_imag_set _(Z) 9

complex_real_var REAL _(Z)
complex_imag_var IMAG _(Z)

$IMAG   @result{} 8
$REAL   @result{} 9
@end example

@noindent
and a class predicate:

@example
complex_p _(Z)          @result{} true
complex_p _(COLOUR)     @result{} false
@end example

Accessor and mutator functions are defined for every field in a class definition and every field of
its superclasses.  So if we define @class{colour} and its subclass @class{transparent_colour}, we have
all the accessors and mutators for instances of @class{transparent_colour}:

@example
mbfl_default_class_declare(COLOUR)
mbfl_default_class_declare(TRANSPARENT_COLOUR)
mbfl_default_object_declare(FOREGROUND)

mbfl_default_class_define _(COLOUR) _(mbfl_default_object) 'colour' red green blue
mbfl_default_class_define _(TRANSPARENT_COLOUR) _(COLOUR) 'transparent_colour' transparency

transparent_colour _(FOREGROUND) 11 22 33 50

declare RED GREEN BLUE TRANS

transparent_colour_red_var          RED   _(FOREGROUND)
transparent_colour_green_var        GREEN _(FOREGROUND)
transparent_colour_blue_var         BLUE  _(FOREGROUND)
transparent_colour_transparency_var TRANS _(FOREGROUND)

$RED    @result{} 11
$GREEN  @result{} 22
$BLUE   @result{} 33
$TRANS  @result{} 50
@end example

Notes:

@itemize
@item
It would be possible to use associative arrays as implementation of objects; we could use a syntax
like:

@example
_(DARK_SLATE_BLUE, red) @result{} 72
@end example

@noindent
to access the fields, which is directly usable in Bash expressions; the disadvantage is that such
solution exposes a value as object's field, which is an implementation detail.

Accessor functions allow us to change the internal representation of an object without changing its
public @api{}.  So while accessing a @class{complex} object we can do:

@example
declare REAL IMAG RHO THETA

complex_real_var  REAL  _(Z)
complex_imag_var  IMAG  _(Z)
complex_rho_var   RHO   _(Z)
complex_theta_var THETA _(Z)
@end example

@noindent
and nobody knows which values are the fields and which values are computed on demand.

@item
Default objects have no custom constructor functions; the default constructor just accepts the
field's values as parameters; if we desire a custom constructor we must define it.  For example,
@mbfl{} itself often wraps the @samp{_define} constructor with a @samp{_make} constructor, which can
perform validation and custom computation of field values.
@end itemize

@c page
@node objects default overview classes
@subsubsection Overview of default classes


The diagram of the core classes is:

@example
     -class---------------
    | mbfl_default_object |-------------------------------
     ---------------------                                |
              ^                                           |
              | superclass                                |
              |                                           |
     -metaclass----------                                 |
    | mbfl_default_class |<--+--------------              |
     --------------------    |              |             |
       ^              |      | metaclass    | metaclass   | metaclass
       | superclass   |      |              |             |
       |               ------               |             |
       |                                    |             |
 -metaclass-------------------              |             |
| mbfl_default_abstract_class | ------------              |
 -----------------------------                            |
               ^                                          |
               |                                          |
                ------------------------------------------
@end example

The object @class{mbfl_default_class} is the default metaclass of classes in @mbfl{}; we define new
classes by instantiating @class{mbfl_default_class} or one of its subclasses; an instance of
@class{mbfl_default_class} can only be a subclass of @class{mbfl_default_object}.

The class @class{mbfl_default_class} also has a metaclass: it is @class{mbfl_default_class}
itself.  The superclass of @class{mbfl_default_class} is @class{mbfl_default_object}.

An instance of @class{mbfl_default_class} is a Bash index array with the following layout:

@example
datavar[0]      @result{} _(METACLASS)
datavar[1]      @result{} _(PARENT_CLASS)
datavar[2]      @result{} class name as string
datavar[3]      @result{} N = fields number
datavar[4]      @result{} field 0 name as string
datavar[5]      @result{} field 1 name as string
...
datavar[4+N-1]  @result{} field N-1 name as string
@end example

@noindent
being a @class{mbfl_default_object} an array element with key @samp{0} is always present and its
value is the instance's class.  We instantiate @class{mbfl_default_class} by using its instance
constructor, which is the function @func{mbfl_default_class_define}.

If we define the class @class{colour} as follows:

@example
mbfl_default_class_declare(COLOUR)

mbfl_default_class_define _(COLOUR) _(mbfl_default_object) 'colour' red green blue
@end example

@noindent
the layout of the @class{colour} array is:

@example
datavar[0]      @result{} _(mbfl_default_class)
datavar[1]      @result{} _(mbfl_default_object)
datavar[2]      @result{} 'colour'
datavar[3]      @result{} 3
datavar[4]      @result{} 'red'
datavar[5]      @result{} 'green'
datavar[6]      @result{} 'blue'
@end example

@c page
@node objects default instance
@subsection Instances of the @emph{default object} class.


Default objects are instances of a subclass of @class{mbfl_default_object}; @ref{objects default
overview objects} for details and examples.

@menu
* objects default instance scope::      Scope management.
* objects default instance predicates:: Predicates on instances of the @emph{default object} class.
@end menu

@c page
@node objects default instance scope
@subsubsection Scope management


To keep a code base in good order, new class declarations should be at the top--level scope:

@example
mbfl_default_class_declare(MY_PERSON)

mbfl_default_class_define _(MY_PERSON) _(mbfl_default_object) 'my_person' name surname
@end example

@noindent
no matter where we declare them: new functions will be defined as constructor, predicate, field
accessors and mutators, and those are at the top--level.  We can declare a class at the top--level
and define it in a function; @mbfl{} itself puts some class definitions and instances definitions in
an initialisation function:

@example
mbfl_default_class_declare(MY_PERSON)

function my_initialise_this_module () @{
  mbfl_default_class_define _(MY_PERSON) _(mbfl_default_object) 'my_person' name surname
@}
@end example

To be used without conflicts: both global class's proxy variables and class identifiers must be
unique in the whole script.

Non--class instances can be declared and defined both at the top--level scope or in a function
scope.  Usually we declare and define an instance in the scope of a function:

@example
function do_something () @{
  mbfl_default_object_declare(MAINTAINER)

  my_person_define _(MAINTAINER) _(MY_PERSON) 'Marco' 'Maggi'
  # do something with _(MAINTAINER)
@}
@end example

@noindent
we can declare and define an instance at the top--level scope:

@example
mbfl_default_object_declare(MY_MAINTAINER)

my_person_define _(MY_MAINTAINER) _(MY_PERSON) 'Marco' 'Maggi'

function do_something () @{
  # do something with _(MY_MAINTAINER)
@}
@end example

@noindent
and we can declare at the top--level and define all from within a function:

@example
function do_something () @}
  mbfl_declare_varref(MAINTAINER)

  build_it_var _(MAINTAINER)
  # do something with _(MAINTAINER)
@}
function built_it_var () @{
  mbfl_mandatory_nameref_parameter(RV, 1, result variable)
  mbfl_default_object_declare_global(MAINTAINER)

  my_person_define _(MAINTAINER) _(MY_PERSON) 'Marco' 'Maggi'
  # do something with _(MAINTAINER)
  RV=_(MAINTAINER)
@}
@end example

@c page
@node objects default instance predicates
@subsubsection Predicates on instances of the @emph{default object} class


@defun mbfl_default_object_maybe_p @var{STR}
Return true if the given parameter is the name of a data variable and the data variable is an object
whose class is a subclass of @class{mbfl_default_object}; otherwise return false.  There is no way
to be sure that a given string @var{STR} is actually a proper reference to a default object; this
function tries its best.

@example
mbfl_default_class_declare(COLOUR)
mbfl_default_object_declare(DARK_SLATE_BLUE)

mbfl_default_class_define _(COLOUR) _(mbfl_default_object) 'colour' r g b
colour_define _(DARK_SLATE_BLUE) 72 61 139

mbfl_default_object_maybe_p _(COLOUR)           @result{} true
mbfl_default_object_maybe_p _(DARK_SLATE_BLUE)  @result{} true
mbfl_default_object_maybe_p 'ciao'              @result{} false
@end example
@end defun


@defun mbfl_the_default_object_p @var{DEFOBJ}
Return true if the parameter is the datavar of @class{mbfl_default_object}; otherwise return false.

@example
mbfl_the_default_object_p _(mbfl_default_object)
@result{} true
@end example
@end defun


@defun mbfl_the_default_class_p @var{DEFOBJ}
Return true if the parameter is the datavar of @class{mbfl_default_class}; otherwise return false.

@example
mbfl_the_default_class_p _(mbfl_default_class)
@result{} true
@end example
@end defun


@defun mbfl_the_default_abstract_class_p @var{DEFOBJ}
Return true if the parameter is the datavar of @class{mbfl_default_abstract_class}; otherwise return
false.

@example
mbfl_the_default_abstract_class_p _(mbfl_default_abstract_class)
@result{} true
@end example
@end defun

@c page
@node objects default object
@subsection The @emph{default object} class


We define a new default class by subclassing @class{mbfl_default_object} and instantiating
@class{mbfl_default_class}; @ref{objects default overview objects} for details and examples.


@deftp {Class} mbfl_default_object
@deftpx {Proxy Variable} mbfl_default_object
@deftpx {Metaclass} mbfl_default_abstract_class
Default top superclass of classes; it has no superclass.  Its metaclass makes it an abstract class:
it cannot be instantiated, it has no constructor.
@end deftp


@menu
* objects default object define::       Declarations and definitions for instances of @class{mbfl_default_object}.
* objects default object predicates::   Predicates on instances of @class{mbfl_default_object}.
* objects default object operations::   Operations on instances of @class{mbfl_default_object}.
@end menu

@c page
@node objects default object define
@subsubsection Declarations and definitions for instances of @class{mbfl_default_object}


@deffn {Preprocessor Macro} mbfl_default_object_declare (@var{DEFOBJ_PROXY_VARNAME})
@deffnx {Preprocessor Macro} mbfl_default_object_declare_global (@var{DEFOBJ_PROXY_VARNAME})
Define the variables needed to handle a new instance of a subclass of @class{mbfl_default_object}.
The data variable is declared using, respectively: @code{declare} or @code{declare -g}.

We can think of these macros as working like @func{mbfl_declare_varref}: they declare variables, one
of which is a data variable whose name we can pass around as parameter to functions.
@end deffn

@c page
@node objects default object predicates
@subsubsection Predicates on instances of @class{mbfl_default_object}


@defun mbfl_default_object_is_a @var{DEFOBJ} @var{DEFCLS}
Return true if the class of @var{DEFOBJ} is @var{DEFCLS} or a subclass of @var{DEFCLS}.

Given the class diagram, in which not all the connections are depicted:

@example
            -------------------------------------------------------------------
           |                           metaclass                               |
           |                                                                   |
 -class---------------                                                         |
| mbfl_default_object |<-----------+---------------------------                |
 ---------------------             |                           |               |
           ^                       |                           |               |
           | superclass            | superclass                | superclass    |
           |                       |                           |               |
 -class--------------------     -class--   metaclass   -metaclass----------    |
| mbfl_predefined_constant |   | colour |------------>| mbfl_default_class |   |
 --------------------------     --------               --------------------    |
                                   ^                       ^                   |
                                   | class                 | superclass        |
                                   |                       |                   |
     -instance--------             |           -metaclass-------------------   |
    | DARK_SLATE_GRAY |------------           | mbfl_default_abstract_class |<-
     -----------------                         -----------------------------
@end example

@noindent
we can understand the following code:

@example
mbfl_default_class_declare(COLOUR)
mbfl_default_object_declare(DARK_SLATE_BLUE)

mbfl_default_class_define _(COLOUR) _(mbfl_default_object) 'colour' r g b
colour_define _(DARK_SLATE_BLUE) 72 61 139

mbfl_default_object_is_a _(DARK_SLATE_BLUE) _(mbfl_default_object)              @result{} true
mbfl_default_object_is_a _(DARK_SLATE_BLUE) _(COLOUR)                           @result{} true
mbfl_default_object_is_a _(DARK_SLATE_BLUE) _(mbfl_predefined_constant)         @result{} false
mbfl_default_object_is_a _(DARK_SLATE_BLUE) _(mbfl_default_class)               @result{} false
mbfl_default_object_is_a _(DARK_SLATE_BLUE) _(mbfl_default_abstract_class)      @result{} false

mbfl_default_object_is_a _(COLOUR) _(mbfl_default_object)                       @result{} true
mbfl_default_object_is_a _(COLOUR) _(mbfl_default_class)                        @result{} true
mbfl_default_object_is_a _(COLOUR) _(mbfl_default_abstract_class)               @result{} false
@end example

There are also the following cases:

@example
mbfl_default_object_is_a _(mbfl_default_object) _(mbfl_default_object)          @result{} true
mbfl_default_object_is_a _(mbfl_default_object) _(mbfl_default_class)           @result{} true
mbfl_default_object_is_a _(mbfl_default_object) _(mbfl_default_abstract_class)  @result{} true

mbfl_default_object_is_a _(mbfl_default_class)  _(mbfl_default_object)          @result{} true
mbfl_default_object_is_a _(mbfl_default_class)  _(mbfl_default_class)           @result{} true
mbfl_default_object_is_a _(mbfl_default_class)  _(mbfl_default_abstract_class)  @result{} false

mbfl_default_object_is_a _(mbfl_default_abstract_class)  _(mbfl_default_object)          @result{} true
mbfl_default_object_is_a _(mbfl_default_abstract_class)  _(mbfl_default_class)           @result{} true
mbfl_default_object_is_a _(mbfl_default_abstract_class)  _(mbfl_default_abstract_class)  @result{} false
@end example
@end defun

@c page
@node objects default object operations
@subsubsection Operations on instances of @class{mbfl_default_object}


@defun mbfl_default_object_class_var @var{DEFCLS_RV} @var{DEFOBJ}
Store in the result variable @var{DEFCLS_RV} the data variable of the class of @var{DEFOBJ}.

@example
mbfl_default_class_declare(COLOUR)
mbfl_default_object_declare(DARK_SLATE_BLUE)

mbfl_default_class_define _(COLOUR) _(mbfl_default_object) 'colour' r g b
colour_define _(DARK_SLATE_BLUE) 72 61 139

declare METACLASS CLASS

mbfl_default_object_class_var METACLASS _(COLOUR)
mbfl_default_object_class_var CLASS     _(DARK_SLATE_BLUE)

$METACLASS      @result{} _(mbfl_default_class)
$CLASS          @result{} _(COLOUR)
@end example
@end defun


@defun mbfl_default_object_class_name_var @var{NAME_RV} @var{DEFOBJ}
Store in the result variable @var{NAME_RV} a string representing @var{DEFOBJ}'s class name.

@example
mbfl_default_class_declare(COLOUR)
mbfl_default_object_declare(DARK_SLATE_BLUE)

mbfl_default_class_define _(COLOUR) _(mbfl_default_object) 'colour' r g b
colour_define _(DARK_SLATE_BLUE) 72 61 139

mbfl_declare_varref(NAME)

mbfl_default_object_class_name_var _(NAME) _(DARK_SLATE_BLUE)

"$NAME"         @result{} colour
@end example
@end defun

@c page
@node objects default class
@subsection The @emph{default class} metaclass


We define a new default class by instantiating @class{mbfl_default_class}; this implies that the new
class is a subclass of @class{mbfl_default_object}.  Instances of @class{mbfl_default_class} (not of
its subclasses) are built using the constructor @func{mbfl_default_class_define}; @ref{objects
default overview classes} for details and examples.

We define a new default metaclass by subclassing and instantiating @class{mbfl_default_class}.  We
also must define an instance constructor function that actually builds new metaclasses in place of
@func{mbfl_default_class_define}.


@deftp {Metaclass} mbfl_default_class
@deftpx {Proxy Variable} mbfl_default_class
@deftpx {Superclass} mbfl_default_object
@deftpx {Metaclass} mbfl_default_class
The default metaclass and the superclass of all the default metaclasses.
@end deftp


@menu
* objects default class define::        Declarations and definitions for instances of @class{mbfl_default_class}.
* objects default class predicates::    Predicates on instances of @class{mbfl_default_class}.
* objects default class accessors::     Accessors on instances of @class{mbfl_default_class}.
* objects default class operations::    Operations on instances of @class{mbfl_default_class}.
@end menu

@c page
@node objects default class define
@subsubsection Declarations and definitions for instances of @class{mbfl_default_class}


@deffn {Preprocessor Macro} mbfl_default_class_declare (@var{DEFCLS_PROXY_VARNAME})
@deffnx {Preprocessor Macro} mbfl_default_class_declare_global (@var{DEFCLS_PROXY_VARNAME})
Define the variables needed to handle a new class, subclass of @class{mbfl_default_object}.  The
data variable is declared using, respectively: @code{declare} or @code{declare -g}.

We can think of these macros as working like @func{mbfl_declare_varref}: they declare variables, one
of which is a data variable whose name we can pass around as parameter to functions.
@end deffn


@defun mbfl_default_class_define @var{DEFCLS} @var{DEFSUPERCLS} @var{CLASS_NAME} @var{FIELD_NAME} @dots{}
Define a new default class @var{DEFCLS} whose superclass is @var{DEFSUPERCLS}.  By using this
function we decide that the metaclass of the new class is @class{mbfl_default_class}.

If we want to subclass @class{mbfl_default_object}, then the parameter @var{DEFSUPERCLS} must be the
datavar of @class{mbfl_default_object}; otherwise it must be the datavar of a subclass of
@class{mbfl_default_object}.

The name of the new class is the identifier @var{CLASS_NAME}, which must be a string satisfying
@func{mbfl_string_is_identifier}.

The following functions are defined:

@table @code
@item @var{CLASS_NAME}_define @var{DEFOBJ} @var{FIELD_VALUE} @dots{}
Initialise @var{DEFOBJ} as instance of @var{DEFCLS} filling its fields with the given
@var{FIELD_VALUE} parameters.

@item @var{CLASS_NAME}_p @var{DEFOBJ}
Return true if @var{DEFOBJ} is an instance of @var{DEFCLS}; otherwise return false.

@item @var{CLASS_NAME}_@var{FIELD_NAME}_var @var{RV} @var{DEFOBJ}
Field accessor: store in the result variable @var{RV} the value of the field @var{FIELD_NAME}.

@item @var{CLASS_NAME}_@var{FIELD_NAME}_set @var{DEFOBJ} @var{NEW_FIELD_VALUE}
Field mutator: store in the field the new value @var{NEW_FIELD_VALUE}.
@end table
@end defun

@c page
@node objects default class predicates
@subsubsection Predicates on instances of @class{mbfl_default_class}


@defun mbfl_default_class_p @var{DEFOBJ}
Return true if @var{DEFOBJ} is an instance of @class{mbfl_default_class} or of a subclass of
@class{mbfl_default_class}; otherwise return false.

@example
mbfl_default_class_p _(mbfl_default_class)  @result{} true
mbfl_default_class_p _(mbfl_default_object) @result{} true

mbfl_default_class_declare(COLOUR)
mbfl_default_class_define _(COLOUR) _(mbfl_default_object) 'colour' r g b
mbfl_default_class_p _(COLOUR) @result{} true
@end example
@end defun


@defun mbfl_default_metaclass_p @var{DEFOBJ}
Return true if @var{DEFOBJ} is an object that meets the following criteria:

@enumerate
@item
the class of @var{DEFOBJ} is @class{mbfl_default_class} or a subclass of
@class{mbfl_default_class};

@item
@var{DEFOBJ} itself must be a subclass of @class{mbfl_default_class}.
@end enumerate

@example
mbfl_default_metaclass_p _(mbfl_default_object) @result{} false
mbfl_default_metaclass_p _(mbfl_default_class)  @result{} true
@end example
@end defun

@c page
@node objects default class accessors
@subsubsection Accessors on instances of @class{mbfl_default_class}


@defun mbfl_default_class_parent_var @var{PARENT_RV} @var{DEFCLS}
Store in the result variable @var{PARENT_RV} the data variable of the parent of @var{DEFCLS}.

@example
mbfl_default_class_declare(COLOUR)
mbfl_declare_varref(PARENT)

mbfl_default_class_define _(COLOUR) _(mbfl_default_object) 'colour' red green blue
mbfl_default_class_parent_var _(PARENT) _(COLOUR)
$PARENT @result{} _(mbfl_default_object)
@end example
@end defun


@defun mbfl_default_class_name_var @var{NAME_RV} @var{DEFCLS}
Store in the result variable @var{NAME_RV} the string representing the name of @var{DEFCLS}.

@example
mbfl_default_class_declare(COLOUR)
mbfl_declare_varref(NAME)

mbfl_default_class_define _(COLOUR) _(mbfl_default_object) 'colour' red green blue
mbfl_default_class_name_var _(NAME) _(COLOUR)
$NAME @result{} colour
@end example
@end defun


@defun mbfl_default_class_fields_number_var @var{FIELDS_NUMBER_RV} @var{DEFCLS}
Store in the result variable @var{FIELDS_NUMBER_RV} the number of fields in instances of
@var{DEFCLS}.

@example
mbfl_default_class_declare(COLOUR)
mbfl_declare_varref(FIELDS_NUMBER)

mbfl_default_class_define _(COLOUR) _(mbfl_default_object) 'colour' red green blue
mbfl_default_class_fields_number_var _(FIELDS_NUMBER) _(COLOUR)
$FIELDS_NUMBER @result{} 3
@end example
@end defun

@c page
@node objects default class operations
@subsubsection Operations on instances of @class{mbfl_default_class}


@defun mbfl_default_classes_are_superclass_and_subclass @var{MAYBE_PARENT_STDCLS} @var{MAYBE_CHILD_STDCLS}
Return true if @var{MAYBE_PARENT_STDCLS} is a class and @var{MAYBE_CHILD_STDCLS} is a subclass of
@var{MAYBE_PARENT_STDCLS}; otherwise return false.

@example
mbfl_default_classes_are_superclass_and_subclass _(mbfl_default_object) _(mbfl_default_object)
@result{} false

mbfl_default_classes_are_superclass_and_subclass _(mbfl_default_object) _(mbfl_default_class)
@result{} true

mbfl_default_classes_are_superclass_and_subclass _(mbfl_default_object) _(mbfl_predefined_constant)
@result{} true

mbfl_default_classes_are_superclass_and_subclass _(mbfl_default_class) _(mbfl_predefined_constant)
@result{} false
@end example
@end defun


@defun mbfl_default_classes_are_same_or_superclass_and_subclass @var{MAYBE_PARENT_STDCLS} @var{MAYBE_CHILD_STDCLS}
Return true if either:

@itemize
@item
@var{MAYBE_PARENT_STDCLS} and @var{MAYBE_CHILD_STDCLS} are equal;

@item
@var{MAYBE_PARENT_STDCLS} is a class and @var{MAYBE_CHILD_STDCLS} is a subclass of
@var{MAYBE_PARENT_STDCLS}; otherwise return false.
@end itemize
@end defun

@c page
@node objects default abstract
@subsection The @emph{default abstract class} metaclass


We define a new default abstract class by instantiating @class{mbfl_default_abstract_class}; an
abstract class cannot be instantiated: it has no constructor.  @class{mbfl_default_object} is an
abstract class.  Instances of @class{mbfl_default_abstract_class} (not of its subclasses) are built
using the constructor @func{mbfl_default_abstract_class_define}.


@deftp {Metaclass} mbfl_default_abstract_class
@deftpx {Superclass} mbfl_default_class
@deftpx {Metaclass} mbfl_default_class
This metaclass is like @class{mbfl_default_class} but its instances cannot be instantiated, only
subclassed.  This means the default constructor @samp{_define} is not defined.
@end deftp


@menu
* objects default abstract define::        Declarations and definitions for instances of @class{mbfl_default_abstract_class}.
* objects default abstract predicates::    Predicates on instances of @class{mbfl_default_abstract_class}.
* objects default abstract accessors::     Accessors on instances of @class{mbfl_default_abstract_class}.
@end menu

@c page
@node objects default abstract define
@subsubsection Declarations and definitions for instances of @class{mbfl_default_abstract_class}


We declare the variables required by the definition of an instance of
@class{mbfl_default_abstract_class} using @func{mbfl_default_class_declare} or
@func{mbfl_default_class_declare_global}; @ref{objects default class define} for details.


@defun mbfl_default_abstract_class_define @var{DEFCLS} @var{DEFSUPERCLS} @var{CLASS_NAME} @var{FIELD_NAME} @dots{}
Define a new default abstract class @var{DEFCLS} whose superclass is @var{DEFSUPERCLS}.  By using
this function we decide that the metaclass of the new class is @class{mbfl_default_abstract_class}.

The parameter @var{DEFSUPERCLS} must reference @class{mbfl_default_object} or one of its subclasses.

The only difference between this constructor and @func{mbfl_default_class_define} is that this
construtor does not define a constructor for instances of @var{CLASS_NAME}.
@end defun

@c page
@node objects default abstract predicates
@subsubsection Predicates on instances of @class{mbfl_default_abstract_class}


@defun mbfl_default_abstract_class_p @var{DEFOBJ}
Return true if @var{DEFOBJ} is an instance of @class{mbfl_default_abstract_class} or of a subclass
of @class{mbfl_default_abstract_class}; otherwise return false.

@example
mbfl_default_abstract_class_p _(mbfl_default_class)  @result{} false
mbfl_default_abstract_class_p _(mbfl_default_object) @result{} true
@end example
@end defun

@c page
@node objects default abstract accessors
@subsubsection Accessors on instances of @class{mbfl_default_abstract_class}


The following accessors work like the ones for instances of @class{mbfl_default_class}; @ref{objects
default class accessors} for details.


@defun mbfl_default_abstract_class_parent_var @var{PARENT_RV} @var{DEFCLS}
Store in the result variable @var{PARENT_RV} the data variable of the parent of @var{DEFCLS}.
@end defun


@defun mbfl_default_abstract_class_name_var @var{NAME_RV} @var{DEFCLS}
Store in the result variable @var{NAME_RV} the string representing the name of @var{DEFCLS}.
@end defun


@defun mbfl_default_abstract_class_fields_number_var @var{FIELDS_NUMBER_RV} @var{DEFCLS}
Store in the result variable @var{FIELDS_NUMBER_RV} the number of fields in instances of
@var{DEFCLS}.
@end defun

@c page
@node objects special
@section Special predefined classes and objects


@menu
* objects special constants::   Predefined constants.
@end menu

@c page
@node objects special constants
@subsection Predefined constants


It is sometimes useful to define special constant values to represent situations in the code;
@mbfl{} defines the class @class{mbfl_predefined_constant} for this purpose; we can use it to define
a void value as follows:

@example
mbfl_default_object_declare(void)

mbfl_predefined_constant_define _(void)

function is_the_void () @{
    mbfl_mandatory_parameter(DATAVAR, 1, a data variable)
    mbfl_datavar_eq("$DATAVAR",_(void))
@}
@end example

@noindent
code bases are always imperfect.


@deftp {Class} mbfl_predefined_constant
@deftpx {Proxy Variable} mbfl_predefined_constant
@deftpx {Superclass} mbfl_default_object
@deftpx {Metaclass} mbfl_default_class
Class of objects representing unique constant values.
@end deftp


@defun mbfl_predefined_constant_define @var{DEFOBJ}
Define a new instance of @objtype{mbfl_predefined_constant}.
@end defun


@defun mbfl_predefined_constant_p @var{DEFOBJ}
Return true if the parameter is the datavar of an object of class @class{mbfl_predefined_constant};
otherwise return false.
@end defun


@defivar mbfl_predefined_constant mbfl_undefined
A unique value used as variable's value to indicate an undefined value.
@end defivar


@defivar mbfl_predefined_constant mbfl_unspecified
A unique value used as function call parameter to indicate an unspecified value.
@end defivar


@defun mbfl_the_undefined_p @var{DEFOBJ}
Return true if the parameter is the data variable of @code{mbfl_undefined}; otherwise return false.
@end defun


@defun mbfl_the_unspecified_p @var{DEFOBJ}
Return true if the parameter is the data variable of @code{mbfl_unspecified}; otherwise return
false.
@end defun

@c page
@node conditions
@chapter Exceptional--condition objects


Exceptional--condition objects are used to signal exceptional conditions while executing a script;
these objects are handed to exception handlers to react to the condition, @ref{exceptions, Raising
and handling exceptions}.  Exceptional--condition objects are ``default objects'' as defined by the
object--oriented programming facilities of @mbfl{}; @ref{objects} for details.

@menu
* conditions conventions::      Conventions.
* conditions base::             Base exceptional-condition objects.
* conditions warning::          Warning exceptional-condition objects.

Error exceptional-condition objects.

* conditions error::            Error exceptional-condition objects.
* conditions logic::            Logic--error exceptional-condition objects.
* conditions runtime::          Runtime--error exceptional-condition objects.
* conditions uncaught::         Uncaught exceptional-condition objects.

Class related exceptional-condition objects.

* conditions invalid ctor value::    Invalid constructor parameter value exceptional--condition objects.
* conditions invalid attrib value::  Invalid attribute value exceptional--condition objects.

Miscellaneous exceptional-condition objects.

* conditions location outside::      Invalid operation outside location exceptional--condition objects.
* conditions wrong parm number::     Wrong parameters number to function call exceptional--condition objects.
* conditions invalid parameter::     Invalid parameter to function call exceptional--condition objects.
@end menu

@c page
@node conditions conventions
@section Conventions


@menu
* conditions conventions underscore::   The underscore syntax.
@end menu

@c page
@node conditions conventions underscore
@subsection The underscore syntax


In this chapter we use the underscore syntax as defined in @ref{objects conventions underscore, The
underscore syntax}.

@c page
@node conditions base
@section Base exceptional--condition objects


All the exceptional--condition objects must be subclasses of @class{mbfl_exceptional_condition}.
We can subclass it as follows:

@example
mbfl_default_class_declare(my_something_happened_t)

mbfl_default_class_define _(my_something_happened_t) \
    _(mbfl_exceptional_condition_t) 'my_something_happened'

function my_something_happened_make () @{
    mbfl_mandatory_nameref_parameter(CND, 1, exceptional-condition object)
    mbfl_mandatory_parameter(WHO,         2, entity reporting the exceptional-condition)
    mbfl_mandatory_parameter(MESSAGE,     3, exceptional-condition description message)
    declare CONTINUABLE='true'

    my_something_happened_define _(CND) "$WHO" "$MESSAGE" "$CONTINUABLE"
@}
@end example

@noindent
and we can use the subclass as follows:

@example
mbfl_default_object_declare(CND)

my_something_happened_make _(CND) 'someone' 'something happened'
mbfl_exception_raise _(CND)
@end example

@menu
* conditions base class::       Class definition of @class{mbfl_exceptional_condition}.
* conditions base attributes::  Attributes of @class{mbfl_exceptional_condition}.
* conditions base methods::     Class methods of @class{mbfl_exceptional_condition}.
@end menu

@c page
@node conditions base class
@subsection Class definition of @class{mbfl_exceptional_condition}


@deftp {Abstract Class} mbfl_exceptional_condition
@deftpx {Proxy Variable} mbfl_exceptional_condition_t
@deftpx {Superclass} mbfl_default_object
@deftpx {Metaclass} mbfl_default_abstract_class
Base class describing exceptional--conditions; instances of this class's subclasses are used to
describe exceptional conditions, like errors and warnings.

@cindex @var{CND} parameter
@cindex @var{CND} function parameter
@cindex Parameter @var{CND}
@cindex Function parameter @var{CND}
In this documentation the function parameter @var{CND} represents the data variable of an instance
of a subclass of @class{mbfl_exceptional_condition}.
@end deftp


@defop {Predicate} {mbfl_exceptional_condition_t} mbfl_exceptional_condition_p @var{DEFOBJ}
Return true if the default object @var{DEFOBJ} is an instance of
@class{mbfl_exceptional_condition}; otherwise return false.

@example
mbfl_default_object_declare(CND)

mbfl_runtime_error_condition_make _(CND) 'someone' 'bad thing'
mbfl_exceptional_condition_p _(CND)
@result{} 0
@end example
@end defop

@c page
@node conditions base attributes
@subsection Attributes of @class{mbfl_exceptional_condition}


@menu
* conditions base attributes who::          Attribute @code{who} of @class{mbfl_exceptional_condition}.
* conditions base attributes message::      Attribute @code{message} of @class{mbfl_exceptional_condition}.
* conditions base attributes continuable::  Attribute @code{continuable} of @class{mbfl_exceptional_condition}.
@end menu

@macro RefWhoConditionAttribute{}
@ref{@code{who} of @class{mbfl_exceptional_condition}}
@end macro

@macro RefMessageConditionAttribute{}
@ref{@code{message} of @class{mbfl_exceptional_condition}}
@end macro

@macro RefContinuableConditionAttribute{}
@ref{@code{continuable} of @class{mbfl_exceptional_condition}}
@end macro

@c page
@node conditions base attributes who
@subsubsection Attribute @code{who} of @class{mbfl_exceptional_condition}


Given a subclass of @class{mbfl_exceptional_condition} we can use this attribute as follows:

@example
mbfl_default_object_declare(CND)
mbfl_declare_varref(WHO)

mbfl_runtime_error_condition_make _(CND) 'someone' 'bad thing'
mbfl_exceptional_condition_who_var _(WHO) _(CND)
"$WHO"  @result{} someone
@end example


@anchor{@code{who} of @class{mbfl_exceptional_condition}}
@defcv {Class Attribute} {mbfl_exceptional_condition_t} who
A non--empty string describing the entity that raised the exceptional--condition.
@end defcv


@anchor{mbfl_exceptional_condition_who_set}
@defop {Accessor} {mbfl_exceptional_condition_t} mbfl_exceptional_condition_who_set @var{CND} @var{WHO}
@defopx {Mutator} {mbfl_exceptional_condition_t} mbfl_exceptional_condition_who_var @var{WHO_RV} @var{CND}
Class attribute accessor and mutator.
@end defop

@c page
@node conditions base attributes message
@subsubsection Attribute @code{message} of @class{mbfl_exceptional_condition}


Given a subclass of @class{mbfl_exceptional_condition} we can use this attribute as follows:

@example
mbfl_default_object_declare(CND)
mbfl_declare_varref(MSG)

mbfl_runtime_error_condition_make _(CND) 'someone' 'bad thing'
mbfl_exceptional_condition_message_var _(MSG) _(CND)
"$MSG"  @result{} bad thing
@end example


@anchor{@code{message} of @class{mbfl_exceptional_condition}}
@defcv {Class Attribute} {mbfl_exceptional_condition_t} message
A non--empty string describing the exceptional--condition.
@end defcv


@anchor{mbfl_exceptional_condition_message_set}
@defop {Accessor} {mbfl_exceptional_condition_t} mbfl_exceptional_condition_message_set @var{CND} @var{MESSAGE}
@defopx {Mutator} {mbfl_exceptional_condition_t} mbfl_exceptional_condition_message_var @var{MESSAGE_RV} @var{CND}
Class attribute accessor and mutator.
@end defop

@c page
@node conditions base attributes continuable
@subsubsection Attribute @code{continuable} of @class{mbfl_exceptional_condition}


Given a subclass of @class{mbfl_exceptional_condition} we can use this attribute as follows:

@example
mbfl_default_object_declare(CND)
mbfl_declare_varref(CONT)

mbfl_runtime_error_condition_make _(CND) 'someone' 'bad thing'
mbfl_exceptional_condition_continuable_var _(CONT) _(CND)
$CONT   @result{} true
@end example


@anchor{@code{continuable} of @class{mbfl_exceptional_condition}}
@defcv {Class Attribute} {mbfl_exceptional_condition_t} continuable
A string representing a boolean:

@table @samp
@item true
This condition is continuable: the exception can be fixed, in which case script's execution can
continue.

@item false
This condition is non--continuable: the exception cannot be fixed, script's execution must be
terminated.
@end table

We must be careful in changing the default value of this attribute: some exceptional--conditions are
meant to be non--continuable no matter what.

To cleanly terminate a script after a non--continuable exception has been raised: we can use the
exit trap; @ref{exit atexit, Running scripts at exit--time}.  Location handlers can also be useful;
@ref{mbfl_location_enable_cleanup_atexit, Special location handlers}.
@end defcv


@anchor{mbfl_exceptional_condition_continuable_set}
@defop {Accessor} {mbfl_exceptional_condition_t} mbfl_exceptional_condition_continuable_set @var{CND} @var{CONTINUABLE}
@defopx {Mutator} {mbfl_exceptional_condition_t} mbfl_exceptional_condition_continuable_var @var{CONTINUABLE_RV} @var{CND}
Class attribute accessor and mutator.

The parameter @var{CONTINUABLE} must be a string as accepted by
@func{mbfl_string_normalise_boolean_var}, otherwise an exceptional--condition of type
@class{mbfl_invalid_object_attrib_value_condition} is raised;
@ref{mbfl_string_normalise_boolean_var, Normalising strings}
@end defop

@c page
@node conditions base methods
@subsection Class methods of @class{mbfl_exceptional_condition}


@defun mbfl_exceptional_condition_print @var{CND}
Print on @stdout{} a description of the exceptional--condition @var{CND}.  The description is
composed using the @code{who} and @code{message} attributes as follows:

@example
printf -v @var{DESCRIPTION} '%s: %s\n' @var{WHO} @var{message}
@end example

As special cases, if @var{CND} is of type:

@table @class
@item mbfl_warning_condition_t
The string @var{DESCRIPTION} is handed to @func{mbfl_message_warning_printf}.

@item mbfl_error_condition_t
The string @var{DESCRIPTION} is handed to @func{mbfl_message_error_printf}.
@end table

Usage example:

@example
mbfl_default_object_declare(CND)

mbfl_runtime_error_condition_make _(CND) 'someone' 'bad thing'
mbfl_exceptional_condition_print _(CND)
@print{} script: error: someone: bad thing
@end example
@end defun


@defun mbfl_exceptional_condition_is_continuable @var{CND}
Return true if @var{CND} is continuable; otherwise return false.

Usage example:

@example
mbfl_default_object_declare(CND)

mbfl_runtime_error_condition_make _(CND) 'someone' 'bad thing'
mbfl_exceptional_condition_is_continuable _(CND)
@result{} 0
@end example
@end defun

@c page
@node conditions warning
@section Warning exceptional--condition objects


@dfn{Warning exceptional--conditions} are used to inform the user about something; for example the
use of a dangerous or deprecated procedure.  We can use them as follows:

@example
mbfl_default_object_declare(CND)

mbfl_warning_condition_make _(CND) 'someone' 'starting dangerous situation'
mbfl_exception_raise _(CND)
@end example

Usually when an exceptional--condition of this class is raised: the correct handling is to just
notify the user and resume the execution of the script.

@menu
* conditions warning class::            Class definition of @class{mbfl_warning_condition}.
* conditions warning constructors::     Class constructors of @class{mbfl_warning_condition}.
* conditions warning attributes::       Attributes of @class{mbfl_warning_condition}.
@end menu

@c page
@node conditions warning class
@subsection Class definition of @class{mbfl_warning_condition}


@deftp {Class} mbfl_warning_condition
@deftpx {Proxy Variable} mbfl_warning_condition_t
@deftpx {Superclass} mbfl_exceptional_condition_t
@deftpx {Metaclass} mbfl_default_class
Class describing warning exceptional--conditions; instances of this class are used to notify the
user about something.  Exceptional--conditions of this class should be continuable.
@end deftp


@defop {Predicate} {mbfl_warning_condition_t} mbfl_warning_condition_p @var{DEFOBJ}
Return true if @var{DEFOBJ} is an instance of @class{mbfl_warning_condition}; otherwise return
false.

@example
mbfl_default_object_declare(CND)

mbfl_warning_condition_make _(CND) 'someone' 'living dangerously'
mbfl_warning_condition_p _(CND)
@result{} 0
@end example
@end defop

@c page
@node conditions warning constructors
@subsection Class constructors of @class{mbfl_warning_condition}


@defop {Constructor} {mbfl_warning_condition_t} mbfl_warning_condition_make @var{CND} @var{WHO} @var{MESSAGE}
Define an object previously declared with @class{mbfl_default_object_declare} or similar.  Objects
built by this constructor are continuable.

@RefWhoConditionAttribute{} for the semantics of the parameter @var{WHO}.

@RefMessageConditionAttribute{} for the semantics of the parameter @var{MESSAGE}.

@example
mbfl_default_object_declare(CND)

mbfl_warning_condition_make _(CND) 'someone' 'living dangerously'
mbfl_warning_condition_p _(CND)
@result{} 0
@end example
@end defop


@defop {Constructor} {mbfl_warning_condition_t} mbfl_warning_condition_define @var{CND} @var{WHO} @var{MESSAGE} @var{CONTINUABLE}
Define an object previously declared with @class{mbfl_default_object_declare} or similar.  This is a
low--level constructor that should not be used directly by client code.

@RefWhoConditionAttribute{} for the semantics of the parameter @var{WHO}.

@RefMessageConditionAttribute{} for the semantics of the parameter @var{MESSAGE}.

@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.

We can use this constructor to define high--level constructors as follows:

@example
function mbfl_warning_condition_for_danger_make () @{
    mbfl_mandatory_nameref_parameter(CND, 1, exceptional-condition object)
    mbfl_mandatory_parameter(WHO, 2, entity raising the exceptional-condition)

    mbfl_warning_condition_define _(CND) "$WHO" 'starting dangerous situation' 'true'
@}
@end example
@end defop

@c page
@node conditions warning attributes
@subsection Attributes of @class{mbfl_warning_condition}


@menu
* conditions warning attributes who::           Attribute @code{who} of @class{mbfl_warning_condition}.
* conditions warning attributes message::       Attribute @code{message} of @class{mbfl_warning_condition}.
* conditions warning attributes continuable::   Attribute @code{continuable} of @class{mbfl_warning_condition}.
@end menu

@c page
@node conditions warning attributes who
@subsubsection Attribute @code{who} of @class{mbfl_warning_condition}


@RefWhoConditionAttribute{} for the semantics of the attribute @code{who}.


@defop {Accessor} {mbfl_warning_condition_t} mbfl_warning_condition_who_set @var{CND} @var{WHO}
@defopx {Mutator} {mbfl_warning_condition_t} mbfl_warning_condition_who_var @var{WHO_RV} @var{CND}
Class attribute accessor and mutator.
@end defop

@c page
@node conditions warning attributes message
@subsubsection Attribute @code{message} of @class{mbfl_warning_condition}


@RefMessageConditionAttribute{} for the semantics of the attribute @code{message}.


@defop {Accessor} {mbfl_warning_condition_t} mbfl_warning_condition_message_set @var{CND} @var{MESSAGE}
@defopx {Mutator} {mbfl_warning_condition_t} mbfl_warning_condition_message_var @var{MESSAGE_STRING_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions warning attributes continuable
@subsubsection Attribute @code{continuable} of @class{mbfl_warning_condition}


@RefContinuableConditionAttribute{} for the semantics of the attribute @code{continuable}.


@defop {Accessor} {mbfl_warning_condition_t} mbfl_warning_condition_continuable_set @var{CND} @var{CONTINUABLE}
@defopx {Mutator} {mbfl_warning_condition_t} mbfl_warning_condition_continuable_var @var{CONTINUABLE_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions error
@section Error exceptional--condition objects


@dfn{Error exceptional--conditions} are used to signal an error in a procedure the script is
executing.  The abstract class @class{mbfl_error_condition} is meant to be the base of all the
error exceptional--condition objects; we can subclass it as follows:

@example
mbfl_default_class_declare(fatal_error_t)

mbfl_default_class_define _(fatal_error_t) _(mbfl_error_condition_t) 'fatal_error'

function fatal_error_make () @{
    mbfl_mandatory_nameref_parameter(CND, 1, exceptional-condition object)
    mbfl_mandatory_parameter(WHO,         2, entity reporting the exceptional-condition)
    mbfl_mandatory_parameter(MESSAGE,     3, exceptional-condition description message)
    declare CONTINUABLE='true'

    fatal_error_define _(CND) "$WHO" "$MESSAGE" $CONTINUABLE
@}
@end example

@noindent
and we can use the subclass as follows:

@example
mbfl_default_object_declare(CND)

fatal_error_make _(CND) 'someone' 'save yourself'
mbfl_exception_raise _(CND)
@end example

@menu
* conditions error class::            Class definition of @class{mbfl_error_condition}.
* conditions error attributes::       Attributes of @class{mbfl_error_condition}.
@end menu

@c page
@node conditions error class
@subsection Class definition of @class{mbfl_error_condition}


@deftp {Abstract Class} mbfl_error_condition
@deftpx {Proxy Variable} mbfl_error_condition_t
@deftpx {Superclass} mbfl_exceptional_condition_t
@deftpx {Metaclass} mbfl_default_abstract_class
Class describing error exceptional--conditions.
@end deftp


@defop {Predicate} {mbfl_error_condition_t} mbfl_error_condition_p @var{DEFOBJ}
Return true if @var{DEFOBJ} is an instance of @class{mbfl_error_condition}; otherwise return
false.

@example
mbfl_default_object_declare(CND)

mbfl_runtime_error_condition_make _(CND) 'someone' 'my bad'
mbfl_error_condition_p _(CND)
@result{} 0
@end example
@end defop

@c page
@node conditions error attributes
@subsection Attributes of @class{mbfl_error_condition}


@menu
* conditions error attributes who::           Attribute @code{who} of @class{mbfl_error_condition}.
* conditions error attributes message::       Attribute @code{message} of @class{mbfl_error_condition}.
* conditions error attributes continuable::   Attribute @code{continuable} of @class{mbfl_error_condition}.
@end menu

@c page
@node conditions error attributes who
@subsubsection Attribute @code{who} of @class{mbfl_error_condition}


@RefWhoConditionAttribute{} for the semantics of the parameter @var{WHO}.


@defop {Accessor} {mbfl_error_condition_t} mbfl_error_condition_who_set @var{CND} @var{WHO}
@defopx {Mutator} {mbfl_error_condition_t} mbfl_error_condition_who_var @var{WHO_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions error attributes message
@subsubsection Attribute @code{message} of @class{mbfl_error_condition}


@RefMessageConditionAttribute{} for the semantics of the parameter @var{MESSAGE}.


@defop {Accessor} {mbfl_error_condition_t} mbfl_error_condition_message_set @var{CND} @var{MESSAGE}
@defopx {Mutator} {mbfl_error_condition_t} mbfl_error_condition_message_var @var{MESSAGE_STRING_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions error attributes continuable
@subsubsection Attribute @code{continuable} of @class{mbfl_error_condition}


@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.

@defop {Accessor} {mbfl_error_condition_t} mbfl_error_condition_continuable_set @var{CND} @var{CONTINUABLE}
@defopx {Mutator} {mbfl_error_condition_t} mbfl_error_condition_continuable_var @var{CONTINUABLE_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions logic
@section Logic--error exceptional--condition objects


@dfn{Logic--error exceptional--conditions} are used to signal a programming error: something that
should not happen in a perfect script.  For example: parameters of the wrong type handed to a
function call; out--of--range array indexes.  We can use them as follows:

@example
mbfl_default_object_declare(CND)

mbfl_logic_error_condition_make _(CND) 'someone' 'internal error'
mbfl_exception_raise _(CND)
@end example

Usually when an exceptional--condition of this class is raised, the correct handling is to: attempt
a clean release of all the resources; inform the user; terminate the program with an appropriate
exit status.

@menu
* conditions logic class::         Class definition of @class{mbfl_logic_error_condition}.
* conditions logic constructors::  Class constructors of @class{mbfl_logic_error_condition}.
* conditions logic attributes::    Attributes of @class{mbfl_logic_error_condition}.
@end menu

@c page
@node conditions logic class
@subsection Class definition of @class{mbfl_logic_error_condition}


@deftp {Class} mbfl_logic_error_condition
@deftpx {Proxy Variable} mbfl_logic_error_condition_t
@deftpx {Superclass} mbfl_error_condition_t
@deftpx {Metaclass} mbfl_default_class
Class describing logic--error exceptional--conditions.  Instances of this class should be
non--continuable.
@end deftp


@defop {Predicate} {mbfl_logic_error_condition_t} mbfl_logic_error_condition_p @var{DEFOBJ}
Return true if @var{DEFOBJ} is an instance of @class{mbfl_logic_error_condition}; otherwise return
false.

@example
mbfl_default_object_declare(CND)

mbfl_logic_error_condition_make _(CND) 'someone' 'my bad'
mbfl_logic_error_condition_p _(CND)
@result{} 0
@end example
@end defop

@c page
@node conditions logic constructors
@subsection Class constructors of @class{mbfl_logic_error_condition}


@defop {Constructor} {mbfl_logic_error_condition_t} mbfl_logic_error_condition_make @var{CND} @var{WHO} @var{MESSAGE}
Define an object previously declared with @class{mbfl_default_object_declare} or similar.  Objects
built with this constructor are non--continuable by default.

@RefWhoConditionAttribute{} for the semantics of the parameter @var{WHO}.

@RefMessageConditionAttribute{} for the semantics of the parameter @var{MESSAGE}.
@end defop


@defop {Constructor} {mbfl_logic_error_condition_t} mbfl_logic_error_condition_define @var{CND} @var{WHO} @var{MESSAGE} @var{CONTINUABLE}
Define an object previously declared with @class{mbfl_default_object_declare} or similar.  This is a
low--level constructor that does not validate its parameters; it should be used by client code only
to define high--level constructors.

@RefWhoConditionAttribute{} for the semantics of the parameter @var{WHO}.

@RefMessageConditionAttribute{} for the semantics of the parameter @var{MESSAGE}.

@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.
@end defop

@c page
@node conditions logic attributes
@subsection Attributes of @class{mbfl_logic_error_condition}


@menu
* conditions logic attributes who::           Attribute @code{who} of @class{mbfl_logic_error_condition}.
* conditions logic attributes message::       Attribute @code{message} of @class{mbfl_logic_error_condition}.
* conditions logic attributes continuable::   Attribute @code{continuable} of @class{mbfl_logic_error_condition}.
@end menu

@c page
@node conditions logic attributes who
@subsubsection Attribute @code{who} of @class{mbfl_logic_error_condition}


@RefWhoConditionAttribute{} for the semantics of the parameter @var{WHO}.


@defop {Accessor} {mbfl_logic_error_condition_t} mbfl_logic_error_condition_who_set @var{CND} @var{WHO}
@defopx {Mutator} {mbfl_logic_error_condition_t} mbfl_logic_error_condition_who_var @var{WHO_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions logic attributes message
@subsubsection Attribute @code{message} of @class{mbfl_logic_error_condition}


@RefMessageConditionAttribute{} for the semantics of the parameter @var{MESSAGE}.


@defop {Accessor} {mbfl_logic_error_condition_t} mbfl_logic_error_condition_message_set @var{CND} @var{MESSAGE}
@defopx {Mutator} {mbfl_logic_error_condition_t} mbfl_logic_error_condition_message_var @var{MESSAGE_STRING_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions logic attributes continuable
@subsubsection Attribute @code{continuable} of @class{mbfl_logic_error_condition}


@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.


@defop {Accessor} {mbfl_logic_error_condition_t} mbfl_logic_error_condition_continuable_set @var{CND} @var{CONTINUABLE}
@defopx {Mutator} {mbfl_logic_error_condition_t} mbfl_logic_error_condition_continuable_var @var{CONTINUABLE_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions runtime
@section Runtime--error exceptional--condition objects


@dfn{Runtime error exceptional--conditions} are used to signal a runtime error: usually some sort of
synchronisation problem between the current process and some other process or the user itself.  For
example: file system errors; input/output errors; invalid file contents; invalid user requests.  We
can use them as follows:

@example
mbfl_default_object_declare(CND)

mbfl_runtime_error_condition_make _(CND) 'someone' 'internal error'
mbfl_exception_raise _(CND)
@end example

Usually when an exceptional--condition of this class is raised, the correct handling is to: attempt
a clean release of all the associated resources; inform the user; if appropriate continue script's
execution, otherwise terminate the process with a meaningful exit status.

@menu
* conditions runtime class::         Class definition of @class{mbfl_runtime_error_condition}.
* conditions runtime constructors::  Class constructors of @class{mbfl_runtime_error_condition}.
* conditions runtime attributes::    Attributes of @class{mbfl_runtime_error_condition}.
@end menu

@c page
@node conditions runtime class
@subsection Class definition of @class{mbfl_runtime_error_condition}


@deftp {Class} mbfl_runtime_error_condition
@deftpx {Proxy Variable} mbfl_runtime_error_condition_t
@deftpx {Superclass} mbfl_error_condition_t
@deftpx {Metaclass} mbfl_default_class
Class describing runtime--error exceptional--conditions.  Instances of this class should be
continuable.
@end deftp


@defop {Predicate} {mbfl_runtime_error_condition_t} mbfl_runtime_error_condition_p @var{DEFOBJ}
Return true if @var{DEFOBJ} is an instance of @class{mbfl_runtime_error_condition}; otherwise
return false.

@example
mbfl_default_object_declare(CND)

mbfl_runtime_error_condition_make _(CND) 'someone' 'my bad'
mbfl_runtime_error_condition_p _(CND)
@result{} 0
@end example
@end defop

@c page
@node conditions runtime constructors
@subsection Class constructors of @class{mbfl_runtime_error_condition}


@defop {Constructor} {mbfl_runtime_error_condition_t} mbfl_runtime_error_condition_make @var{CND} @var{WHO} @var{MESSAGE}
Define an object previously declared with @class{mbfl_default_object_declare} or similar.  Objects
built with this constructor are continuable by default.

@RefWhoConditionAttribute{} for the semantics of the parameter @var{WHO}.

@RefMessageConditionAttribute{} for the semantics of the parameter @var{MESSAGE}.
@end defop


@defop {Constructor} {mbfl_runtime_error_condition_t} mbfl_runtime_error_condition_define @var{CND} @var{WHO} @var{MESSAGE} @var{CONTINUABLE}
Define an object previously declared with @class{mbfl_default_object_declare} or similar.  This is a
low--level constructor that does not validate its parameters; it should be used by client code only
to define high--level constructors.

@RefWhoConditionAttribute{} for the semantics of the parameter @var{WHO}.

@RefMessageConditionAttribute{} for the semantics of the parameter @var{MESSAGE}.

@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.
@end defop

@c page
@node conditions runtime attributes
@subsection Attributes of @class{mbfl_runtime_error_condition}


@menu
* conditions runtime attributes who::           Attribute @code{who} of @class{mbfl_runtime_error_condition}.
* conditions runtime attributes message::       Attribute @code{message} of @class{mbfl_runtime_error_condition}.
* conditions runtime attributes continuable::   Attribute @code{continuable} of @class{mbfl_runtime_error_condition}.
@end menu

@c page
@node conditions runtime attributes who
@subsubsection Attribute @code{who} of @class{mbfl_runtime_error_condition}


@RefWhoConditionAttribute{} for the semantics of the parameter @var{WHO}.


@defop {Accessor} {mbfl_runtime_error_condition_t} mbfl_runtime_error_condition_who_set @var{CND} @var{WHO}
@defopx {Mutator} {mbfl_runtime_error_condition_t} mbfl_runtime_error_condition_who_var @var{WHO_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions runtime attributes message
@subsubsection Attribute @code{message} of @class{mbfl_runtime_error_condition}


@RefMessageConditionAttribute{} for the semantics of the parameter @var{MESSAGE}.


@defop {Accessor} {mbfl_runtime_error_condition_t} mbfl_runtime_error_condition_message_set @var{CND} @var{MESSAGE}
@defopx {Mutator} {mbfl_runtime_error_condition_t} mbfl_runtime_error_condition_message_var @var{MESSAGE_STRING_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions runtime attributes continuable
@subsubsection Attribute @code{continuable} of @class{mbfl_runtime_error_condition}


@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.


@defop {Accessor} {mbfl_runtime_error_condition_t} mbfl_runtime_error_condition_continuable_set @var{CND} @var{CONTINUABLE}
@defopx {Mutator} {mbfl_runtime_error_condition_t} mbfl_runtime_error_condition_continuable_var @var{CONTINUABLE_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions uncaught
@section Uncaught exceptional-condition objects


@dfn{Uncaught exceptional--conditions} are used to signal a logic error: an exceptional--condition
was raised but no handler was installed to handle it.  Objects of this class are not meant to be
built by client code, if not for special purposes like debugging; usually only the default
exception--handler builds objects of this class.

Usually when an exceptional--condition of this class is raised, the correct handling is to: attempt
a clean release of all the associated resources; inform the user; terminate the script with an
appropriate exit status.

@menu
* conditions uncaught class::         Class definition of @class{mbfl_uncaught_exceptional_condition}.
* conditions uncaught constructors::  Class constructors of @class{mbfl_uncaught_exceptional_condition}.
* conditions uncaught attributes::    Attributes of @class{mbfl_uncaught_exceptional_condition}.
@end menu

@c page
@node conditions uncaught class
@subsection Class definition of @class{mbfl_uncaught_exceptional_condition}


@deftp {Class} mbfl_uncaught_exceptional_condition
@deftpx {Proxy Variable} mbfl_uncaught_exceptional_condition_t
@deftpx {Superclass} mbfl_logic_error_condition_t
@deftpx {Metaclass} mbfl_default_class
Class describing uncaught exceptional--conditions.  Instances of this class should be
non--continuable.
@end deftp


@defop {Predicate} {mbfl_uncaught_exceptional_condition_t} mbfl_runtime_error_condition_p @var{DEFOBJ}
Return true if @var{DEFOBJ} is an instance of @class{mbfl_uncaught_exceptional_condition};
otherwise return false.
@end defop

@c page
@node conditions uncaught constructors
@subsection Class constructors of @class{mbfl_uncaught_exceptional_condition}


@defop {Constructor} {mbfl_uncaught_exceptional_condition_t} mbfl_runtime_error_condition_make @var{CND} @var{WHO} @var{OBJ}
Define an object previously declared with @class{mbfl_default_object_declare} or similar.  Objects
built with this constructor are continuable by default.

@RefWhoConditionAttribute{} for the semantics of the parameter @var{WHO}.

@ref{@code{object} of @class{mbfl_uncaught_exceptional_condition}} for the semantics of the
parameter @var{OBJ}.
@end defop


@defop {Constructor} {mbfl_uncaught_exceptional_condition_t} mbfl_runtime_error_condition_define @var{CND} @var{WHO} @var{MESSAGE} @var{CONTINUABLE} @var{OBJ}
Define an object previously declared with @class{mbfl_default_object_declare} or similar.  This is a
low--level constructor that does not validate its parameters; it should be used by client code only
to define high--level constructors.

@RefWhoConditionAttribute{} for the semantics of the parameter @var{WHO}.

@RefMessageConditionAttribute{} for the semantics of the parameter @var{MESSAGE}.

@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.

@ref{@code{object} of @class{mbfl_uncaught_exceptional_condition}} for the semantics of the
parameter @var{OBJ}.
@end defop

@c page
@node conditions uncaught attributes
@subsection Attributes of @class{mbfl_uncaught_exceptional_condition}


@menu
* conditions uncaught attributes who::           Attribute @code{who} of @class{mbfl_uncaught_exceptional_condition}.
* conditions uncaught attributes continuable::   Attribute @code{continuable} of @class{mbfl_uncaught_exceptional_condition}.
* conditions uncaught attributes object::        Attribute @code{object} of @class{mbfl_uncaught_exceptional_condition}.
@end menu

@c page
@node conditions uncaught attributes who
@subsubsection Attribute @code{who} of @class{mbfl_uncaught_exceptional_condition}


@RefWhoConditionAttribute{} for the semantics of the parameter @var{WHO}.


@defop {Accessor} {mbfl_uncaught_exceptional_condition_t} mbfl_runtime_error_condition_who_set @var{CND} @var{WHO}
@defopx {Mutator} {mbfl_uncaught_exceptional_condition_t} mbfl_runtime_error_condition_who_var @var{WHO_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions uncaught attributes continuable
@subsubsection Attribute @code{continuable} of @class{mbfl_uncaught_exceptional_condition}


@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.


@defop {Accessor} {mbfl_uncaught_exceptional_condition_t} mbfl_runtime_error_condition_continuable_set @var{CND} @var{CONTINUABLE}
@defopx {Mutator} {mbfl_uncaught_exceptional_condition_t} mbfl_runtime_error_condition_continuable_var @var{CONTINUABLE_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions uncaught attributes object
@subsubsection Attribute @code{object} of @class{mbfl_uncaught_exceptional_condition}


@anchor{@code{object} of @class{mbfl_uncaught_exceptional_condition}}
@defcv {Class Attribute} {mbfl_uncaught_exceptional_condition_t} object
Data variable of an exceptional--condition object that was raised but not handled by any
exception--handler.
@end defcv


@defop {Accessor} {mbfl_uncaught_exceptional_condition_t} mbfl_uncaught_exceptional_condition_object_set @var{CND} @var{OBJ}
@defopx {Mutator} {mbfl_uncaught_exceptional_condition_t} mbfl_uncaught_exceptional_condition_object_var @var{OBJ_RV} @var{CND}
Attribute accessor and mutator.
@end defop


Let's say @env{CND} is a variable holding the data variable of a
@class{mbfl_uncaught_exceptional_condition} instance; to access the original
exceptional--condition object we do:

@example
mbfl_declare_varref(ORIGINAL_CND_DATAVAR)

mbfl_uncaught_exceptional_condition_object_var _(ORIGINAL_CND_DATAVAR) _(CND)
mbfl_declare_nameref(ORIGINAL_CND, $ORIGINAL_CND_DATAVAR)

mbfl_exceptional_condition_print _(ORIGINAL_CND)
@end example

@c page
@node conditions invalid ctor value
@section Invalid constructor parameter value exceptional--condition objects


@dfn{Invalid constructor parameter value exceptional--conditions} are used to signal a programming
error: an invalid value was used as object's constructor parameter; such conditions are usually
raised by class constructors.

@menu
* conditions invalid ctor value class::         Class definition of @class{mbfl_invalid_ctor_parm_value_condition}.
* conditions invalid ctor value constructors::  Class constructors of @class{mbfl_invalid_ctor_parm_value_condition}.
* conditions invalid ctor value attributes::    Attributes of @class{mbfl_invalid_ctor_parm_value_condition}.
@end menu

@c page
@node conditions invalid ctor value class
@subsection Class definition of @class{mbfl_invalid_ctor_parm_value_condition}


@deftp {Class} mbfl_invalid_ctor_parm_value_condition
@deftpx {Proxy Variable} mbfl_invalid_ctor_parm_value_condition_t
@deftpx {Superclass} mbfl_logic_error_condition_t
@deftpx {Metaclass} mbfl_default_class
Class describing invalid parameter value to object's constructor exceptional--conditions.  Instances
of this class should be non--continuable.
@end deftp


@defop {Predicate} {mbfl_invalid_ctor_parm_value_condition_t} mbfl_invalid_ctor_parm_value_condition_p @var{DEFOBJ}
Return true if @var{DEFOBJ} is an instance of @class{mbfl_invalid_ctor_parm_value_condition};
otherwise return false.

@example
mbfl_default_object_declare(CND)

mbfl_invalid_ctor_parm_value_condition_make _(CND) 'someone' _(CLASS) 'red' 'ciao'
mbfl_invalid_ctor_parm_value_condition_p _(CND)
@result{} 0
@end example
@end defop

@c page
@node conditions invalid ctor value constructors
@subsection Class constructors of @class{mbfl_invalid_ctor_parm_value_condition}


@defop {Constructor} {mbfl_invalid_ctor_parm_value_condition_t} mbfl_invalid_ctor_parm_value_condition_make @var{CND} @var{WHO} @var{CLASS} @var{PARM_NAME} @var{INVALID_VALUE}
Define an object previously declared with @class{mbfl_default_object_declare} or similar.  The
condition is non--continuable by default.

@RefWhoConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.

@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.

@ref{@code{class} of @class{mbfl_invalid_ctor_parm_value_condition}} for the semantics of the
parameter @var{CLASS}.

@ref{@code{parm_name} of @class{mbfl_invalid_ctor_parm_value_condition}} for the semantics of the
parameter @var{PARM_NAME}.

@ref{@code{invalid_value} of @class{mbfl_invalid_ctor_parm_value_condition}} for the semantics of
the parameter @var{INVALID_VALUE}.

Let's say we have this class definition:

@example
mbfl_default_class_declare(COLOUR)

mbfl_default_class_define _(COLOUR) _(mbfl_default_object) 'colour' red green blue
@end example

@noindent
we want the constructor's parameters to be integers; we can define a maker as follows:

@example
function colour_make () @{
    mbfl_mandatory_nameref_parameter(OBJ,       1, colour object)
    mbfl_mandatory_parameter(RED,               2, red)
    mbfl_mandatory_parameter(GREEN,             3, green)
    mbfl_mandatory_parameter(BLUE,              3, blue)

    if ! mbfl_string_is_digit "$RED"
    then
        mbfl_default_object_declare(CND)

        mbfl_invalid_ctor_parm_value_condition_make _(CND) $FUNCNAME _(OBJ) 'red' "$RED"
        mbfl_exception_raise _(CND)
    fi

    if ! mbfl_string_is_digit "$GREEN"
    then
        mbfl_default_object_declare(CND)

        dotest-debug  _(CND) $FUNCNAME _(OBJ) 'green' "$GREEN"
        mbfl_invalid_ctor_parm_value_condition_make _(CND) $FUNCNAME _(OBJ) 'green' "$GREEN"
        mbfl_exception_raise _(CND)
    fi

    if ! mbfl_string_is_digit "$BLUE"
    then
        mbfl_default_object_declare(CND)

        mbfl_invalid_ctor_parm_value_condition_make _(CND) $FUNCNAME _(OBJ) 'blue' "$BLUE"
        mbfl_exception_raise _(CND)
    fi

    colour_define _(OBJ) "$RED" "$GREEN" "$BLUE"
@}
@end example
@end defop


@defop {Constructor} {mbfl_invalid_ctor_parm_value_condition_t} mbfl_invalid_ctor_parm_value_condition_define @var{CND} @var{WHO} @var{CONTINUABLE} @var{CLASS} @var{PARM_NAME} @var{INVALID_VALUE}
Define an object previously declared with @class{mbfl_default_object_declare} or similar.  This is a
low--level constructor that should not be used only to define high--level constructors.

@RefWhoConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.

@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.

@ref{@code{class} of @class{mbfl_invalid_ctor_parm_value_condition}} for the semantics of the
parameter @var{CLASS}.

@ref{@code{parm_name} of @class{mbfl_invalid_ctor_parm_value_condition}} for the semantics of the
parameter @var{PARM_NAME}.

@ref{@code{invalid_value} of @class{mbfl_invalid_ctor_parm_value_condition}} for the semantics of
the parameter @var{INVALID_VALUE}.
@end defop

@c page
@node conditions invalid ctor value attributes
@subsection Attributes of @class{mbfl_invalid_ctor_parm_value_condition}


@menu
* conditions invalid ctor value attributes who::           Attribute @code{who} of @class{mbfl_invalid_ctor_parm_value_condition}.
* conditions invalid ctor value attributes continuable::   Attribute @code{continuable} of @class{mbfl_invalid_ctor_parm_value_condition}.
* conditions invalid ctor value attributes class::         Attribute @code{class} of @class{mbfl_invalid_ctor_parm_value_condition}.
* conditions invalid ctor value attributes parm-name::     Attribute @code{parm_name} of @class{mbfl_invalid_ctor_parm_value_condition}.
* conditions invalid ctor value attributes invalid-value:: Attribute @code{invalid_value} of @class{mbfl_invalid_ctor_parm_value_condition}.
@end menu

@c page
@node conditions invalid ctor value attributes who
@subsubsection Attribute @code{who} of @class{mbfl_invalid_ctor_parm_value_condition}.


@RefWhoConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.


@defop {Accessor} {mbfl_invalid_ctor_parm_value_condition_t} mbfl_invalid_ctor_parm_value_condition_who_set @var{CND} @var{WHO}
@defopx {Mutator} {mbfl_invalid_ctor_parm_value_condition_t} mbfl_invalid_ctor_parm_value_condition_who_var @var{WHO_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions invalid ctor value attributes continuable
@subsubsection Attribute @code{continuable} of @class{mbfl_invalid_ctor_parm_value_condition}


@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.


@defop {Accessor} {mbfl_invalid_ctor_parm_value_condition_t} mbfl_invalid_ctor_parm_value_condition_continuable_set @var{CND} @var{CONTINUABLE}
@defopx {Mutator} {mbfl_invalid_ctor_parm_value_condition_t} mbfl_invalid_ctor_parm_value_condition_continuable_var @var{CONTINUABLE_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions invalid ctor value attributes class
@subsubsection Attribute @code{class} of @class{mbfl_invalid_ctor_parm_value_condition}


@anchor{@code{class} of @class{mbfl_invalid_ctor_parm_value_condition}}
@defcv {Class Attribute} {mbfl_invalid_ctor_parm_value_condition_t} class
The data variable of the class whose constructor's parameter we tried to set to an invalid value.
@end defcv


@defop {Accessor} {mbfl_invalid_ctor_parm_value_condition_t} mbfl_invalid_ctor_parm_value_condition_class_set @var{CND} @var{OBJ}
@defopx {Mutator} {mbfl_invalid_ctor_parm_value_condition_t} mbfl_invalid_ctor_parm_value_condition_class_var @var{OBJ_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions invalid ctor value attributes parm-name
@subsubsection Attribute @code{parm_name} of @class{mbfl_invalid_ctor_parm_value_condition}


@anchor{@code{parm_name} of @class{mbfl_invalid_ctor_parm_value_condition}}
@defcv {Class Attribute} {mbfl_invalid_ctor_parm_value_condition_t} parm_name
A string representing the parameter name.
@end defcv


@defop {Accessor} {mbfl_invalid_ctor_parm_value_condition_t} mbfl_invalid_ctor_parm_value_condition_parm_name_set @var{CND} @var{NAME}
@defopx {Mutator} {mbfl_invalid_ctor_parm_value_condition_t} mbfl_invalid_ctor_parm_value_condition_parm_name_var @var{NAME_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions invalid ctor value attributes invalid-value
@subsubsection Attribute @code{invalid_value} of @class{mbfl_invalid_ctor_parm_value_condition}


@anchor{@code{invalid_value} of @class{mbfl_invalid_ctor_parm_value_condition}}
@defcv {Class Attribute} {mbfl_invalid_ctor_parm_value_condition_t} invalid_value
A string representing the invalid value.
@end defcv


@defop {Accessor} {mbfl_invalid_ctor_parm_value_condition_t} mbfl_invalid_ctor_parm_value_condition_invalid_value_set @var{CND} @var{INVALID_VALUE}
@defopx {Mutator} {mbfl_invalid_ctor_parm_value_condition_t} mbfl_invalid_ctor_parm_value_condition_invalid_value_var @var{INVALID_VALUE_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions invalid attrib value
@section Invalid attribute value exceptional--condition objects


@dfn{Invalid value to object's attribute exceptional--conditions} are used to signal a programming
error: an attempt was performed to set an object's attribute to an invalid value; such conditions
are usually raised by class attribute mutators.

@menu
* conditions invalid attrib value class::         Class definition of @class{mbfl_invalid_object_attrib_value_condition}.
* conditions invalid attrib value constructors::  Class constructors of @class{mbfl_invalid_object_attrib_value_condition}.
* conditions invalid attrib value attributes::    Attributes of @class{mbfl_invalid_object_attrib_value_condition}.
@end menu

@c page
@node conditions invalid attrib value class
@subsection Class definition of @class{mbfl_invalid_object_attrib_value_condition}


@deftp {Class} mbfl_invalid_object_attrib_value_condition
@deftpx {Proxy Variable} mbfl_invalid_object_attrib_value_condition_t
@deftpx {Superclass} mbfl_logic_error_condition_t
@deftpx {Metaclass} mbfl_default_class
Class describing invalid value to object's attribute exceptional--conditions.  Instances of this
class should be non--continuable.
@end deftp


@defop {Predicate} {mbfl_invalid_object_attrib_value_condition_t} mbfl_invalid_object_attrib_value_condition_p @var{DEFOBJ}
Return true if @var{DEFOBJ} is an instance of @class{mbfl_invalid_object_attrib_value_condition};
otherwise return false.

@example
mbfl_default_object_declare(CND)

mbfl_invalid_object_attrib_value_condition_make _(CND) 'someone' _(OBJ) 'red' 'ciao'
mbfl_invalid_object_attrib_value_condition_p _(CND)
@result{} 0
@end example
@end defop

@c page
@node conditions invalid attrib value constructors
@subsection Class constructors of @class{mbfl_invalid_object_attrib_value_condition}


@defop {Constructor} {mbfl_invalid_object_attrib_value_condition_t} mbfl_invalid_object_attrib_value_condition_make @var{CND} @var{WHO} @var{OBJ} @var{ATTRIBUTE_NAME} @var{INVALID_VALUE}
Define an object previously declared with @class{mbfl_default_object_declare} or similar.  The
condition is non--continuable by default.

@RefWhoConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.

@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.

@ref{@code{object} of @class{mbfl_invalid_object_attrib_value_condition}} for the semantics of the
parameter @var{OBJ}.

@ref{@code{attrib_name} of @class{mbfl_invalid_object_attrib_value_condition}} for the
semantics of the parameter @var{ATTRIBUTE_NAME}.

@ref{@code{invalid_value} of @class{mbfl_invalid_object_attrib_value_condition}} for the semantics
of the parameter @var{INVALID_VALUE}.

Let's say we have this class definition:

@example
mbfl_default_class_declare(COLOUR)

mbfl_default_class_define _(COLOUR) _(mbfl_default_object) 'colour_p' red green blue
@end example

@noindent
we want the field values to be integers; we can define a mutator as follows:

@example
function colour_red_set () @{
    mbfl_mandatory_nameref_parameter(OBJ, 1, colour object)
    mbfl_mandatory_parameter(RED, 2, red value)

    if mbfl_string_is_digit "$RED"
    then colour_p_red_set _(OBJ) "$RED"
    else
        mbfl_default_object_declare(CND)

        mbfl_invalid_object_attrib_value_condition_make _(CND) $FUNCNAME _(OBJ) 'red' "$RED"
        mbfl_exception_raise _(CND)
    fi
@}
@end example
@end defop


@defop {Constructor} {mbfl_invalid_object_attrib_value_condition_t} mbfl_invalid_object_attrib_value_condition_define @var{CND} @var{WHO} @var{CONTINUABLE} @var{OBJ} @var{ATTRIBUTE_NAME} @var{INVALID_VALUE}
Define an object previously declared with @class{mbfl_default_object_declare} or similar.  This is a
low--level constructor that should not be used only to define high--level constructors.

@RefWhoConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.

@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.

@ref{@code{object} of @class{mbfl_invalid_object_attrib_value_condition}} for the semantics of the
parameter @var{OBJ}.

@ref{@code{attrib_name} of @class{mbfl_invalid_object_attrib_value_condition}} for the
semantics of the parameter @var{ATTRIBUTE_NAME}.

@ref{@code{invalid_value} of @class{mbfl_invalid_object_attrib_value_condition}} for the semantics
of the parameter @var{INVALID_VALUE}.
@end defop

@c page
@node conditions invalid attrib value attributes
@subsection Attributes of @class{mbfl_invalid_object_attrib_value_condition}


@menu
* conditions invalid attrib value attributes who::           Attribute @code{who} of @class{mbfl_invalid_object_attrib_value_condition}.
* conditions invalid attrib value attributes continuable::   Attribute @code{continuable} of @class{mbfl_invalid_object_attrib_value_condition}.
* conditions invalid attrib value attributes object::        Attribute @code{object} of @class{mbfl_invalid_object_attrib_value_condition}.
* conditions invalid attrib value attributes attrib-name::   Attribute @code{attrib_name} of @class{mbfl_invalid_object_attrib_value_condition}.
* conditions invalid attrib value attributes invalid-value:: Attribute @code{invalid_value} of @class{mbfl_invalid_object_attrib_value_condition}.
@end menu

@c page
@node conditions invalid attrib value attributes who
@subsubsection Attribute @code{who} of @class{mbfl_invalid_object_attrib_value_condition}.


@RefWhoConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.


@defop {Accessor} {mbfl_invalid_object_attrib_value_condition_t} mbfl_invalid_object_attrib_value_condition_who_set @var{CND} @var{WHO}
@defopx {Mutator} {mbfl_invalid_object_attrib_value_condition_t} mbfl_invalid_object_attrib_value_condition_who_var @var{WHO_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions invalid attrib value attributes continuable
@subsubsection Attribute @code{continuable} of @class{mbfl_invalid_object_attrib_value_condition}


@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.


@defop {Accessor} {mbfl_invalid_object_attrib_value_condition_t} mbfl_invalid_object_attrib_value_condition_continuable_set @var{CND} @var{CONTINUABLE}
@defopx {Mutator} {mbfl_invalid_object_attrib_value_condition_t} mbfl_invalid_object_attrib_value_condition_continuable_var @var{CONTINUABLE_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions invalid attrib value attributes object
@subsubsection Attribute @code{object} of @class{mbfl_invalid_object_attrib_value_condition}


@anchor{@code{object} of @class{mbfl_invalid_object_attrib_value_condition}}
@defcv {Class Attribute} {mbfl_invalid_object_attrib_value_condition_t} object
The data variable of the object whose attribute we tried to set to an invalid value.
@end defcv


@defop {Accessor} {mbfl_invalid_object_attrib_value_condition_t} mbfl_invalid_object_attrib_value_condition_object_set @var{CND} @var{OBJ}
@defopx {Mutator} {mbfl_invalid_object_attrib_value_condition_t} mbfl_invalid_object_attrib_value_condition_object_var @var{OBJ_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions invalid attrib value attributes attrib-name
@subsubsection Attribute @code{attrib_name} of @class{mbfl_invalid_object_attrib_value_condition}


@anchor{@code{attrib_name} of @class{mbfl_invalid_object_attrib_value_condition}}
@defcv {Class Attribute} {mbfl_invalid_object_attrib_value_condition_t} attrib_name
A string representing the attribute name.
@end defcv


@defop {Accessor} {mbfl_invalid_object_attrib_value_condition_t} mbfl_invalid_object_attrib_value_condition_attrib_name_set @var{CND} @var{NAME}
@defopx {Mutator} {mbfl_invalid_object_attrib_value_condition_t} mbfl_invalid_object_attrib_value_condition_attrib_name_var @var{NAME_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions invalid attrib value attributes invalid-value
@subsubsection Attribute @code{invalid_value} of @class{mbfl_invalid_object_attrib_value_condition}


@anchor{@code{invalid_value} of @class{mbfl_invalid_object_attrib_value_condition}}
@defcv {Class Attribute} {mbfl_invalid_object_attrib_value_condition_t} invalid_value
A string representing the invalid value.
@end defcv


@defop {Accessor} {mbfl_invalid_object_attrib_value_condition_t} mbfl_invalid_object_attrib_value_condition_invalid_value_set @var{CND} @var{INVALID_VALUE}
@defopx {Mutator} {mbfl_invalid_object_attrib_value_condition_t} mbfl_invalid_object_attrib_value_condition_invalid_value_var @var{INVALID_VALUE_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions location outside
@section Invalid operation outside location exceptional--condition objects


@dfn{Invalid operation outside location exceptional--conditions} are used to signal a programming
error.  For example: an attempt to push a location handler outside any location.  We can use them as
follows:

@example
mbfl_default_object_declare(CND)

mbfl_outside_location_condition_make _(CND) 'someone' 'attempt to push a handler outside any location'
mbfl_exception_raise _(CND)
@end example

Usually when an exceptional--condition of this class is raised, the correct handling is to: attempt
a clean release of all the resources; inform the user; terminate the program with an appropriate
exit status.

@menu
* conditions location outside class::         Class definition of @class{mbfl_outside_location_condition}.
* conditions location outside constructors::  Class constructors of @class{mbfl_outside_location_condition}.
* conditions location outside attributes::    Attributes of @class{mbfl_outside_location_condition}.
@end menu

@c page
@node conditions location outside class
@subsection Class definition of @class{mbfl_outside_location_condition}


@deftp {Class} mbfl_outside_location_condition
@deftpx {Proxy Variable} mbfl_outside_location_condition_t
@deftpx {Superclass} mbfl_logic_error_condition_t
@deftpx {Metaclass} mbfl_default_class
Class describing invalid operation outside a location exceptional--conditions.  Instances of this
class should be non--continuable.
@end deftp


@defop {Predicate} {mbfl_outside_location_condition_t} mbfl_outside_location_condition_p @var{DEFOBJ}
Return true if @var{DEFOBJ} is an instance of @class{mbfl_outside_location_condition}; otherwise
return false.

@example
mbfl_default_object_declare(CND)

mbfl_outside_location_condition_make _(CND) 'someone' 'my bad'
mbfl_outside_location_condition_p _(CND)
@result{} 0
@end example
@end defop

@c page
@node conditions location outside constructors
@subsection Class constructors of @class{mbfl_outside_location_condition}


@defop {Constructor} {mbfl_outside_location_condition_t} mbfl_outside_location_condition_make @var{CND} @var{WHO} @var{MESSAGE}
Define an object previously declared with @class{mbfl_default_object_declare} or similar.  Objects
built with this constructor are non--continuable by default.

@RefWhoConditionAttribute{} for the semantics of the parameter @var{WHO}.

@RefMessageConditionAttribute{} for the semantics of the parameter @var{MESSAGE}.
@end defop


@defop {Constructor} {mbfl_outside_location_condition_t} mbfl_outside_location_condition_define @var{CND} @var{WHO} @var{MESSAGE} @var{CONTINUABLE}
Define an object previously declared with @class{mbfl_default_object_declare} or similar.  This is a
low--level constructor that does not validate its parameters; it should be used by client code only
to define high--level constructors.

@RefWhoConditionAttribute{} for the semantics of the parameter @var{WHO}.

@RefMessageConditionAttribute{} for the semantics of the parameter @var{MESSAGE}.

@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.
@end defop

@c page
@node conditions location outside attributes
@subsection Attributes of @class{mbfl_outside_location_condition}


@menu
* conditions location outside attributes who::           Attribute @code{who} of @class{mbfl_outside_location_condition}.
* conditions location outside attributes message::       Attribute @code{message} of @class{mbfl_outside_location_condition}.
* conditions location outside attributes continuable::   Attribute @code{continuable} of @class{mbfl_outside_location_condition}.
@end menu

@c page
@node conditions location outside attributes who
@subsubsection Attribute @code{who} of @class{mbfl_outside_location_condition}


@RefWhoConditionAttribute{} for the semantics of the parameter @var{WHO}.


@defop {Accessor} {mbfl_outside_location_condition_t} mbfl_outside_location_condition_who_set @var{CND} @var{WHO}
@defopx {Mutator} {mbfl_outside_location_condition_t} mbfl_outside_location_condition_who_var @var{WHO_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions location outside attributes message
@subsubsection Attribute @code{message} of @class{mbfl_outside_location_condition}


@RefMessageConditionAttribute{} for the semantics of the parameter @var{MESSAGE}.


@defop {Accessor} {mbfl_outside_location_condition_t} mbfl_outside_location_condition_message_set @var{CND} @var{MESSAGE}
@defopx {Mutator} {mbfl_outside_location_condition_t} mbfl_outside_location_condition_message_var @var{MESSAGE_STRING_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions location outside attributes continuable
@subsubsection Attribute @code{continuable} of @class{mbfl_outside_location_condition}


@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.


@defop {Accessor} {mbfl_outside_location_condition_t} mbfl_outside_location_condition_continuable_set @var{CND} @var{CONTINUABLE}
@defopx {Mutator} {mbfl_outside_location_condition_t} mbfl_outside_location_condition_continuable_var @var{CONTINUABLE_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions wrong parm number
@section Wrong parameters number to function call exceptional--condition objects


@dfn{Wrong parameters number to function call exceptional--conditions} are used to signal a
programming error.  Example:

@example
function myfunc () @{
    if ((3 > $#))
    then
        mbfl_default_object_declare(CND)

        mbfl_wrong_parameters_number_condition_make _(CND) $FUNCNAME 3 $#
        mbfl_exception_raise_then_return_failure(_(CND))
    fi

    mbfl_mandatory_parameter(ALPHA, 1, the alpha)
    mbfl_mandatory_parameter(BETA,  2, the beta)
    mbfl_mandatory_parameter(GAMMA, 3, the gamma)
    mbfl_optional_parameter(DELTA, 4)

    # do something
@}
@end example

@noindent
which we can abbreviate with:

@example
function myfunc () @{
    mbfl_check_mandatory_parameters_number(3)
    mbfl_mandatory_parameter(ALPHA, 1, the alpha)
    mbfl_mandatory_parameter(BETA,  2, the beta)
    mbfl_mandatory_parameter(GAMMA, 3, the gamma)
    mbfl_optional_parameter(DELTA, 4)

    # do something
@}
@end example

Usually when an exceptional--condition of this class is raised, the correct handling is to: attempt
a clean release of all the resources; inform the user; terminate the program with an appropriate
exit status.

@menu
* conditions wrong parm number class::         Class definition of @class{mbfl_wrong_parameters_number_condition}.
* conditions wrong parm number constructors::  Class constructors of @class{mbfl_wrong_parameters_number_condition}.
* conditions wrong parm number attributes::    Attributes of @class{mbfl_wrong_parameters_number_condition}.
@end menu

@c page
@node conditions wrong parm number class
@subsection Class definition of @class{mbfl_wrong_parameters_number_condition}


@deftp {Class} mbfl_wrong_parameters_number_condition
@deftpx {Proxy Variable} mbfl_wrong_parameters_number_condition_t
@deftpx {Superclass} mbfl_logic_error_condition_t
@deftpx {Metaclass} mbfl_default_class
Class describing a programming error.  Instances of this class should be non--continuable.
@end deftp


@defop {Predicate} {mbfl_wrong_parameters_number_condition_t} mbfl_wrong_parameters_number_condition_p @var{DEFOBJ}
Return true if @var{DEFOBJ} is an instance of @class{mbfl_wrong_parameters_number_condition};
otherwise return false.
@end defop

@c page
@node conditions wrong parm number constructors
@subsection Class constructors of @class{mbfl_wrong_parameters_number_condition}


@defop {Constructor} {mbfl_wrong_parameters_number_condition_t} mbfl_wrong_parameters_number_condition_make @var{CND} @var{FUNCNAME} @var{GIVEN_NUMBER} @var{EXPECTED_MIN_NUMBER}
@defopx {Constructor} {mbfl_wrong_parameters_number_condition_t} mbfl_wrong_parameters_number_condition_make @var{CND} @var{FUNCNAME} @var{GIVEN_NUMBER} @var{EXPECTED_MIN_NUMBER} @var{EXPECTED_MAX_NUMBER}
Build a new class instance.  Exceptional--condition objects built with this constructor are
non--continuable.

The parameter @var{FUNCNAME} must be the name of the function; it is usually the value of the Bash
variable @env{FUNCNAME}.

The parameter @var{GIVEN_NUMBER} must an integer representing the number of parameters given in a
function call.

The parameter @var{EXPECTED_MIN_NUMBER} must be an integer representing the minimum number of
mandatory parameters.

The optional parameter @var{EXPECTED_MAX_NUMBER} must be an integer representing the maximum number
of parameters, mandatory plus optional.  When not given: it defaults to @samp{9999}.
@end defop


@deffn {Preprocessor Macro} mbfl_check_mandatory_parameters_number (@var{EXPECTED_MIN_NUMBER})
@deffnx {Preprocessor Macro} mbfl_check_mandatory_parameters_number (@var{EXPECTED_MIN_NUMBER}, @var{EXPECTED_MAX_NUMBER})
When used with one parameter, expand as follows:

@example
mbfl_check_mandatory_parameters_number(@var{EXPECTED_NUMBER})
@expansion{} if ((@var{EXPECTED_NUMBER} > $#))
    then
        mbfl_default_object_declare(CND)

        mbfl_wrong_parameters_number_condition_make _(CND) $FUNCNAME @var{EXPECTED_NUMBER} 9999 $#
        mbfl_exception_raise_then_return_failure(_(CND))
    fi
@end example

When used with two parameters, expand as follows:

@example
mbfl_check_mandatory_parameters_number(@var{EXPECTED_MIN_NUMBER}, @var{EXPECTED_MAX_NUMBER})
@expansion{} if (( $# > @var{EXPECTED_MAX_NUMBER} || @var{EXPECTED_MIN_NUMBER} > $# ))
    then
        mbfl_default_object_declare(CND)

        mbfl_wrong_parameters_number_condition_make _(CND) $FUNCNAME @var{EXPECTED_MIN_NUMBER} @var{EXPECTED_MAX_NUMBER} $#
        mbfl_exception_raise_then_return_failure(_(CND))
    fi
@end example
@end deffn

@c page
@node conditions wrong parm number attributes
@subsection Attributes of @class{mbfl_wrong_parameters_number_condition}


@menu
* conditions wrong parm number attributes who::               Attribute @code{who} of @class{mbfl_wrong_parameters_number_condition}.
* conditions wrong parm number attributes message::           Attribute @code{message} of @class{mbfl_wrong_parameters_number_condition}.
* conditions wrong parm number attributes continuable::       Attribute @code{continuable} of @class{mbfl_wrong_parameters_number_condition}.
* conditions wrong parm number attributes expected_min_number:: Attribute @code{expected_min_number} of @class{mbfl_wrong_parameters_number_condition}.
* conditions wrong parm number attributes expected_max_number:: Attribute @code{expected_max_number} of @class{mbfl_wrong_parameters_number_condition}.
* conditions wrong parm number attributes given_number::      Attribute @code{given_number} of @class{mbfl_wrong_parameters_number_condition}.
@end menu

@c page
@node conditions wrong parm number attributes who
@subsubsection Attribute @code{who} of @class{mbfl_wrong_parameters_number_condition}


@RefWhoConditionAttribute{} for the semantics of the parameter @var{WHO}.


@defop {Accessor} {mbfl_wrong_parameters_number_condition_t} mbfl_wrong_parameters_number_condition_who_set @var{CND} @var{WHO}
@defopx {Mutator} {mbfl_wrong_parameters_number_condition_t} mbfl_wrong_parameters_number_condition_who_var @var{WHO_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions wrong parm number attributes message
@subsubsection Attribute @code{message} of @class{mbfl_wrong_parameters_number_condition}


@RefMessageConditionAttribute{} for the semantics of the parameter @var{MESSAGE}.


@defop {Accessor} {mbfl_wrong_parameters_number_condition_t} mbfl_wrong_parameters_number_condition_message_set @var{CND} @var{MESSAGE}
@defopx {Mutator} {mbfl_wrong_parameters_number_condition_t} mbfl_wrong_parameters_number_condition_message_var @var{MESSAGE_STRING_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions wrong parm number attributes continuable
@subsubsection Attribute @code{continuable} of @class{mbfl_wrong_parameters_number_condition}


@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.


@defop {Accessor} {mbfl_wrong_parameters_number_condition_t} mbfl_wrong_parameters_number_condition_continuable_set @var{CND} @var{CONTINUABLE}
@defopx {Mutator} {mbfl_wrong_parameters_number_condition_t} mbfl_wrong_parameters_number_condition_continuable_var @var{CONTINUABLE_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions wrong parm number attributes expected_min_number
@subsubsection Attribute @code{expected_number} of @class{mbfl_wrong_parameters_number_condition}


@anchor{@code{expected_min_number} of @class{mbfl_wrong_parameters_number_condition}}
@defcv {Class Attribute} {mbfl_wrong_parameters_number_condition_t} expected_min_number
The mandatory number of parameters for a function call.
@end defcv


@defop {Accessor} {mbfl_wrong_parameters_number_condition_t} mbfl_wrong_parameters_number_condition_expected_min_number_set @var{CND} @var{EXPECTED_MIN_NUMBER}
@defopx {Mutator} {mbfl_wrong_parameters_number_condition_t} mbfl_wrong_parameters_number_condition_expected_min_number_var @var{EXPECTED_MIN_NUMBER_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions wrong parm number attributes expected_max_number
@subsubsection Attribute @code{expected_number} of @class{mbfl_wrong_parameters_number_condition}


@anchor{@code{expected_max_number} of @class{mbfl_wrong_parameters_number_condition}}
@defcv {Class Attribute} {mbfl_wrong_parameters_number_condition_t} expected_max_number
The mandatory number of parameters for a function call.
@end defcv


@defop {Accessor} {mbfl_wrong_parameters_number_condition_t} mbfl_wrong_parameters_number_condition_expected_max_number_set @var{CND} @var{EXPECTED_MAX_NUMBER}
@defopx {Mutator} {mbfl_wrong_parameters_number_condition_t} mbfl_wrong_parameters_number_condition_expected_max_number_var @var{EXPECTED_MAX_NUMBER_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions wrong parm number attributes given_number
@subsubsection Attribute @code{given_number} of @class{mbfl_wrong_parameters_number_condition}


@anchor{@code{given_number} of @class{mbfl_wrong_parameters_number_condition}}
@defcv {Class Attribute} {mbfl_wrong_parameters_number_condition_t} given_number
The number of parameters given in a function call.
@end defcv


@defop {Accessor} {mbfl_wrong_parameters_number_condition_t} mbfl_wrong_parameters_number_condition_given_number_set @var{CND} @var{GIVEN_NUMBER}
@defopx {Mutator} {mbfl_wrong_parameters_number_condition_t} mbfl_wrong_parameters_number_condition_given_number_var @var{GIVEN_NUMBER_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions invalid parameter
@section Invalid parameter to function call exceptional--condition objects


@dfn{Invalid parameter to function call exceptional--conditions} are used to signal a programming
error.  Example:

@example
function myfunc () @{
    mbfl_mandatory_parameter(MOOD, 1, the mood)

    if ! some_predicate "$MOOD"
    then
        mbfl_default_object_declare(CND)

        mbfl_invalid_function_parameter_condition_make _(CND) \
            $FUNCNAME 'expected good value' 1 'MOOD' "$MOOD"
        mbfl_exception_raise _(CND)
        return_because_failure
    fi

    # do something
@}
@end example

Usually when an exceptional--condition of this class is raised, the correct handling is to: attempt
a clean release of all the resources; inform the user; terminate the program with an appropriate
exit status.

@menu
* conditions invalid parameter class::         Class definition of @class{mbfl_invalid_function_parameter_condition}.
* conditions invalid parameter constructors::  Class constructors of @class{mbfl_invalid_function_parameter_condition}.
* conditions invalid parameter attributes::    Attributes of @class{mbfl_invalid_function_parameter_condition}.
@end menu

@c page
@node conditions invalid parameter class
@subsection Class definition of @class{mbfl_invalid_function_parameter_condition}


@deftp {Class} mbfl_invalid_function_parameter_condition
@deftpx {Proxy Variable} mbfl_invalid_function_parameter_condition_t
@deftpx {Superclass} mbfl_logic_error_condition_t
@deftpx {Metaclass} mbfl_default_class
Class describing invalid parameter to function call exceptional--conditions.  Instances of this
class should be non--continuable.
@end deftp


@defop {Predicate} {mbfl_invalid_function_parameter_condition_t} mbfl_invalid_function_parameter_condition_p @var{DEFOBJ}
Return true if @var{DEFOBJ} is an instance of @class{mbfl_invalid_function_parameter_condition};
otherwise return false.
@end defop

@c page
@node conditions invalid parameter constructors
@subsection Class constructors of @class{mbfl_invalid_function_parameter_condition}


@defop {Constructor} {mbfl_invalid_function_parameter_condition_t} mbfl_invalid_function_parameter_condition_make @var{CND} @var{FUNCNAME} @var{ERROR_DESCRIPTION} @var{PARAMETER_NUMBER} @var{PARAMETER_NAME} @var{PARAMETER_VALUE}
Build a new class instance.  Exceptional--condition objects built with this constructor are
non--continuable.

The parameter @var{FUNCNAME} must be the name of the function; it is usually the value of the Bash
variable @env{FUNCNAME}.

The parameter @var{ERROR_DESCRIPTION} must be a string describing why the parameter is invalid; it
should be something like @code{expected value of type ... got ...}.

The parameter @var{PARAMETER_NUMBER} must be the 1--based parameter's number.

The parameter @var{PARAMETER_NAME} must be the parameter's identifier.

The parameter @var{PARAMETER_VALUE} must be the invalid parameter's value; it can be the empty string.
@end defop

@c page
@node conditions invalid parameter attributes
@subsection Attributes of @class{mbfl_invalid_function_parameter_condition}


@menu
* conditions invalid parameter attributes who::               Attribute @code{who} of @class{mbfl_invalid_function_parameter_condition}.
* conditions invalid parameter attributes message::           Attribute @code{message} of @class{mbfl_invalid_function_parameter_condition}.
* conditions invalid parameter attributes continuable::       Attribute @code{continuable} of @class{mbfl_invalid_function_parameter_condition}.
* conditions invalid parameter attributes error_description:: Attribute @code{error_description} of @class{mbfl_invalid_function_parameter_condition}.
* conditions invalid parameter attributes parameter_number::  Attribute @code{parameter_number} of @class{mbfl_invalid_function_parameter_condition}.
* conditions invalid parameter attributes parameter_name::    Attribute @code{parameter_name} of @class{mbfl_invalid_function_parameter_condition}.
* conditions invalid parameter attributes parameter_value::   Attribute @code{parameter_value} of @class{mbfl_invalid_function_parameter_condition}.
@end menu

@c page
@node conditions invalid parameter attributes who
@subsubsection Attribute @code{who} of @class{mbfl_invalid_function_parameter_condition}


@RefWhoConditionAttribute{} for the semantics of the parameter @var{WHO}.


@defop {Accessor} {mbfl_invalid_function_parameter_condition_t} mbfl_invalid_function_parameter_condition_who_set @var{CND} @var{WHO}
@defopx {Mutator} {mbfl_invalid_function_parameter_condition_t} mbfl_invalid_function_parameter_condition_who_var @var{WHO_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions invalid parameter attributes message
@subsubsection Attribute @code{message} of @class{mbfl_invalid_function_parameter_condition}


@RefMessageConditionAttribute{} for the semantics of the parameter @var{MESSAGE}.


@defop {Accessor} {mbfl_invalid_function_parameter_condition_t} mbfl_invalid_function_parameter_condition_message_set @var{CND} @var{MESSAGE}
@defopx {Mutator} {mbfl_invalid_function_parameter_condition_t} mbfl_invalid_function_parameter_condition_message_var @var{MESSAGE_STRING_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions invalid parameter attributes continuable
@subsubsection Attribute @code{continuable} of @class{mbfl_invalid_function_parameter_condition}


@RefContinuableConditionAttribute{} for the semantics of the parameter @var{CONTINUABLE}.


@defop {Accessor} {mbfl_invalid_function_parameter_condition_t} mbfl_invalid_function_parameter_condition_continuable_set @var{CND} @var{CONTINUABLE}
@defopx {Mutator} {mbfl_invalid_function_parameter_condition_t} mbfl_invalid_function_parameter_condition_continuable_var @var{CONTINUABLE_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions invalid parameter attributes error_description
@subsubsection Attribute @code{error_description} of @class{mbfl_invalid_function_parameter_condition}


@anchor{@code{error_description} of @class{mbfl_invalid_function_parameter_condition}}
@defcv {Class Attribute} {mbfl_invalid_function_parameter_condition_t} error_description
A string describing what is wrong with the given parameter to function call.
@end defcv


@defop {Accessor} {mbfl_invalid_function_parameter_condition_t} mbfl_invalid_function_parameter_condition_error_description_set @var{CND} @var{ERROR_DESCRIPTION}
@defopx {Mutator} {mbfl_invalid_function_parameter_condition_t} mbfl_invalid_function_parameter_condition_error_description_var @var{ERROR_DESCRIPTION_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions invalid parameter attributes parameter_number
@subsubsection Attribute @code{parameter_number} of @class{mbfl_invalid_function_parameter_condition}


@anchor{@code{parameter_number} of @class{mbfl_invalid_function_parameter_condition}}
@defcv {Class Attribute} {mbfl_invalid_function_parameter_condition_t} parameter_number
The 1--based parameter number.
@end defcv


@defop {Accessor} {mbfl_invalid_function_parameter_condition_t} mbfl_invalid_function_parameter_condition_parameter_number_set @var{CND} @var{PARAMETER_NUMBER}
@defopx {Mutator} {mbfl_invalid_function_parameter_condition_t} mbfl_invalid_function_parameter_condition_parameter_number_var @var{PARAMETER_NUMBER_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions invalid parameter attributes parameter_name
@subsubsection Attribute @code{parameter_name} of @class{mbfl_invalid_function_parameter_condition}


@anchor{@code{parameter_name} of @class{mbfl_invalid_function_parameter_condition}}
@defcv {Class Attribute} {mbfl_invalid_function_parameter_condition_t} parameter_name
A string representing the parameter name.
@end defcv


@defop {Accessor} {mbfl_invalid_function_parameter_condition_t} mbfl_invalid_function_parameter_condition_parameter_name_set @var{CND} @var{PARAMETER_NAME}
@defopx {Mutator} {mbfl_invalid_function_parameter_condition_t} mbfl_invalid_function_parameter_condition_parameter_name_var @var{PARAMETER_NAME_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node conditions invalid parameter attributes parameter_value
@subsubsection Attribute @code{parameter_value} of @class{mbfl_invalid_function_parameter_condition}


@anchor{@code{parameter_value} of @class{mbfl_invalid_function_parameter_condition}}
@defcv {Class Attribute} {mbfl_invalid_function_parameter_condition_t} parameter_value
The string representing the invalid parameter to function call.
@end defcv


@defop {Accessor} {mbfl_invalid_function_parameter_condition_t} mbfl_invalid_function_parameter_condition_parameter_value_set @var{CND} @var{PARAMETER_VALUE}
@defopx {Mutator} {mbfl_invalid_function_parameter_condition_t} mbfl_invalid_function_parameter_condition_parameter_value_var @var{PARAMETER_VALUE_RV} @var{CND}
Attribute accessor and mutator.
@end defop

@c page
@node exceptions
@chapter Raising and handling exceptions


Exceptions handling is a technique to handle exceptional conditions in the execution of a script;
errors are a special case of exceptional conditions.  It is useful whenever similar exceptional
conditions may happen in different portions of a script and similar handling procedures are
desirable.

@menu
* exceptions conventions::      Conventions.
* exceptions howto::            How to organise code to use @mbfl{} exceptions.
* exceptions raise::            How to raise exceptional-condition objects.
* exceptions handlers::         How to write and set exception-handlers.
@end menu

@c page
@node exceptions conventions
@section Conventions


@menu
* exceptions conventions underscore::   The underscore syntax.
@end menu

@c page
@node exceptions conventions underscore
@subsection The underscore syntax


In this chapter we use the underscore syntax as defined in @ref{objects conventions underscore, The
underscore syntax}.

@c page
@node exceptions howto
@section How to organise code to use @mbfl{} exceptions


Effective use of @mbfl{}'s exception--handling is intertwined with the location mechanism,
@ref{locations, Running location handlers}.

Exceptional conditions are described by instances of appropriate exceptional--condition classes,
@ref{conditions, Exceptional--condition objects}.  It is mandatory to use only
exceptional--condition objects whose class is a subclass of @class{mbfl_exceptional_condition}; no
other Bash value is allowed.

Whenever an exceptional--condition object is ``raised'' an exception--handling function is called to
react to it; such function is called @dfn{exception--handler}.  To raise an exceptional--condition
we apply the function @func{mbfl_exception_raise} to the object's data variable:

@example
if ! try_an_action 1 2 3
then
    mbfl_default_object_declare(CND)

    mbfl_runtime_error_condition_make _(CND) $FUNCNAME 'failed action'
    mbfl_exception_raise _(CND)
fi
@end example

@mbfl{} allows us to push exception--handlers onto a global stack, in such a way that handlers are
made ``local'' by removing them upon leaving the current location.  Here is how to write a function:

@example
function do_some_thing () @{
    mbfl_location_enter
    @{
        mbfl_exception_handler 'handle_some_exceptions'
        # do some thing
    @}
    mbfl_location_leave
@}
@end example

@noindent
while ``do some thing'' code is running: if an exception is raised, the exception--handler
@func{handle_some_exceptions} is applied to the exceptional--condition object; upon leaving the
location @func{handle_some_exceptions} is popped from the stack.

Compared to other languages: @mbfl{}'s exception--handling is peculiar because, under Bash, there is
no automatic call stack unwinding; when needed we must @code{return} from all the functions until we
reach a ``beginning of task'' function.  We must partition the code into an appropriate number of
nested functions.  We can organise code as follows:

@example
function main () @{
    declare -i RETURN_STATUS

    perform_an_operation
    RETURN_STATUS=$?
    if (( 0 != RETURN_STATUS ))
    then exit_failure
    fi
    exit_success
@}
function perform_an_operation () @{
    mbfl_location_enter
    @{
        mbfl_exception_handler 'an_exception_handler'

        if ! operation_step_one
        then
            mbfl_location_leave
            return_because_reason
        fi

        if ! operation_step_two
        then
            mbfl_location_leave
            return_because_another_reason
        fi
    @}
    mbfl_location_leave
    return_success
@}
function operation_step_one () @{
    mbfl_location_enter
    @{
        mbfl_exception_handler 'another_exception_handler'

        if ! do_some_thing
        then
            if ! raise_an_exception
            then
                mbfl_location_leave
                return_because_bad_reason
            fi
        fi

        if ! do_some_other_thing
        then
            if ! raise_another_exception
            then
                mbfl_location_leave
                return_because_another_bad_reason
            fi
        fi
    @}
    mbfl_location_leave
    return_success
@}
@end example

We can push any number of handlers in each location:

@example
function perform_an_operation () @{
    mbfl_location_enter
    @{
        mbfl_exception_handler 'an_exception_handler'
        mbfl_exception_handler 'another_exception_handler'
        # do some thing
    @}
    mbfl_location_leave
    return_success
@}
@end example

@noindent
whenever an exceptional--condition is raised: the topmost handler is applied to the object; it
might:

@itemize
@item
handle the exception then exit the script;

@item
handle the exception then return signalling that script's execution can go on;

@item
handle the exception then return signalling that script's execution cannot go on;

@item
return signalling that the exception was not handled;
@end itemize

@noindent
in the last case: the next handler from the stack is applied to the object and so on until some
handler handles the exception.  A default handler is pushed to the stack upon @mbfl{} loading--time:
if it is called, it might terminate the script with a ``uncaught exception'' exit status.

@c page
@node exceptions raise
@section How to raise exceptional--condition objects


@defun mbfl_exception_raise @var{CND}
Raise an exceptional condition represented by @var{CND}, which must be an object whose class is a
subclass of @class{mbfl_exceptional_condition}, @ref{conditions base, Base exceptional--condition
objects}.

Starting from the top of exception--handlers's stack: apply the next handler to @var{CND}.  The
handler should try to react to the exception.

@itemize
@item
The handler might exit the script.

@item
If the handler returns using @code{return_success_after_handling_exception}: it matters if the
exceptional--condition object is continuable, @RefContinuableConditionAttribute{}.

@itemize -
@item
If @var{CND} is continuable: @func{mbfl_exception_raise} will return to the caller with return
status @samp{0}; this should resume script's execution.

@item
If @var{CND} is non--continuable: @func{mbfl_exception_raise} will call
@func{exit_because_non_continuable_exception}; this will exit the script after running the atexit
scripts, if we have enabled them; @ref{exit atexit, Running scripts at exit--time}.
@end itemize

@item
If the handler returns using @code{return_failure_after_handling_exception}:
@func{mbfl_exception_raise} returns to its caller with @code{return_failure}; this is meant to cause
the calling functions to return with failure status up until the ``beginning of task'' position in
the script.

@item
If the handler returns using @code{return_after_not_handling_exception}: @func{mbfl_exception_raise}
will apply to @var{CND} the next handler from the stack.  If no client exception--handler returns
successfully: the default exception--handler will call @func{exit_because_uncaught_exception}.
@end itemize
@end defun


@deffn {Preprocessor Macro} mbfl_exception_raise_then_return_failure (@var{CND})
Expand as follows:

@example
mbfl_exception_raise_then_return_failure(@var{CND})
@expansion{} @{ mbfl_exception_raise @var{CND} ; return_because_failure ; @}
@end example
@end deffn

@c page
@node exceptions handlers
@section How to write and set exception--handlers


An exception--handler function typically handles just a few exceptional--condition classes; every
exception--handler must return using one among:

@example
return_success_after_handling_exception
return_failure_after_handling_exception
return_after_not_handling_exception
@end example

The basic template of an exception--handler is as follows:

@example
function my_exception_handler () @{
    mbfl_mandatory_nameref_parameter(CND, 1, exceptional-condition object)

    if spiffy_condition_p _(CND)
    then
        do_some_thing _(CND)
        if handled_successfully
        then return_success_after_handling_exception
        else return_failure_after_handling_exception
        fi
    else return_after_not_handling_exception
    fi
@}
@end example

@noindent
most exceptional--condition objects are non--continuable: it is not possible to resume script's
execution after handling them; so we should just use @code{return_failure_after_handling_exception}.


@defun mbfl_exception_handler @var{HANDLER}
Push @var{HANDLER} on the stack of exceptional--condition handlers.  Register a location handler
that pops @var{HANDLER} from the stack upon leaving the current location,
@ref{mbfl_location_handler, Locations programming interface}.

The parameter @var{HANDLER} should be an applicable identifier bound to a function, alias or
command; it must accept a single mandatory parameter:

@example
@var{HANDLER} @var{CONDITION_OBJECT}
@end example
@end defun


@defun mbfl_default_exception_handler @var{CND}
The default exception--handler; it is pushed on the global exception--handlers stack upon loading
@mbfl{}'s core library.  We can think of it as having the following implementation:

@example
mbfl_mandatory_nameref_parameter(mbfl_CND, 1, exceptional-condition object)

if mbfl_warning_condition_p _(mbfl_CND) &&
   mbfl_exceptional_condition_is_continuable _(mbfl_CND)
then
    mbfl_exceptional_condition_print _(mbfl_CND) >&2
    return_success_after_handling_exception
elif mbfl_uncaught_exceptional_condition_p _(mbfl_CND)
then
    mbfl_exceptional_condition_print _(mbfl_CND) >&2
    exit_because_uncaught_exception
else
    mbfl_default_object_declare(mbfl_ENVELOPE_CND)

    mbfl_uncaught_exceptional_condition_make _(mbfl_ENVELOPE_CND) $FUNCNAME _(mbfl_CND)
    mbfl_exception_raise _(mbfl_ENVELOPE_CND)
fi
@end example

Notice that if the default handler raises an ``uncaught exceptional--condition'': the topmost
exception--handler from the stack is applied to it; the exception--handlers we install have a chance
to handle the uncaught exceptional--condition.  @ref{conditions uncaught, Uncaught
exceptional-condition objects}.
@end defun


@anchor{return_success_after_handling_exception}
@deffn Alias return_success_after_handling_exception
Return from an exception handler with a return status signalling to @func{mbfl_exception_raise} that
the exceptional--condition has been handled and that the script can resume execution.
@end deffn


@anchor{return_failure_after_handling_exception}
@deffn Alias return_failure_after_handling_exception
Return from an exception handler with a return status signalling to @func{mbfl_exception_raise} that
the exceptional--condition has been handled but the script cannot resume execution.
@end deffn


@anchor{return_after_not_handling_exception}
@deffn Alias return_after_not_handling_exception
Return from an exception handler with a return status signalling to @func{mbfl_exception_raise} that
the exceptional--condition has not been handled.
@end deffn


@anchor{exit_because_uncaught_exception}
@defun exit_because_uncaught_exception
Exit with code @code{87} by calling @func{mbfl_exit}.
@end defun


@anchor{exit_because_non_continuable_exception}
@defun exit_because_non_continuable_exception
Exit with code @code{86} by calling @func{mbfl_exit}.
@end defun

@c page
@node strings
@chapter Manipulating strings with functions


@menu
* strings quote::               Quoted characters.
* strings inspection::          Inspecting a string.
* strings splitting::           Splitting a string.
* strings case::                Converting between upper and lower case.
* strings class::               Matching a string with a class.
* strings comparison::          Comparing strings.
* strings encoding::            Encoding and decoding strings.
* strings stripping::           Stripping substrings from strings.
* strings normalisation::       Normalising strings.
* strings misc::                Miscellaneous functions.
@end menu

@c page
@node strings quote
@section Quoted characters


@defun mbfl_string_is_quoted_char @var{STRING} @var{POSITION}
Return true if the character at @var{POSITION} in @var{STRING} is quoted; else return false.  A
character is considered quoted if it is preceded by an odd number of backslashes (@code{\}).
@var{POSITION} is a zero--based index.

@example
mbfl_string_is_quoted_char 'abcdefg'  3 @ExitCode{} 1
mbfl_string_is_quoted_char 'ab\cdefg' 3 @ExitCode{} 0
mbfl_string_is_quoted_char 'ab\ndefg' 3 @ExitCode{} 0
@end example
@end defun


@defun mbfl_string_is_equal_unquoted_char @var{STRING} @var{POSITION} @var{CHAR}
Return true if the character at @var{POSITION} in @var{STRING} is equal to @var{CHAR} and is not
quoted (according to @func{mbfl_string_is_quoted_char}); else return false.  @var{POSITION} is a
zero--based index.

@example
mbfl_string_is_equal_unquoted_char abcdefg 3 d
@ExitCode{} 0

mbfl_string_is_equal_unquoted_char 'abc\defg' 3 d
@ExitCode{} 1
@end example
@end defun


@defun mbfl_string_quote @var{STRING}
@defunx mbfl_string_quote_var @var{_RV} @var{STRING}
Print @var{STRING} with quoted characters.  All the occurrences of the backslash character,
@code{\}, are substituted with a quoted backslash, @code{\\}.  Return true.

@DocVarVariant{}

@example
mbfl_string_quote \\a\\b\\c     @print{} \\\\a\\\\b\\\\c
mbfl_string_quote abc           @print{} abc
mbfl_string_quote "a b\tc\n\r"  @print{} a\ b\\\\tc\\\\n\\\\r

local _RV
mbfl_string_quote_var _RV \\a\\b\\c
"$_RV"   @result{} \\\\a\\\\b\\\\c
@end example
@end defun

@c page
@node strings inspection
@section Inspecting a string


@menu
* strings inspection length::   Determining the length of strings.
* strings inspection empty::    Determining if a string is empty.
* strings inspection extract::  Extracting characters and ranges from strings.
* strings inspection search::   Searching characters in strings.
@end menu

@c page
@node strings inspection length
@subsection Determining the length of strings


@deffn {Preprocessor Macros} mbfl_string_len (@var{VAR})
Expands into the expression:

@example
$@{#@var{VAR}@}
@end example

@noindent
which evaluates to the number of characters in the string in the variable @var{VAR}.
@end deffn


@defun mbfl_string_length @var{STRING}
Print an integer representing the length of @var{STRING}.  The argument @var{STRING} can be an empty
string.
@end defun


@defun mbfl_string_length_equal_to @var{LENGTH} @var{STRING}
Return successfully if @var{STRING} has length equal to @var{LENGTH}.  The argument @var{LENGTH}
must be a non-negative integer; the argument @var{STRING} can be an empty string.
@end defun

@c page
@node strings inspection empty
@subsection Determining if a string is empty


@deffn {Preprocessor Macros} mbfl_string_empty (@var{VAR})
Expand into the expression:

@example
@{ test $@{#@var{VAR}@} -eq 0; @}
@end example

@noindent
which evaluates to true if the string value in the variable @var{VAR} @strong{is} the empty string.
@end deffn


@deffn {Preprocessor Macros} mbfl_string_not_empty (@var{VAR})
Expand into the expression:

@example
@{ test $@{#@var{VAR}@} -ne 0; @}
@end example

@noindent
which evaluates to true if the string value in the variable @var{VAR} @strong{is not} the empty
string.
@end deffn


@defun mbfl_string_is_empty @var{STRING}
Return successfully if @var{STRING} is empty.
@end defun


@defun mbfl_string_is_not_empty @var{STRING}
Return successfully if @var{STRING} is not empty.
@end defun

@c page
@node strings inspection extract
@subsection Extracting characters and ranges from strings


@deffn {Preprocessor Macros} mbfl_string_idx (@var{VAR}, @var{EXPR})
@deffnx {Preprocessor Macros} mbfl_string_qidx (@var{VAR}, @var{EXPR})
Rexpectively expand into the expressions:

@example
mbfl_string_idx(@var{VAR}, @var{EXPR})  @expansion{} $@{@var{VAR}:@var{EXPR}:1@}
mbfl_string_qidx(@var{VAR}, @var{EXPR}) @expansion{} "$@{@var{VAR}:@var{EXPR}:1@}"
@end example

@noindent
which evaluates to the character at index @var{EXPR} in the string in the variable @var{VAR}.
@end deffn


@deffn {Preprocessor Macro} mbfl_string_last_char (@var{VAR})
Expand into the expression:

@example
$@{$1:$(($@{#$1@} - 1)):1@}
@end example

@noindent
which, if it is not empty, evaluates to the last character of the string in the variable @var{VAR};
if the string empty: the result of the evaluation is the empty string.

Usage examples:

@example
@{
  local STR='ciao'
  test 'o' = mbfl_string_last_char(STR)
@}
@result{} 0

@{
  local STR=$'ciao\n'
  test $'\n' = "mbfl_string_last_char(STR)"
@}
@result{} 0

@{
  local -r STR=
  test '' = "mbfl_string_last_char(STR)"
@}
@result{} 0
@end example
@end deffn


@defun mbfl_string_index @var{STRING} @var{INDEX}
@defunx mbfl_string_index_var @var{_RV} @var{STRING} @var{INDEX}
Select a character from a string.  Echo to stdout the selected character.  If the index is out of
range: the empty string is echoed to stdout, that is: a newline is echoed to stdout.

@DocVarVariant{}

@example
mbfl_string_index abcdefghilm  0        @print{} a
mbfl_string_index abcdefghilm  4        @print{} e
mbfl_string_index abcdefghilm 10        @print{} m
mbfl_string_index abcdefghilm 11        @print{} <empty string>

local _RV
mbfl_string_index_var _RV abcdefghilm 0
"$_RV" @result{} a
@end example
@end defun


@defun mbfl_string_range @var{STRING} @var{BEGIN}
@defunx mbfl_string_range @var{STRING} @var{BEGIN} @var{END}
@defunx mbfl_string_range_var @var{_RV} @var{STRING} @var{BEGIN}
@defunx mbfl_string_range_var @var{_RV} @var{STRING} @var{BEGIN} @var{END}
Extract a range of characters from a string.  Arguments: @var{STRING}, the source string;
@var{BEGIN}, the index of the first character in the range; @var{END}, optional, the index of the
character past the last in the range, this character is not extracted.

@var{END} defaults to the string length; if the parameter @var{END} is set to the lowercase string
@code{end} or the uppercase string @code{END}: the end index is set to the string length.

Echo to stdout the selected range of characters, which may be the empty string.

@DocVarVariant{}

@example
mbfl_string_range abcdefghilm 0 end     @print{} abcdefghilm
mbfl_string_range abcdefghilm 0         @print{} abcdefghilm
mbfl_string_range abcdefghilm 0 4       @print{} abcd
mbfl_string_range abcdefghilm 4 end     @print{} efghilm

local _RV
mbfl_string_range_var _RV abcdefghilm 4 end
"$_RV" @result{} efghilm
@end example
@end defun

@c page
@node strings inspection search
@subsection Searching characters in strings


@defun mbfl_string_first @var{STRING} @var{CHAR}
@defunx mbfl_string_first @var{STRING} @var{CHAR} @var{BEGIN}
@defunx mbfl_string_first_var @var{_RV} @var{STRING} @var{CHAR}
@defunx mbfl_string_first_var @var{_RV} @var{STRING} @var{CHAR} @var{BEGIN}
Search characters in a string.  Arguments: @var{STRING}, the target string; @var{CHAR}, the
character to look for; @var{BEGIN}, optional, the index of the character in the target string from
which the search begins (defaults to zero).

If the character is found: print an integer representing the index of the last occurrence of
@var{CHAR} in @var{STRING}, then return with status zero.  If the character is not found: print
nothing and return with status one.

@DocVarVariant{}

@example
mbfl_string_first abcdefghilm d         @print{} 3
mbfl_string_first abcdefghilm a         @print{} 0
mbfl_string_first abcdefghilm m         @print{} 10
mbfl_string_first abcdefghilm X         @print{} <empty string>

mbfl_string_first abcdeabcde  a 3       @print{} 5
mbfl_string_first abcdeabcde  e 5       @print{} 9
mbfl_string_first abcdeabcde  e 4       @print{} 4

local _RV
mbfl_string_first_var _RV abcdefghilm d
"$_RV" @result{} 3
@end example
@end defun


@defun mbfl_string_last @var{STRING} @var{CHAR}
@defunx mbfl_string_last @var{STRING} @var{CHAR} @var{BEGIN}
@defunx mbfl_string_last_var @var{_RV} @var{STRING} @var{CHAR}
@defunx mbfl_string_last_var @var{_RV} @var{STRING} @var{CHAR} @var{BEGIN}
Search characters in a string starting from the end.  Arguments: @var{STRING}, the target string;
@var{CHAR}, the character to look for; @var{BEGIN}, optional, the index of the character in the
target string from which the search begins (defaults to zero).

If the character is found: print an integer representing the index of the last occurrence of
@var{CHAR} in @var{STRING}, then return with status zero.  If the character is not found: print
nothing and return with status one.

@DocVarVariant{}

@example
mbfl_string_last abcdefghilm d          @print{} 3
mbfl_string_last abcdefghilm a          @print{} 0
mbfl_string_last abcdefghilm m          @print{} 10
mbfl_string_last abcdefghilm X          @print{} <empty string>

mbfl_string_last abcdefghilm a 3        @print{} 0
mbfl_string_last abcdeabcde  a 7        @print{} 5
mbfl_string_last abcdeabcde  e 7        @print{} 4
mbfl_string_last abcdeabcde  e 4        @print{} 4

local _RV
mbfl_string_last_var _RV abcdefghilm d
"$_RV" @result{} 3
@end example
@end defun

@c page



@c ------------------------------------------------------------------------




@defun mbfl_string_has_prefix @var{PREFIX} @var{STRING}
Return true if @var{STRING} begins with @var{PREFIX}; otherwise return false.

@example
mbfl_string_has_prefix 'ciao'  'ciao mamma'     @result{} 0
mbfl_string_has_prefix ''      'ciao mamma'     @result{} 0

mbfl_string_has_prefix 'hello' 'ciao mamma'     @result{} 1
mbfl_string_has_prefix 'hello' ''               @result{} 1
@end example
@end defun


@defun mbfl_string_has_suffix @var{STRING} @var{SUFFIX}
Return true if @var{STRING} ends with @var{SUFFIX}; otherwise return false.

@example
mbfl_string_has_suffix 'mamma' 'ciao mamma'     @result{} 0
mbfl_string_has_suffix ''      'ciao mamma'     @result{} 0

mbfl_string_has_suffix 'mom'   'ciao mamma'     @result{} 1
mbfl_string_has_suffix 'mom'   ''               @result{} 1
@end example
@end defun


@defun mbfl_string_has_prefix_and_suffix @var{PREFIX} @var{STRING} @var{SUFFIX}
Return true if @var{STRING} starts with @var{PREFIX} and ends with @var{SUFFIX}; otherwise return
false.

@example
mbfl_string_has_prefix_and_suffix 'ciao'  'ciao mamma' 'o mamma' @result{} 0
mbfl_string_has_prefix_and_suffix ''      'ciao mamma' 'mamma'   @result{} 0
mbfl_string_has_prefix_and_suffix 'ciao'  'ciao mamma' ''        @result{} 0
mbfl_string_has_prefix_and_suffix ''      ''           ''        @result{} 0
mbfl_string_has_prefix_and_suffix ''      'ciao mamma' ''        @result{} 0

mbfl_string_has_prefix_and_suffix 'mom'   'ciao mamma' 'mamma'   @result{} 1
mbfl_string_has_prefix_and_suffix 'hello' ''           'mom'     @result{} 1
mbfl_string_has_prefix_and_suffix ''      'ciao mamma' 'mom'     @result{} 1
mbfl_string_has_prefix_and_suffix 'hello' 'ciao mamma' ''        @result{} 1
@end example
@end defun

@c page
@node strings splitting
@section Splitting a string


@defvar SPLITFIELD
Array used by @func{mbfl_string_chars} to store the result of splitting a string.
@end defvar


@defvar SPLITCOUNT
Array used by @func{mbfl_string_chars} to store the number of values in @code{SPLITFIELD}.
@end defvar


@defun mbfl_string_chars @var{STRING}
Split a string into characters.  Fill an array named @code{SPLITFIELD} with the characters from the
string; the number of elements in the array is stored in a variable named @code{SPLITCOUNT}.  Both
@code{SPLITFIELD} and @code{SPLITCOUNT} can be declared @code{local} in the scope of the caller.

The difference between this function and using @code{$@{STRING:$i:1@}}, is that this function
detects backslash characters, @code{\}, and treats them as part of the following character.  So, for
example, the sequence @code{\n} is treated as a single char.
@end defun


Example of usage for @func{mbfl_string_chars}:

@example
local SPLITFIELD
local -i SPLITCOUNT

string="abcde\nfghilm"
mbfl_string_chars "$@{string@}"

$SPLITCOUNT             @result{} 12
"$@{SPLITFIELD[0]@}"    @result{} a
"$@{SPLITFIELD[1]@}"    @result{} b
"$@{SPLITFIELD[2]@}"    @result{} c
"$@{SPLITFIELD[3]@}"    @result{} d
"$@{SPLITFIELD[4]@}"    @result{} e
"$@{SPLITFIELD[5]@}"    @result{} \n
"$@{SPLITFIELD[6]@}"    @result{} f
"$@{SPLITFIELD[7]@}"    @result{} g
"$@{SPLITFIELD[8]@}"    @result{} h
"$@{SPLITFIELD[9]@}"    @result{} i
"$@{SPLITFIELD[10]@}"   @result{} l
"$@{SPLITFIELD[11]@}"   @result{} m
@end example


@defun mbfl_string_split @var{STRING} @var{SEPARATOR}
Split @var{STRING} into fields using @var{SEPARATOR}.  Fill an array named @code{SPLITFIELD} with
the characters from the string; the number of elements in the array is stored in a variable named
@code{SPLITCOUNT}.  We can declare both @code{SPLITFIELD} and @code{SPLITCOUNT} as @code{local} in
the scope of the caller.
@end defun


@defun mbfl_string_split_blanks @var{STRING}
Split @var{STRING} into fields using adjacent blank characters as separators.  Fill an array named
@code{SPLITFIELD} with the characters from the string; the number of elements in the array is stored
in a variable named @code{SPLITCOUNT}.  We can declare both @code{SPLITFIELD} and @code{SPLITCOUNT}
as @code{local} in the scope of the caller.

@example
local -a SPLITFIELD
local -i SPLITCOUNT
local STRING

printf -v STRING 'abc\t \tdef\t\t ghi \t\tlmn\t \topq\t\t   rs'

mbfl_string_split_blanks "$STRING"

$SPLITCOUNT             @result{} 6
"$@{SPLITFIELD[0]@}"      @result{} abc
"$@{SPLITFIELD[1]@}"      @result{} def
"$@{SPLITFIELD[2]@}"      @result{} ghi
"$@{SPLITFIELD[3]@}"      @result{} lmn
"$@{SPLITFIELD[4]@}"      @result{} opq
"$@{SPLITFIELD[5]@}"      @result{} rs
@end example
@end defun

@c page
@node strings case
@section Converting between upper and lower case


@defun mbfl_string_toupper @var{STRING}
@defunx mbfl_string_toupper_var @var{_RV} @var{STRING}
Output @var{STRING} with all the occurrences of lower case @ascii{} characters (no accents) turned
into upper case.

@DocVarVariant{}
@end defun


@defun mbfl_string_tolower @var{STRING}
@defunx mbfl_string_tolower_var @var{_RV} @var{STRING}
Output @var{STRING} with all the occurrences of upper case @ascii{} characters (no accents) turned
into lower case.

@DocVarVariant{}
@end defun

@c page
@node strings class
@section Matching a string with a class


@menu
* strings class char::          Character classes.
* strings class string::        String classes.
* strings class special::       Special well known string formats.
@end menu

@c page
@node strings class char
@subsection Character classes


@defun mbfl_string_is_alpha_char @var{CHAR}
Return true if @var{CHAR} is in one of the ranges: @samp{[a-z]}, @samp{[A-Z]}.
@end defun


@defun mbfl_string_is_digit_char @var{CHAR}
Return true if @var{CHAR} is in the range: @code{0-9}.
@end defun


@defun mbfl_string_is_alnum_char @var{CHAR}
Return true if:

@example
mbfl_string_is_alpha_char @var{CHAR} || \
   mbfl_string_is_digit_char @var{CHAR}
@end example
@end defun


@defun mbfl_string_is_noblank_char @var{CHAR}
Return true if @var{CHAR} is none of the characters: @samp{ }, @samp{\n}, @samp{\r}, @samp{\f},
@samp{\t}.  @var{CHAR} is meant to be the unquoted version of the non--blank characters, the one
obtained with:

@example
$'@var{CHAR}'
@end example
@end defun


@defun mbfl_string_is_name_char @var{CHAR}
Return true if @func{mbfl_string_is_alnum_char} returns true when applied to @var{CHAR} or
@var{CHAR} is an underscore, @samp{_}.
@end defun


@defun mbfl_string_is_identifier_char @var{CHAR}
Return true if @func{mbfl_string_is_alnum_char} returns true when applied to @var{CHAR} or
@var{CHAR} is an underscore, @samp{_}, or dash, @samp{-}.
@end defun


@defun mbfl_string_is_extended_identifier_char @var{CHAR}
Like @func{mbfl_string_is_identifier_char}, but also accept dots @samp{.}.
@end defun


@defun mbfl_string_is_ascii_symbol_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
. , : ;
@{ [ ( ) ] @}
_
= < > ~
+ - * / %
& $ ! ?
" ' ` ^
| # @
@end example
@end defun


@defun mbfl_string_is_lower_case_vowel_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
a e i o u y
@end example
@end defun


@defun mbfl_string_is_lower_case_consonant_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
b c d f g h j k l m n p q r s t v w x z
@end example
@end defun


@defun mbfl_string_is_lower_case_consonant_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
b c d f g h j k l m n p q r s t v w x z
@end example
@end defun


@defun mbfl_string_is_lower_case_alphabet_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
a b c d e f g h i j k l m n o p q r s t u v w x y z
@end example
@end defun


@defun mbfl_string_is_lower_case_alnum_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
a b c d e f g h i j k l m n o p q r s t u v w x y z
0 1 2 3 4 5 6 7 8 9
@end example
@end defun


@defun mbfl_string_is_upper_case_vowel_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
A E I O U Y
@end example
@end defun


@defun mbfl_string_is_upper_case_consonant_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
B C D F G H J K L M N P Q R S T V W X Z
@end example
@end defun


@defun mbfl_string_is_upper_case_alphabet_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
@end example
@end defun


@defun mbfl_string_is_upper_case_alnum_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
0 1 2 3 4 5 6 7 8 9
@end example
@end defun


@defun mbfl_string_is_upper_case_base16_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
A B C D E F 0 1 2 3 4 5 6 7 8 9
@end example
@end defun


@defun mbfl_string_is_mixed_case_vowel_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
a e i o u y
A E I O U Y
@end example
@end defun


@defun mbfl_string_is_mixed_case_consonant_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
b c d f g h j k l m n p q r s t v w x z
B C D F G H J K L M N P Q R S T V W X Z
@end example
@end defun


@defun mbfl_string_is_mixed_case_alphabet_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
a b c d e f g h i j k l m n o p q r s t u v w x y z
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
@end example

This is equivalent to @func{mbfl_string_is_alpha_char}.
@end defun


@defun mbfl_string_is_mixed_case_alnum_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
a b c d e f g h i j k l m n o p q r s t u v w x y z
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
0 1 2 3 4 5 6 7 8 9
@end example

This is equivalent to @func{mbfl_string_is_alnum_char}.
@end defun


@defun mbfl_string_is_mixed_case_base16_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
A B C D E F
a b c d e f
0 1 2 3 4 5 6 7 8 9
@end example
@end defun


@defun mbfl_string_is_base32_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
2 3 4 5 6 7
@end example

@noindent
according to @rfc{} 4648, without padding character, as described in:

@center @url{https://datatracker.ietf.org/doc/html/rfc4648}
@end defun


@defun mbfl_string_is_base64_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
a b c d e f g h i j k l m n o p q r s t u v w x y z
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
0 1 2 3 4 5 6 7 8 9
+ /
@end example

@noindent
according to @rfc{} 4648, without padding character, as described in:

@center @url{https://datatracker.ietf.org/doc/html/rfc4648}
@end defun


@defun mbfl_string_is_printable_ascii_noblank_char @var{CHAR}
Return true if @var{CHAR} is in the following set, otherwise return false:

@example
a b c d e f g h i j k l m n o p q r s t u v w x y z
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
0 1 2 3 4 5 6 7 8 9
. , : ;
@{ [ ( ) ] @}
_
= < > ~
+ - * / %
& $ ! ?
" ' ` ^
| # @
@end example
@end defun

@c page
@node strings class string
@subsection String classes


@defun mbfl_string_is_alpha @var{STRING}
@defunx mbfl_string_is_digit @var{STRING}
@defunx mbfl_string_is_alnum @var{STRING}
@defunx mbfl_string_is_noblank @var{STRING}
@defunx mbfl_string_is_name @var{STRING}
@defunx mbfl_string_is_identifier @var{STRING}
@defunx mbfl_string_is_extended_identifier @var{STRING}
@defunx mbfl_string_is_ascii_symbol @var{STRING}
@defunx mbfl_string_is_lower_case_vowel @var{STRING}
@defunx mbfl_string_is_lower_case_consonant @var{STRING}
@defunx mbfl_string_is_lower_case_alphabet @var{STRING}
@defunx mbfl_string_is_lower_case_alnumt @var{STRING}
@defunx mbfl_string_is_lower_case_base16 @var{STRING}
@defunx mbfl_string_is_upper_case_vowel @var{STRING}
@defunx mbfl_string_is_upper_case_consonant @var{STRING}
@defunx mbfl_string_is_upper_case_alphabet @var{STRING}
@defunx mbfl_string_is_upper_case_alnumt @var{STRING}
@defunx mbfl_string_is_upper_case_base16 @var{STRING}
@defunx mbfl_string_is_mixed_case_vowel @var{STRING}
@defunx mbfl_string_is_mixed_case_consonant @var{STRING}
@defunx mbfl_string_is_mixed_case_alphabet @var{STRING}
@defunx mbfl_string_is_mixed_case_alnumt @var{STRING}
@defunx mbfl_string_is_mixed_case_base16 @var{STRING}
@defunx mbfl_string_is_base32 @var{STRING}
@defunx mbfl_string_is_base64 @var{STRING}
@defunx mbfl_string_is_printable_ascii_noblank @var{STRING}
Return true if @var{STRING} is non--empty and the associated char function returns true for each
character in @var{STRING}.  As additional constraint:

@itemize
@item
@func{mbfl_string_is_name} returns false if @func{mbfl_string_is_digit}
returns true when applied to the first character of @var{STRING}.

@item
@func{mbfl_string_is_identifier} and
@func{mbfl_string_is_extended_identifier} return false if
@func{mbfl_string_is_digit} returns true when applied to the first
character of @var{STRING} or the first char of @var{STRING} is a dash.
@end itemize
@end defun

@c page
@node strings class special
@subsection Special well known string formats


@defun mbfl_string_is_username @var{STRING}
@defunx mbfl_string_is_groupname @var{STRING}
Return true if @var{STRING} is valid as user name or group name according to the common Unix
standards; otherwise return false.  @var{STRING} must be non--empty, it must not terminate with a
newline, it must match the following regular expression:

@example
^(([a-zA-Z0-9_\.\-]+)|(\+[0-9]+))$
@end example

As a special case: @var{STRING} can be composed of digits with a leading plus sign @samp{+}, this is
supported by @command{chown} and @command{chgrp} from the @gnu{} Coreutils as a way to specify
numeric user and group name unambiguously; @coreutilsref{Disambiguating names and IDs, chown@comma{}
chgrp@comma{} chroot@comma{} id Disambiguating user names and IDs}.
@end defun


@defun mbfl_string_is_email_address @var{STRING}
Return true if @var{STRING} is non--empty and it matches the general shape of an email address;
otherwise return false.
@end defun


@defun mbfl_string_is_network_hostname @var{STRING}
Return true if @var{STRING} is non--empty and it matches the format of a network hostname; otherwise
return false.
@end defun


@defun mbfl_string_is_network_port @var{STRING}
Return true if @var{STRING} is non--empty and it matches the format of a network port number;
otherwise return false.
@end defun


@defun mbfl_string_is_network_ip_address @var{STRING}
Return true if @var{STRING} is non--empty and it matches the format of an @acronym{IP} address;
otherwise return false.
@end defun

@c page
@node strings comparison
@section Comparing strings


@menu
* strings comparison macros::   Comparing strings with macros.
* strings comparison funcs::    Comparing strings with functions.
@end menu

@c page
@node strings comparison macros
@subsection Comparing strings with macros


The following macros take their arguments as they are, without enclosing them into double or single
quotes, as follows:

@example
test $1 '=' $2
@end example

@noindent
so we must take care of quoting the arguments appropriately.


@deffn {Preprocessor Macro} mbfl_string_eq (@vari{STR}, @varii{STR})
Return successfully if the arguments are equal when compared when compared lexicographically as
strings; otherwise return failure.

@example
declare CIAO=ciao HELLO=hello

mbfl_string_eq('ciao', 'ciao')          @result{} 0
mbfl_string_eq('ciao', 'hello')         @result{} 1

mbfl_string_eq("$CIAO", "$CIAO")        @result{} 0
mbfl_string_eq("$CIAO", "$HELLO")       @result{} 1
@end example
@end deffn


@deffn {Preprocessor Macro} mbfl_string_neq (@vari{STR}, @varii{STR})
Return successfully if the arguments are different when compared lexicographically as strings;
otherwise return failure.

@example
declare CIAO=ciao HELLO=hello

mbfl_string_neq('ciao', 'ciao')         @result{} 1
mbfl_string_neq('ciao', 'hello')        @result{} 0

mbfl_string_neq("$CIAO", "$CIAO")       @result{} 1
mbfl_string_neq("$CIAO", "$HELLO")      @result{} 0
@end example
@end deffn


@deffn {Preprocessor Macro} mbfl_string_lt (@vari{STR}, @varii{STR})
Return successfully if @vari{STR} is less than @varii{STR} when compared when compared
lexicographically as strings; otherwise return failure.

@example
declare CIAO=ciao HELLO=hello SALUT=salut

mbfl_string_lt('ciao',  'ciao')         @result{} 1
mbfl_string_lt('ciao',  'hello')        @result{} 0
mbfl_string_lt('salut', 'hello')        @result{} 0

mbfl_string_lt("$CIAO",  "$CIAO")       @result{} 1
mbfl_string_lt("$CIAO",  "$HELLO")      @result{} 0
mbfl_string_lt("$SALUT", "$HELLO")      @result{} 1
@end example
@end deffn


@deffn {Preprocessor Macro} mbfl_string_gt (@vari{STR}, @varii{STR})
Return successfully if @vari{STR} is greater than @varii{STR} when compared when compared
lexicographically as strings; otherwise return failure.

@example
declare CIAO=ciao HELLO=hello SALUT=salut

mbfl_string_gt('ciao',  'ciao')         @result{} 1
mbfl_string_gt('ciao',  'hello')        @result{} 1
mbfl_string_gt('salut', 'hello')        @result{} 0

mbfl_string_gt("$CIAO",  "$CIAO")       @result{} 1
mbfl_string_gt("$CIAO",  "$HELLO")      @result{} 1
mbfl_string_gt("$SALUT", "$HELLO")      @result{} 0
@end example
@end deffn


@deffn {Preprocessor Macro} mbfl_string_le (@vari{STR}, @varii{STR})
Return successfully if @vari{STR} is less than or equal to @varii{STR} when compared when compared
lexicographically as strings; otherwise return failure.

@example
declare CIAO=ciao HELLO=hello SALUT=salut

mbfl_string_le('ciao',  'ciao')         @result{} 0
mbfl_string_le('ciao',  'hello')        @result{} 0
mbfl_string_le('salut', 'hello')        @result{} 0

mbfl_string_le("$CIAO",  "$CIAO")       @result{} 0
mbfl_string_le("$CIAO",  "$HELLO")      @result{} 0
mbfl_string_le("$SALUT", "$HELLO")      @result{} 1
@end example
@end deffn


@deffn {Preprocessor Macro} mbfl_string_ge (@vari{STR}, @varii{STR})
Return successfully if @vari{STR} is greater than or equal to @varii{STR} when compared when
compared lexicographically as strings; otherwise return failure.

@example
declare CIAO=ciao HELLO=hello SALUT=salut

mbfl_string_ge('ciao',  'ciao')         @result{} 0
mbfl_string_ge('ciao',  'hello')        @result{} 1
mbfl_string_ge('salut', 'hello')        @result{} 0

mbfl_string_ge("$CIAO",  "$CIAO")       @result{} 0
mbfl_string_ge("$CIAO",  "$HELLO")      @result{} 1
mbfl_string_ge("$SALUT", "$HELLO")      @result{} 0
@end example
@end deffn


@deffn {Preprocessor Macro} mbfl_string_eq_yes (@var{STR})
@deffnx {Preprocessor Macro} mbfl_string_eq_no (@var{STR})
@deffnx {Preprocessor Macro} mbfl_string_eq_true (@var{STR})
@deffnx {Preprocessor Macro} mbfl_string_eq_false (@var{STR})
Return successfully if the argument @var{STR} is equal to, respectively: @samp{yes}, @samp{no},
@samp{true}, @samp{false} when compared when compared lexicographically as string; otherwise return
failure.

@example
declare YES=yes NO=no TRUE=true FALSE=false

mbfl_string_eq_yes('yes')       @result{} 0
mbfl_string_eq_yes("$YES")      @result{} 0
mbfl_string_eq_yes('no')        @result{} 1
mbfl_string_eq_yes("$NO")       @result{} 1

mbfl_string_eq_no('yes')        @result{} 1
mbfl_string_eq_no("$YES")       @result{} 1
mbfl_string_eq_no('no')         @result{} 0
mbfl_string_eq_no("$NO")        @result{} 0

mbfl_string_eq_true('true')     @result{} 0
mbfl_string_eq_true("$TRUE")    @result{} 0
mbfl_string_eq_true('false')    @result{} 1
mbfl_string_eq_true("$FALSE")   @result{} 1

mbfl_string_eq_false('true')    @result{} 1
mbfl_string_eq_false("$TRUE")   @result{} 1
mbfl_string_eq_false('false')   @result{} 0
mbfl_string_eq_false("$FALSE")  @result{} 0
@end example
@end deffn


@deffn {Preprocessor Macro} mbfl_string_neq_yes (@var{STR})
@deffnx {Preprocessor Macro} mbfl_string_neq_no (@var{STR})
@deffnx {Preprocessor Macro} mbfl_string_neq_true (@var{STR})
@deffnx {Preprocessor Macro} mbfl_string_neq_false (@var{STR})
Return successfully if the argument @var{STR} is @strong{not} equal to, respectively: @samp{yes},
@samp{no}, @samp{true}, @samp{false} when compared when compared lexicographically as string;
otherwise return failure.

@example
declare YES=yes NO=no TRUE=true FALSE=false

mbfl_string_neq_yes('yes')      @result{} 1
mbfl_string_neq_yes("$YES")     @result{} 1
mbfl_string_neq_yes('no')       @result{} 0
mbfl_string_neq_yes("$NO")      @result{} 0

mbfl_string_neq_no('yes')       @result{} 0
mbfl_string_neq_no("$YES")      @result{} 0
mbfl_string_neq_no('no')        @result{} 1
mbfl_string_neq_no("$NO")       @result{} 1

mbfl_string_neq_true('true')    @result{} 1
mbfl_string_neq_true("$TRUE")   @result{} 1
mbfl_string_neq_true('false')   @result{} 0
mbfl_string_neq_true("$FALSE")  @result{} 0

mbfl_string_neq_false('true')   @result{} 0
mbfl_string_neq_false("$TRUE")  @result{} 0
mbfl_string_neq_false('false')  @result{} 1
mbfl_string_neq_false("$FALSE") @result{} 1
@end example
@end deffn

@c page
@node strings comparison funcs
@subsection Comparing strings with functions


@defun mbfl_string_equal @vari{str} @varii{str}
Return successfully if the arguments are equal when lexicographically compared as strings; otherwise
return unsuccessfully.  Examples:

@example
mbfl_string_equal '' ''                 @result{} 0
mbfl_string_equal 'a' ''                @result{} 1
mbfl_string_equal '' 'a'                @result{} 1
mbfl_string_equal 'ciao' 'ciao'         @result{} 0
mbfl_string_equal 'ciao' 'hello'        @result{} 1
@end example
@end defun


@defun mbfl_string_not_equal @vari{str} @varii{str}
Return successfully if the arguments are @strong{not} equal when lexicographically compared as
strings; otherwise return unsuccessfully.
@end defun


@defun mbfl_string_is_yes @var{STR}
@defunx mbfl_string_is_no @var{STR}
Return true if the string @var{STR} is equal to, respectively, @samp{yes} or @samp{no}; otherwise
return false.
@end defun


@defun mbfl_string_is_true @var{STR}
@defunx mbfl_string_is_false @var{STR}
Return true if the string @var{STR} is equal to, respectively, @samp{true} or @samp{false};
otherwise return false.
@end defun


@defun mbfl_string_less @vari{str} @varii{str}
Return successfully if @vari{str} is less than @varii{str} when lexicographically compared as
strings; otherwise return unsuccessfully.  Examples:

@example
mbfl_string_less '' ''                  @result{} 0
mbfl_string_less 'a' ''                 @result{} 0
mbfl_string_less '' 'a'                 @result{} 1
mbfl_string_less 'ciao' 'ciao'          @result{} 1
mbfl_string_less 'ciao' 'hello'         @result{} 0
mbfl_string_less 'hello' 'ciao'         @result{} 1
@end example
@end defun


@defun mbfl_string_greater @vari{str} @varii{str}
Return successfully if @vari{str} is greater than @varii{str} when lexicographically compared as
strings; otherwise return unsuccessfully.  Examples:

@example
mbfl_string_greater '' ''               @result{} 1
mbfl_string_greater 'a' ''              @result{} 0
mbfl_string_greater '' 'a'              @result{} 1
mbfl_string_greater 'ciao' 'ciao'       @result{} 1
mbfl_string_greater 'ciao' 'hello'      @result{} 1
mbfl_string_greater 'hello' 'ciao'      @result{} 0
@end example
@end defun


@defun mbfl_string_less_or_equal @vari{str} @varii{str}
Return successfully if @vari{str} is less than, or equal to, @varii{str} when lexicographically
compared as strings; otherwise return unsuccessfully.  Examples:

@example
mbfl_string_less_or_equal '' ''                 @result{} 0
mbfl_string_less_or_equal 'a' ''                @result{} 1
mbfl_string_less_or_equal '' 'a'                @result{} 0
mbfl_string_less_or_equal 'ciao' 'ciao'         @result{} 0
mbfl_string_less_or_equal 'ciao' 'hello'        @result{} 0
mbfl_string_less_or_equal 'hello' 'ciao'        @result{} 1
@end example
@end defun


@defun mbfl_string_greater_or_equal @vari{str} @varii{str}
Return successfully if @vari{str} is greater than, or equal to, @varii{str} when lexicographically
compared as strings; otherwise return unsuccessfully.  Examples:

@example
mbfl_string_greater_or_equal '' ''              @result{} 0
mbfl_string_greater_or_equal 'a' ''             @result{} 0
mbfl_string_greater_or_equal '' 'a'             @result{} 1
mbfl_string_greater_or_equal 'ciao' 'ciao'      @result{} 0
mbfl_string_greater_or_equal 'ciao' 'hello'     @result{} 1
mbfl_string_greater_or_equal 'hello' 'ciao'     @result{} 0
@end example
@end defun


@defun mbfl_string_compare @vari{str} @varii{str}
Compare @vari{str} and @varii{str}:

@itemize
@item
if @vari{str} = @varii{str} return 0;

@item
if @vari{str} < @varii{str} return 1;

@item
if @vari{str} > @varii{str} return 2.
@end itemize

@example
mbfl_string_compare '' ''               @result{} 0
mbfl_string_compare 'a' ''              @result{} 2
mbfl_string_compare '' 'a'              @result{} 1
mbfl_string_compare 'ciao' 'ciao'       @result{} 0
mbfl_string_compare 'ciao' 'hello'      @result{} 1
mbfl_string_compare 'hello' 'ciao'      @result{} 2
@end example
@end defun


@defun mbfl_string_equal_substring @var{STRING} @var{POSITION} @var{PATTERN}
Return true if the substring starting at @var{POSITION} in @var{STRING}
is equal to @var{PATTERN}; else return false.  If @var{POSITION} plus
the length of @var{PATTERN} is greater than the length of @var{STRING}:
the return value is false, always.
@end defun

@c page
@node strings encoding
@section Encoding and decoding strings


The purpose of this module is to let an external process invoke a Bash script with @emph{damned}
command line arguments: strings including blanks or strange characters that may trigger quoting
rules.  This problem can arise when using scripting languages with some sort of @code{eval} command.

The solution is to encode the argument string in hexadecimal or octal format strings, so that all
the damned characters are converted to ``good'' ones.  The Bash script can convert them back.

@quotation
@strong{NOTE} Internally Bash represents strings as C language style @asciiz{} arrays, so it is
impossible to correctly handle null bytes in a Bash variable: the string will get truncated at the
null byte.
@end quotation


@defun mbfl_encode_hex @var{ASCII_STRING}
@defunx mbfl_encode_hex_var @var{_RV} @var{ASCII_STRING}
Encode a hex string and outputs it on @stdout{}.

@DocVarVariant{}
@end defun


@defun mbfl_decode_hex @var{HEX_STRING}
@defunx mbfl_decode_hex_var @var{_RV} @var{HEX_STRING}
Decode a hex string and outputs it on @stdout{}.

@DocVarVariant{}
@end defun


@defun mbfl_decode_oct @var{OCT_STRING}
@defunx mbfl_decode_oct_var @var{_RV} @var{OCT_STRING}
Decode a oct string and outputs it on @stdout{}.

@DocVarVariant{}
@end defun


Example:

@example
mbfl_decode_hex 414243
@print{} ABC
@end example

@c page
@node strings stripping
@section Stripping substrings from strings


@defun mbfl_string_strip_carriage_return_var @var{_RV} @var{LINE}
When exchanging strings with a remote process through a network socket we, usually, need to end a
line with a carriage return plus line feed sequence.  If we use the command @command{read} to read a
line from a socket: we can instruct it to discard the ending line feed, yielding us a line ending
with a carriage return.

This function strips the ending carriage return from @var{LINE}, if any, and stores the result in
the result variable @var{_RV}.  It is fine if @var{LINE} is the empty string.
@end defun


@defun mbfl_string_strip_prefix_var @var{_RV} @var{PREFIX} @var{STRING}
If @var{STRING} begins with @var{PREFIX}: strip @var{PREFIX} from @var{STRING}; store the result in
the result variable @var{_RV}; return true.

If @var{STRING} does not begin with @var{PREFIX}: store @var{STRING} itself in the result variable
@var{_RV}; return false.

@example
declare RV

mbfl_string_strip_prefix_var RV 'ciao ' 'ciao mamma'  @result{} 0
"$RV"                                                 @result{} 'mamma'

mbfl_string_strip_prefix_var RV ''      'ciao mamma'  @result{} 0
"$RV"                                                 @result{} 'ciao mamma'

mbfl_string_strip_prefix_var RV ''      ''            @result{} 0
"$RV"                                                 @result{} ''

mbfl_string_strip_prefix_var RV 'hello' 'ciao mamma'  @result{} 1
"$RV"                                                 @result{} 'ciao mamma'

mbfl_string_strip_prefix_var RV 'hello' ''            @result{} 1
"$RV"                                                 @result{} ''
@end example
@end defun


@defun mbfl_string_strip_suffix_var @var{_RV} @var{STRING} @var{SUFFIX}
If @var{STRING} ends with @var{SUFFIX}: strip @var{SUFFIX} from @var{STRING}; store the result in
the result variable @var{_RV}; return true.

If @var{STRING} does not end with @var{SUFFIX}: store @var{STRING} itself in the result variable
@var{_RV}; return false.

@example
declare RV

mbfl_string_strip_suffix_var RV 'ciao mamma' 'mamma'    @result{} 0
"$RV"                                                   @result{} 'ciao '

mbfl_string_strip_suffix_var RV 'ciao mamma' ''         @result{} 0
"$RV"                                                   @result{} 'ciao mamma'

mbfl_string_strip_suffix_var RV ''           ''         @result{} 0
"$RV"                                                   @result{} ''

mbfl_string_strip_suffix_var RV 'ciao mamma' 'mom'      @result{} 1
"$RV"                                                   @result{} 'ciao mamma'

mbfl_string_strip_suffix_var RV ''           'mom'      @result{} 1
"$RV"                                                   @result{} ''
@end example
@end defun


@defun mbfl_string_strip_prefix_and_suffix_var @var{_RV} @var{PREFIX} @var{STRING} @var{SUFFIX}
If @var{STRING} begins with @var{PREFIX} and ends with @var{SUFFIX}: strip @var{PREFIX} and
@var{SUFFIX} from @var{STRING}; store the result in the result variable @var{_RV}; return 0.

If @var{STRING} begins with @var{PREFIX} and does not end with @var{SUFFIX}: strip @var{PREFIX} from
@var{STRING}; store the result in the result variable @var{_RV}; return 2.

If @var{STRING} does not begin with @var{PREFIX} and it does end with @var{SUFFIX}: strip
@var{SUFFIX} from @var{STRING}; store the result in the result variable @var{_RV}; return 3.

Otherwise store @var{STRING} itself in the result variable @var{_RV} and return 1.

@example
declare RV

mbfl_string_strip_prefix_and_suffix_var RV 'ci'    'ciao mamma'    'ma'    @result{} 0
"$RV"                                                                      @result{} 'ao mam'

mbfl_string_strip_prefix_and_suffix_var RV 'ciao'  'ciao mamma' 'mamma'    @result{} 0
"$RV"                                                                      @result{} ' '

mbfl_string_strip_prefix_and_suffix_var RV 'ciao ' 'ciao mamma' 'mamma'    @result{} 0
"$RV"                                                                      @result{} ''

mbfl_string_strip_prefix_and_suffix_var RV ''      'ciao mamma' ''         @result{} 0
"$RV"                                                                      @result{} 'ciao mamma'

mbfl_string_strip_prefix_and_suffix_var RV ''      'ciao mamma' 'mamma'    @result{} 0
"$RV"                                                                      @result{} 'ciao '

mbfl_string_strip_prefix_and_suffix_var RV 'ciao'  'ciao mamma' ''         @result{} 0
"$RV"                                                                      @result{} ' mamma'

##

mbfl_string_strip_prefix_and_suffix_var RV 'ciao'  'ciao mamma' 'mom'      @result{} 2
"$RV"                                                                      @result{} ' mamma'

##

mbfl_string_strip_prefix_and_suffix_var RV 'hello' 'ciao mamma' 'mamma'    @result{} 3
"$RV"                                                                      @result{} 'ciao '

##

mbfl_string_strip_prefix_and_suffix_var RV 'hello' 'ciao mamma' 'mom'      @result{} 1
"$RV"                                                                      @result{} 'ciao mamma'
@end example
@end defun

@c page
@node strings normalisation
@section Normalising strings


@anchor{mbfl_string_normalise_boolean_var}
@defun mbfl_string_normalise_boolean_var @var{NORMAL_RV} @var{STR}
Normalise @var{STR} as a boolean string representation and store the result in the result variable
@var{NORMAL_RV}; when successful return true, otherwise return false.

Normalised boolean values are: @samp{true}, @samp{false}.

Supported values for @var{STR} are: @samp{true}, @samp{false}, @samp{yes}, @samp{no}, @samp{1},
@samp{0}.

@example
mbfl_declare_varref(NORMAL_STR)

mbfl_string_normalise_boolean_var mbfl_datavar(NORMAL_RV) 'yes'
$NORMAL_RV              @result{} true
eval $NORMAL_RV         @result{} 0
@end example
@end defun


@c page
@node strings misc
@section Miscellaneous functions


@defun mbfl_string_replace @var{STRING} @var{PATTERN}
@defunx mbfl_string_replace @var{STRING} @var{PATTERN} @var{SUBST}
@defunx mbfl_string_replace_var @var{_RV} @var{STRING} @var{PATTERN}
@defunx mbfl_string_replace_var @var{_RV} @var{STRING} @var{PATTERN} @var{SUBST}
Replace all the occurrences of @var{PATTERN} in @var{STRING} with @var{SUBST}, then print the
result.  If not used, @var{SUBST} defaults to the empty string.

@DocVarVariant{}

@example
mbfl_string_replace 'abcdefg' 'cde' '123'
@print{} 'ab123fg'

local _RV
mbfl_string_replace_var _RV 'abcdefg' 'cde' '123'
"$_RV" @result{} ab123fg
@end example
@end defun


@defun mbfl_sprintf @var{VARNAME} @var{FORMAT} ...
Make use of @code{printf} to format the string @var{FORMAT} with the additional arguments, then
store the result in @var{VARNAME}: If this name is local in the scope of the caller, this has the
effect of filling the variable in that scope.

@strong{NOTE} We should use the built--in @code{printf -v @var{VARNAME}} construct, rather than this
function.
@end defun


@defun mbfl_string_skip @var{STRING} @var{VARNAME} @var{CHAR}
Skip all the characters in a string equal to @var{CHAR}.  @var{VARNAME} is the name of a variable in
the scope of the caller: Its value is the offset of the first character to test in @var{STRING}.
The offset is incremented until a char different from @var{CHAR} is found, then the value of
@var{VARNAME} is updated to the position of the different char.  If the initial value of the offset
corresponds to a char equal to @var{CHAR}, the variable is left untouched.  Return true.

@example
local -i i

# The char "z" is not present in the string: leave "i" untouched.
i=3
;;               0123456
mbfl_string_skip abcdefg i z
$i @result{} 3

# The whole string  is filled with "a": increment "i" to
# the length of the string itself.
i=3
;;               0123456
mbfl_string_skip aaaaaaa i a
$i @result{} 7

# Skip until the index of the "d" character.
i=3
;;               01234567890
mbfl_string_skip abcccccdefg i c
$i @result{} 7
@end example
@end defun

@c page
@node integers
@chapter Manipulating integers


@menu
* integers compar::             Comparing strings as integers.
@end menu

@c page
@node integers compar
@section Comparing strings as integers


@deffn {Preprocessor Macro} mbfl_integer_eq (@vari{INT}, @varii{INT})
@deffnx {Function}x {Function} mbfl_integer_equal @vari{INT} @varii{INT}
Return true if the arguments are equal when compared as integers; otherwise return false.
@end deffn


@deffn {Preprocessor Macro} mbfl_integer_neq (@vari{INT}, @varii{INT})
@deffnx {Function} mbfl_integer_not_equal @vari{INT} @varii{INT}
Return true if the arguments are @strong{not} equal when lexicographically compared as integers;
otherwise return false.
@end deffn


@deffn {Preprocessor Macro} mbfl_integer_lt (@vari{INT}, @varii{INT})
@deffnx {Function} mbfl_integer_less @vari{INT} @varii{INT}
Return true if @vari{INT} is less than @varii{INT} when compared as integers; otherwise return
false.
@end deffn


@deffn {Preprocessor Macro} mbfl_integer_gt (@vari{INT}, @varii{INT})
@deffnx {Function} mbfl_integer_greater @vari{INT} @varii{INT}
Return true if @vari{INT} is greater than @varii{INT} when compared as integers; otherwise return
false.
@end deffn


@deffn {Preprocessor Macro} mbfl_integer_le (@vari{INT}, @varii{INT})
@deffnx {Function} mbfl_integer_less_or_equal @vari{INT} @varii{INT}
Return true if @vari{INT} is less than, or equal to, @varii{INT} when compared as integers;
otherwise return false.
@end deffn


@deffn {Preprocessor Macro} mbfl_integer_ge (@vari{INT}, @varii{INT})
@deffnx {Function} mbfl_integer_greater_or_equal @vari{INT} @varii{INT}
Return true if @vari{INT} is greater than, or equal to, @varii{INT} when compared as integers;
otherwise return false.
@end deffn


@defun mbfl_integer_compare @vari{INT} @varii{INT}
Compare @vari{INT} and @varii{INT}:

@itemize
@item
if @vari{INT} = @varii{INT} return 0;

@item
if @vari{INT} < @varii{INT} return 1;

@item
if @vari{INT} > @varii{INT} return 2.
@end itemize
@end defun

@c page
@node actions
@chapter Selecting actions to perform


The @code{actions} module allows the command line selection of different actions a script can
perform.

@menu
* actions intro::               Introduction to action trees.
* actions declare::             Declaring actions and action sets.
* actions dispatch::            Dispatching action arguments.
* actions inspect::             Inspecting action trees.
* actions completion::          Automatic generation of programmable completion script.
* actions misc::                Other functions.
@end menu

@c page
@node actions intro
@section Introduction to action trees


Traditional Unix--style command--line programs perform a single action, with behaviour variants
selected by command--line dash and double--dash options.  For example @command{ls} prints a list of
directory entries and the format of the output can be custommised with options like @option{-1} and
@option{--colour}.  @mbfl{} implements this behaviour by default when the @code{actions} module is
@strong{not} used.

Other Unix--style command--line programs offer a set of possible actions and allow the executor to
select one by specifying command--line options.  For example @command{tar} acts on archive files and
it can pack, unpack, validate them along with other actions selected with by the double--dash
options @option{--create}, @option{--extract}, @option{--validate} and others.  @mbfl{} implements
this behaviour through ``action options'' provided by the @code{getopts} module; action options are
available also when using the @code{actions} module.

Other command--line programs break this Unix--style to offer action selection throuh ``action
arguments''.  For example @command{git} acts upon revision control repositories offering a big set
of actions selected with its first argument: @samp{commit}, @samp{log}, @samp{merge} and many
others; the behaviour of each ``subcommand'' can be customised with a specific set of dash and
double--dash options.  @mbfl{} implements this behaviour through the @code{actions} module.

@c ------------------------------------------------------------

@subsubheading One--level actions


The script below (@file{one-level-actions.sh}, available in the @file{doc/} directory of the source
distribution) shows how to implement one--level actions.  It implements the following behaviour:

@table @code
@item one-level-actions.sh
With no action argument: print a generic help screen and exit.

@item one-level-actions.sh one
With the action argument @code{one}: perform the action @samp{ONE}, possibly with the options
@option{-a} and @option{-b}.

@item one-level-actions.sh one -H
With the action argument @code{one} and the option @option{-H}: print the brief help screen for the
action @samp{ONE} and exit.

@item one-level-actions.sh two
With the action argument @code{two}: perform the action @samp{TWO}, possibly with the options
@option{-d} and @option{-g}.

@item one-level-actions.sh two -H
With the action argument @code{two} and the option @option{-H}: print the brief help screen for the
action @samp{TWO} and exit.

@item one-level-actions.sh help
With the action argument @code{help}: print a generic help screen and exit.  Notice how the
@samp{HELP} action function makes use of @func{mbfl_actions_fake_action_set} to print the same help
screen of the main action.
@end table

@smallexample
@verbatiminclude one-level-actions.sh
@end smallexample

@c ------------------------------------------------------------

@subsubheading Two--levels actions


The script below (@file{two-levels-actions.sh}, available in the @file{doc/} directory of the source
distribution) shows how to implement two--levels actions.  It implements the following behaviour:

@table @code
@item two-levels-actions.sh
With no action argument: print a generic help screen and exit.

@item two-levels-actions.sh help
With the action argument @code{help}: print a generic help screen and exit.  Notice how the
@samp{HELP} action function makes use of @func{mbfl_actions_fake_action_set} to print the same help
screen of the main action.

@item two-levels-actions.sh one
With the non--leaf action argument @code{one}: print the help screen of the action @samp{ONE}.

@item two-levels-actions.sh two
With the non--leaf action argument @code{two}: print the help screen of the action @samp{TWO}.

@item two-levels-actions.sh one red
With the action arguments @code{one red}: perform the action @samp{RED}, possibly with the options
@option{-a} and @option{-b}.

@item two-levels-actions.sh one red -H
With the action argument @code{one red} and the option @option{-H}: print the brief help screen for
the action @samp{RED} and exit.

@item two-levels-actions.sh one blue
With the action arguments @code{one blue}: perform the action @samp{BLUE}, possibly with the options
@option{-a} and @option{-b}.

@item two-levels-actions.sh one blue -H
With the action argument @code{one blue} and the option @option{-H}: print the brief help screen for
the action @samp{BLUE} and exit.

@item two-levels-actions.sh two green
With the action arguments @code{two green}: perform the action @samp{GREEN}, possibly with the
options @option{-d} and @option{-g}.

@item two-levels-actions.sh two green -H
With the action argument @code{two green} and the option @option{-H}: print the brief help screen
for the action @samp{GREEN} exit.

@item two-levels-actions.sh two cyan
With the action arguments @code{two cyan}: perform the action @samp{CYAN}, possibly with the options
@option{-d} and @option{-g}.

@item two-levels-actions.sh two cyan -H
With the action argument @code{two cyan} and the option @option{-H}: print the brief help screen for
the action @samp{CYAN} exit.
@end table

@noindent
notice how the action functions of the non--leaf nodes print the help screen describing the
subactions.

@smallexample
@verbatiminclude two-levels-actions.sh
@end smallexample

@c page
@node actions declare
@section Declaring actions and action sets


The structure of the action sets tree is stored in global variables defined by default; we should
never try to access such variables directly.


@defun mbfl_declare_action_set @var{ACTION-SET}
Declare a new action set.  @var{ACTION-SET} must be a string satisfying @func{mbfl_string_is_name}
and representing the identifier of the action set.  It is an error to declare the same action set
twice.
@end defun


@defun mbfl_declare_action @var{ACTION-SET} @var{KEYWORD} @var{SUBSET} @var{IDENTIFIER} @var{DESCRIPTION}
Declare a new action belonging to an action set.  The arguments are:

@table @var
@item action-set
A string representing the name of the action set this action belongs to.  The action set must have
been previously declared with a call to @func{mbfl_declare_action_set}.

@item keyword
A unique string (in this script) satisfying @func{mbfl_string_is_name} and identifying this action.
The ``main'', ``before parsing options'' and ``after parsing options'' function names associated to
this action are built as:

@example
script_action_$@var{KEYWORD}
script_before_parsing_options_$@var{KEYWORD}
script_after_parsing_options_$@var{KEYWORD}
@end example

@item subset
If @var{SUBSET} is the string @code{NONE} it means that this action is a leaf and it implements a
script action; else @var{SUBSET} must be the identifier of an action set subordinate to
@var{ACTION-SET}: this function is recursively called to process it.  The subordinate action set
must have been previously declared with a call to @func{mbfl_declare_action_set}.

@item identifier
A string satisfying @func{mbfl_string_is_identifier} and representing the argument on the command
line used to select this action.  This string must be unique for this @var{ACTION-SET}.

@item description
A string describing this action, to be used to compose the help screen.
@end table
@end defun

@c page
@node actions dispatch
@section Dispatching action arguments


@defun mbfl_actions_dispatch @var{ACTION-SET}
Parse the next command line argument and select accordingly the functions for the main module making
use of the functions:

@example
mbfl_main_set_before_parsing_options
mbfl_main_set_after_parsing_options
mbfl_main_set_main
@end example

@noindent
If successful return true, else return false and print an error message to @stderr{}.  This
function recursively calls itself, parsing command line arguments and traversing the tree of
declared actions.

@var{ACTION-SET} must be the name of an action set previously declared with
@func{mbfl_declare_action_set}.  It is an error if this function is called with an @var{ACTION-SET}
name specifying a non--existent action set.  If there are no command line arguments left upon
entering this function: the values previously selected with the functions @code{mbfl_main_set_*} are
silently accepted.

The function @func{mbfl_main} verifies that the action set @code{MAIN} exists and, if it does, it
calls this function with argument @code{MAIN}.

Upon entering this function, the following global variables must exist and have the specified
values:

@table @code
@item ARGV1
An array containing all the command line arguments.

@item ARGC1
A non--negative integer representing the number of values in
@code{ARGV1}.

@item ARG1ST
A non--negative integer representing the index in @code{ARGV1} of the next argument to be processed.
@end table

@noindent
all these variables are created by default by the @mbfl{} @code{main} module, @ref{main variables,
Command line arguments variables}.
@end defun

@c page
@node actions inspect
@section Inspecting action trees


@defun mbfl_actions_set_exists @var{ACTION-SET}
Return true if @var{ACTION-SET} is the identifier of an existent action set; else return false.
@end defun


@defun mbfl_actions_set_exists_or_none @var{ACTION-SET}
Return true if @var{ACTION-SET} is the identifier of an existent action set or it is the string
@code{NONE}; else return false.
@end defun

@c page
@node actions completion
@section Automatic generation of programmable completion script


It is almost certain that we are running @gnu{} Bash in an environment with support for @gnu{}
Readline completion of the command line; it is quite useful to provide programmable completion for
the scripts we write.  When a script has a tree hierarchy of actions it is useful to automatically
generate the completion facilities for the action commands; this is what the functions documented
here are for.

@menu
* actions completion api::          Application interface to completion script generation.
* actions completion declaration::  How to declare automatic script generation.
* actions completion script::       How to use the generated script.
@end menu

@c page
@node actions completion api
@subsection Application interface to completion script generation


@defun mbfl_actions_completion_print_script @var{NAMESPACE} @var{PROGNAME}
@defunx mbfl_actions_completion_print_script @var{NAMESPACE} @var{PROGNAME} @var{SCRIPT_TYPE}
Print to the standard output a @gnu{} Bash script, the @dfn{completions--script}, to be evaluated in
a terminal running Bash, to implement automatic completion of the command line for a
@dfn{subject--script}.

The argument @var{NAMESPACE} must be a string representing a namespace for function names; functions
in the completions--script have names starting with this string.

The argument @var{PROGNAME} must be a string representing the name of the subject--script for which
the completions--script is generated.  It is usually the value of the service variable
@env{script_PROGNAME}, @ref{script_PROGNAME} for details.

The optional argument @var{SCRIPT_TYPE} selects the type of script to output:

@table @code
@item main
Output the full completions--script for a subject--script; this is the default.  When sourced: such
completions--script will provide full completions for the subject--script.  The completions--script
is composed by a call to the Bash built--in @command{complete} followed by a number of functions.

@item subscript
Output only the completion functions for the actions of the subject--script; do @strong{not} output
a call to the Bash built--in @command{complete}.  This completions--script type is meant to be used
for subject--scripts that are not directly invoked by the user; rather they are subordinate scripts
invoked by a main script: the actions of the subordinate script are ``plugged'' in the actions of
the main script as a subtree.
@end table
@end defun

@c page
@node actions completion declaration
@subsection How to declare automatic script generation


When using the actions module we should add ``standard'' subcommands to access the automatic script
generation.  We can do it by plugging in the following actions declarations:

@example
mbfl_declare_action_set HELP
mbfl_declare_action HELP HELP_USAGE NONE                        \
    usage                                                       \
    'Print the help screen and exit.'
mbfl_declare_action HELP HELP_PRINT_COMPLETIONS_SCRIPT NONE     \
    print-completions-script                                    \
    'Print the completions script for this program.'

mbfl_declare_action_set MAIN
mbfl_declare_action MAIN HELP HELP                              \
    help                                                        \
    'Help the user of this script.'
@end example

@noindent
and add the following action functions:

@example
declare -r COMPLETIONS_SCRIPT_NAMESPACE='p-mbfl-examples'

function script_before_parsing_options_HELP () @{
    script_USAGE="usage: $@{script_PROGNAME@} help [action] [options]"
    script_DESCRIPTION='Help the user of this program.'
@}
function script_action_HELP () @{
    # By faking the  selection of the MAIN action: we  cause "mbfl_main_print_usage_screen_brief" to
    # print the main usage screen.
    mbfl_actions_fake_action_set MAIN
    mbfl_main_print_usage_screen_brief
@}

function script_before_parsing_options_HELP_USAGE () @{
    script_USAGE="usage: $@{script_PROGNAME@} help usage [options]"
    script_DESCRIPTION='Print the usage screen and exit.'
@}
function script_action_HELP_USAGE () @{
    if mbfl_wrong_num_args 0 $ARGC
    then
        # By faking the selection of  the MAIN action: we cause "mbfl_main_print_usage_screen_brief"
        # to print the main usage screen.
        mbfl_actions_fake_action_set MAIN
        mbfl_main_print_usage_screen_brief
    else
        mbfl_main_print_usage_screen_brief
        exit_because_wrong_num_args
    fi
@}

function script_before_parsing_options_HELP_PRINT_COMPLETIONS_SCRIPT () @{
    script_PRINT_COMPLETIONS="usage: $@{script_PROGNAME@} help print-completions-script [options]"
    script_DESCRIPTION='Print the command-line completions script and exit.'
@}
function script_action_HELP_PRINT_COMPLETIONS_SCRIPT () @{
    if mbfl_wrong_num_args 0 $ARGC
    then mbfl_actions_completion_print_script "$COMPLETIONS_SCRIPT_NAMESPACE" "$script_PROGNAME"
    else
        mbfl_main_print_usage_screen_brief
        exit_because_wrong_num_args
    fi
@}
@end example

@c page
@node actions completion script
@subsection How to use the generated script


We can store the generated script in a file to be sourced upon launching the terminal, or we can
evaluate it with the command:

@example
eval "$(my-script help print-completions-script)"
@end example

For a script named @command{my-script}, it is a good idea to install a file with pathname:

@example
/etc/bash_completions.d/my-script.bash
@end example

@noindent
with contents:

@example
# my-script.bash --
#
# Completions for the "my-script" script.

eval "$(my-script help print-completions-script)"

### end of file
@end example

@c page
@node actions misc
@section Other functions


@defun mbfl_actions_fake_action_set @var{ACTION-SET}
Mutate @mbfl{}'s state to mimic the selection of an action set.  It is an error if @var{ACTION-SET}
is not the name of an existent action set.  This function should be used with care.
@end defun


@defun mbfl_actions_print_usage_screen
If an action set has been selected and its name is not @samp{NONE}: print the help screen
documenting the actions available in the set.
@end defun


@deffn {Function} exit_because_invalid_action_declaration
@deffnx {Alias} return_because_invalid_action_declaration
Exit or return with code @code{96}.
@end deffn


@deffn {Function} exit_because_invalid_action_set
@deffnx {Alias} return_because_invalid_action_set
Exit or return with code @code{97}.
@end deffn


@deffn {Function} exit_because_invalid_action_argument
@deffnx {Alias} return_because_invalid_action_argument
Exit or return with code @code{95}
@end deffn


@deffn {Function} exit_because_missing_action_function
@deffnx {Alias} return_because_missing_action_function
Exit or return with code @code{94}.
@end deffn

@c page
@node getopts
@chapter Parsing command line options


@cindex Parsing command line options
@cindex Command line options, parsing
@cindex Program command line options, parsing


The @code{getopts} module defines a set of procedures to be used to
process command line arguments with the following format:

@table @code
@item -a
Brief option @code{a} with no value.

@item -a123
Brief option @code{a} with value @code{123}.

@item --bianco
Long option @code{bianco} with no value.

@item --colour=bianco
Long option @code{colour} with value @code{bianco}.
@end table

@menu
* getopts arguments::           Arguments.
* getopts usage::               Using the module.
* getopts options::             Predefined options.
* getopts interface::           Interface functions.
@end menu

@c page
@node getopts arguments
@section Arguments


The @code{main} module contains, at the root level, a block of code like
the following:

@example
declare -i ARGC=0 ARGC1=0 ARG1ST=0
declare -a ARGV ARGV1

for ((ARGC1=0; $# > 0; ++ARGC1))
do
    ARGV1[$ARGC1]=$1
    shift
done
@end example

@noindent
this block is executed when @mbfl{} (and the script that loads it) is
evaluated.  Its purpose is to store command line arguments in the global
array @code{ARGV1} and the number of command line arguments in the
global variable @code{ARGC1}; the variable @code{ARG1ST} references the
next argument in @code{ARGV1} that must be processed.

The global array @code{ARGV} and the global variable @code{ARGC} are
predefined and should be used by the @code{mbfl_getopts_*} functions to
store non--option command line arguments.  Processing performed by the
@code{getopts} module must happen after processing performed by the
@code{actions} module.

Example:

@example
$ script --gulp wo --gasp=123 wa
@end example

@noindent
if the script makes use of @mbfl{}, the strings @code{wo} and @code{wa}
will go into @code{ARGV} and @code{ARGC} will be set to 2.  The option
arguments are processed and some action is performed to register them.

We can access the non--option arguments with the following code:

@example
for ((i=0; $i < $ARGC; ++i))
do
    # do something with $@{ARGV[$i]@}
done
@end example

When using the @code{actions} module: the first arguments can be
interpreted as special values that select an action to be performed by
the script; in such case the first argument is removed from the
@code{ARGV} array, so that processing the other arguments is not
affected.  @ref{actions intro, Introduction to action trees}.

@c page
@node getopts usage
@section Using the module


To use this module we have to declare a set of script options with the
function @func{mbfl_declare_option}.  Options declarations should be
done at the beginning of the script, before doing anything else, or in
the ``before parsing options'' functions.

In the main block of the script, options are parsed by invoking
@func{mbfl_getopts_parse}: this function will update global variables
and invoke a script function for each option on the command line.  It
can also select a function to be invoked as the main action of the
script.

@c ------------------------------------------------------------

@subsubheading Option with no argument

Example of option declaration:

@example
mbfl_declare_option ALPHA no a alpha noarg "enable alpha option"
@end example

@noindent
this code declares an option with no argument having properties:

@itemize
@item
Global variable @code{script_option_ALPHA}, which will be set to
@code{no} by default and to @code{yes} if the option is used.

@item
Brief switch @option{-a}.

@item
Long switch @option{--alpha}.

@item
Description @code{enable alpha option}, to be shown in the usage help
screen.
@end itemize

If the option is used: the function @code{script_option_update_alpha} is invoked (if it exists) with
no arguments, after the variable @code{script_option_ALPHA} has been set to @code{yes}; in the
function name: @code{alpha} is the lower case variant of the keyword @code{ALPHA}.  Valid option
uses are:

@example
$ script.sh -a
$ script.sh --alpha
@end example

@c ------------------------------------------------------------

@subsubheading Option with argument

Example of option declaration:

@example
mbfl_declare_option BETA 123 b beta witharg "select beta value"
@end example

@noindent
this code declares an option with argument having properties:

@itemize
@item
Global variable @code{script_option_BETA}, which will be set to
@code{123} by default and to the value selected on the command line if
the option is used.

@item
Brief switch @option{-b}.

@item
Long switch @option{--beta}.

@item
Description @code{select beta value}, to be shown in the usage output.
@end itemize

If the option is used: the function @code{script_option_update_beta} is invoked (if it exists) with
no arguments, after the variable @code{script_option_BETA} has been set to the selected value; in
the function name: @code{beta} is the lower case variant of the keyword @code{BETA}.  Valid option
uses are:

@example
$ script.sh -b456
$ script.sh --beta=456
@end example

@noindent
it is an error to use the switch @option{-b} or  @option{--beta} with
no argument (that is: with an empty string as argument).

@c ------------------------------------------------------------

@subsubheading Action options

A special option example:

@example
mbfl_declare_option ACTION_GAMMA \
   no g gamma noarg "do gamma action"
mbfl_declare_option ACTION_DELTA \
   yes d delta noarg "do delta action"
@end example

@noindent
this code declares two options with no arguments; the difference from
the other declarations is that the keywords are prefixed with
@code{ACTION_}: this prefix is recognised by the module and causes, if
the option is used on the command line, the following code to be
evaluated at arguments parsing time:

@example
mbfl_main_set_main script_action_gamma
@end example

@noindent
or:

@example
mbfl_main_set_main script_action_delta
@end example

@noindent
where the argument @code{script_action_gamma} is built by prefixing the
lower case version of the keyword with @code{script_}.  The code selects
a function as main function for the script.  @ref{main function, Driving
script execution}.

Additionally, if the default value is @code{yes}: the main function is
selected at declaration time (that is by @func{mbfl_declare_option});
this is useful to declare an action option and select automatically the
action function.  In the example: the function
@func{script_action_delta} is selected as main action function.

It is an error to declare a keyword prefixed with @code{ACTION_} with an
option with argument (@code{witharg} as argument to
@func{mbfl_declare_option}).

@c page
@node getopts options
@section Predefined options


A set of predefined options is recognised by the library and not handed to the user defined
functions.

@table @option
@item --tmpdir=DIR
@anchor{--tmpdir}
@cindex @option{--tmpdir}, predefined option
@cindex Predefined option @option{--tmpdir}
Selects a directory for temporary files.  The default value is the one in the environment variable
@env{TMPDIR}, or @file{/tmp/$USER} if that variable is not set.  The value is stored in the variable
@code{mbfl_option_TMPDIR}.

@item --encoded-args
@anchor{--encoded-args}
@cindex @option{--encoded-args}, predefined option
@cindex Predefined option @option{--encoded-args}
Signals to the library that the non--option arguments and the option values are encoded in
hexadecimal strings.  Encoding is useful to avoid quoting problems when invoking a script from
another one.

If this option is used: the values are decoded by @func{mbfl_getopts_parse} before storing them in
the @code{ARGV} array and before being stored in the option's specific global variables.

@item -v
@itemx --verbose
@anchor{-v}
@anchor{--verbose}
@cindex @option{-v}, predefined option
@cindex Predefined option @option{-v}
@cindex @option{--verbose}, predefined option
@cindex Predefined option @option{--verbose}
Turns on verbose messages.  If this option is used: The function @func{mbfl_option_verbose} returns
true.  @ref{message, Printing messages to the console}.

@item --silent
@anchor{--silent}
@cindex @option{--silent}, predefined option
@cindex Predefined option @option{--silent}
Turns off verbose messages.  If this option is used: The function @func{mbfl_option_verbose} returns
false.

@item --verbose-program
@cindex @option{--verbose-program}, predefined option
@cindex Predefined option @option{--verbose-program}
If used: The @option{--verbose} option is added to the command line of external programs that
support it.  The function @func{mbfl_option_verbose_program} returns true or false depending on the
state of this option.

@item --show-program
@itemx --show-programs
@anchor{--show-program}
@anchor{--show-programs}
@cindex @option{--show-program}, predefined option
@cindex Predefined option @option{--show-program}
@cindex @option{--show-programs}, predefined option
@cindex Predefined option @option{--show-programs}
Prints the command line of executed external programs on @stderr{}.

@item --debug
@anchor{--debug}
@cindex @option{--debug}, predefined option
@cindex Predefined option @option{--debug}
Turns on debugging messages.  Automatically turns on verbose messages and program showing.
@ref{message, Printing messages to the console}.

@item --test
@anchor{--test}
@cindex @option{--test}, predefined option
@cindex Predefined option @option{--test}
Turns on test execution.  @ref{program executing testing, Testing a script and external programs}.

@item --null
@anchor{--null}
@cindex @option{--null}, predefined option
@cindex Predefined option @option{--null}
Signals to the script that it has to use the null character to separate values, instead of the
common newline.  The global variable @code{mbfl_option_NULL} is set to @code{yes}.

@item -f
@itemx --force
@anchor{-f}
@anchor{--force}
@cindex @option{-f}, predefined option
@cindex Predefined option @option{-f}
@cindex @option{--force}, predefined option
@cindex Predefined option @option{--force}
Signals to the script that it does @strong{not} have to query the user before doing dangerous
operations, like overwriting files.  The global variable @code{mbfl_option_INTERACTIVE} is set to
@code{no}.

An use of the option @option{--force} on the command line overrides all the previous uses of the
option @option{--interactive}.

@item -i
@itemx --interactive
@anchor{-i}
@anchor{--interactive}
@cindex @option{-i}, predefined option
@cindex Predefined option @option{-i}
@cindex @option{--interactive}, predefined option
@cindex Predefined option @option{--interactive}
Signals to the script that it @strong{does} have to query the user before doing dangerous
operations, like overwriting files.  The global variable @code{mbfl_option_INTERACTIVE} is set to
@code{yes}.

An use of the option @option{--interactive} on the command line overrides all the previous uses of
the option @option{--force}.

@item --validate-programs
@anchor{--validate-programs}
@cindex @option{--validate-programs}, predefined option
@cindex Predefined option @option{--validate-programs}
Validates the existence of all the programs needed by the script; then exits.  The exit code is zero
if all the programs were found, one otherwise.  We can pair this option with @option{--verbose} to
see the list of programs and checks.

@item --list-exit-codes
@anchor{--list-exit-codes}
@cindex @option{--list-exit-codes}, predefined option
@cindex Predefined option @option{--list-exit-codes}
Prints a list of numerical exit codes and their associated names, as declared in the script.
@ref{main exit, Declaring exit codes}.

@item --print-exit-code=NAME
@anchor{--print-exit-code}
@cindex @option{--print-exit-code}, predefined option
@cindex Predefined option @option{--print-exit-code}
Prints the numerical exit code associated to @code{NAME}.

@item --print-exit-code-names=CODE
@cindex @option{--print-exit-code-names}, predefined option
@cindex Predefined option @option{--print-exit-code-names}
Prints the list of names associated to the numerical exit @code{CODE}.

@item --version
@anchor{--version}
@cindex @option{--version}, predefined option
@cindex Predefined option @option{--version}
Prints to the standard output of the script the contents of the global variable
@code{mbfl_message_VERSION}, then exits with code zero.  The variable makes use of the service
variables.  @ref{variables service, Required user defined variables}.

@item --version-only
@cindex @option{--version-only}, predefined option
@cindex Predefined option @option{--version-only}
Prints to the standard output of the script the contents of the global variable
@code{script_VERSION}, then exits with code zero.  @ref{variables service, Required user defined
variables}.

@item --license
@anchor{--license}
@cindex @option{--license}, predefined option
@cindex Predefined option @option{--license}
Prints to the standard output of the script the contents of one of the global variables
@code{mbfl_message_LICENSE_*}, then exits with code zero.  The variable makes use of the service
variables.  @ref{variables service, Required user defined variables}.

@item -h
@itemx --help
@itemx --usage
@anchor{-h}
@anchor{--help}
@anchor{--usage}
@cindex @option{-h}, predefined option
@cindex Predefined option @option{-h}
@cindex @option{--help}, predefined option
@cindex Predefined option @option{--help}
@cindex @option{--usage}, predefined option
@cindex Predefined option @option{--usage}
Prints to the standard output of the script: the contents of the global variable
@code{script_USAGE}; a newline; the string @code{options:}; a newline; an automatically generated
string describing the options declared with @func{mbfl_declare_option}; a string describing the
@mbfl{} default options; the contents of the global variable @code{script_EXAMPLES}.  Then exits
with code zero.  @ref{variables service, Required user defined variables}.

@item -H
@itemx --brief-help
@itemx --brief-usage
@anchor{-H}
@anchor{--brief-help}
@anchor{--brief-usage}
@cindex @option{-H}, predefined option
@cindex Predefined option @option{-H}
@cindex @option{--brief-help}, predefined option
@cindex Predefined option @option{--brief-help}
@cindex @option{--brief-usage}, predefined option
@cindex Predefined option @option{--brief-usage}
Prints to the standard output of the script: the contents of the global variable
@code{script_USAGE}; a newline; the string @code{options:}; a newline; an automatically generated
string describing the options declared with @func{mbfl_declare_option}.  Then exits with code zero.

The difference with @option{--help} is that predefined options and usage examples are not displayed.

@item --print-options
@anchor{--print-options}
@cindex @option{--print-options}, predefined option
@cindex Predefined option @option{--print-options}
Print all the long options with @func{mbfl_getopts_print_long_switches}, then exit the script with
code zero.
@end table


The following functions may be used to set, unset and query the state of the predefined options.

@c ------------------------------------------------------------------------

@macro MbflSetUnsetOptionFunctions{OPTNAME, OPTARG, TAILDOC}
@anchor{mbfl_option_\OPTNAME\}
@anchor{mbfl_set_option_\OPTNAME\}
@anchor{mbfl_unset_option_\OPTNAME\}
@defun mbfl_option_\OPTNAME\
@defunx mbfl_set_option_\OPTNAME\
@defunx mbfl_unset_option_\OPTNAME\
Query/set/unset the encoded arguments option.

@func{mbfl_option_\OPTNAME\} returns true if the option @option{--\OPTARG\} was used on the command
line.  \TAILDOC\
@end defun

@end macro

@MbflSetUnsetOptionFunctions{debug, debug,}
@MbflSetUnsetOptionFunctions{encoded_args, encoded-args,}
@MbflSetUnsetOptionFunctions{force, force,}
@MbflSetUnsetOptionFunctions{interactive, interactive,}
@MbflSetUnsetOptionFunctions{null, null,}
@MbflSetUnsetOptionFunctions{show_program, show-program, Print the command line of executed external program on @stderr{}.  This does not disable program execution@comma{} it just prints the command line before executing it.}
@MbflSetUnsetOptionFunctions{test, test,}
@MbflSetUnsetOptionFunctions{verbose, verbose,}
@MbflSetUnsetOptionFunctions{verbose_program, verbose-program, This option@comma{} of course@comma{} is supported only for programs that are known by @mbfl{} (like @command{rm}): if a program is executed with @func{mbfl_program_exec}@comma{} it is responsibility of the caller to use the option.}

@c ------------------------------------------------------------------------

The following are special option functions.

@macro MbflSaveRestoreOptionFunctions{OPTNAME, OPTARG}
@anchor{mbfl_option_\OPTNAME\_save}
@anchor{mbfl_option_\OPTNAME\_restore}
@defun mbfl_option_\OPTNAME\_save
@defunx mbfl_option_\OPTNAME\_restore
Save/restore the current state of the @option{--\OPTARG\} option then invoke
@func{mbfl_unset_option_\OPTNAME\}.  Upon entering these functions: the value of @code{$?} is saved,
the options states are processed, then the saved @code{$?} value is used as return value for the
function call.
@end defun

@end macro

@MbflSaveRestoreOptionFunctions{debug, debug}
@MbflSaveRestoreOptionFunctions{encoded_args, encoded-args}
@MbflSaveRestoreOptionFunctions{force, force}
@MbflSaveRestoreOptionFunctions{interactive, interactive}
@MbflSaveRestoreOptionFunctions{null, null}
@MbflSaveRestoreOptionFunctions{show_program, show-program}
@MbflSaveRestoreOptionFunctions{test, test}
@MbflSaveRestoreOptionFunctions{verbose, verbose}
@MbflSaveRestoreOptionFunctions{verbose_program, verbose-program}

@c page
@node getopts interface
@section Interface functions


@menu
* getopts interface declare::   Declaring command--line options.
* getopts interface parse::     Parsing command--line options.
* getopts interface preds::     Inspecting string options with
                                predicates.
* getopts interface args::      Command--line arguments.
* getopts interface exit::      Exiting and returning.
* getopts interface gather::    Gathering predefined options.
* getopts interface misc::      Miscellaneous functions.
@end menu

@c page
@node getopts interface declare
@subsection Declaring command--line options


Every declared option should have a long switch, the brief switch can be omitted.


@defun mbfl_declare_option @var{KEYWORD} @var{DEFAULT} @var{BRIEF} @var{LONG} @var{HASARG} @var{DESCRIPTION}
Declare a new option.  Arguments description follows.

@table @var
@item KEYWORD
A string identifying the option; internally it is used to build a function name and a variable name.
It is safer to limit this string to the letters in the ranges @code{a-z}, @code{A-Z} and
underscores.

@item DEFAULT
The default value for the option.  For an option with argument it can be anything; for an option
with no argument: it must be @code{yes} or @code{no}.

@item BRIEF
The brief option selector: a single character.  It is safer to choose a single letter (lower or
upper case) in the @acronym{ASCII} standard.  This argument can be the empty string if this option
has no brief selector.

@item LONG
The long option selector: a string.  It is safer to choose a sequence of letters in the
@acronym{ASCII} standard, separated by underscores or dashes.  This argument can be the empty string
if this option has no long selector.

@item HASARG
Either @code{witharg} or @code{noarg}: declares if the option requires an argument or not.

@item DESCRIPTION
A one--line string briefly describing the option.  This string will be printed with @func{printf}
using the @code{%b} format directive, which will cause the expansion of some backslash escpe
sequences in @var{DESCRIPTION}.
@end table
@end defun

@c page
@node getopts interface parse
@subsection Parsing command--line options


@defun mbfl_getopts_parse
Parse a set of command--line options.  The options are handed to user defined functions.  The global
array @code{ARGV1} and the global variable @code{ARGC1} must hold the command line arguments and the
number of command line arguments, the global variable @code{ARG1ST} must hold the index of the first
element in @code{ARGV1} that must be parsed.  Non--option arguments are left in the global array
@code{ARGV}, the global variable @code{ARGC} holds the number of elements in @code{ARGV}.

If successful return @code{0}, else return @code{1}.
@end defun

@c page
@node getopts interface preds
@subsection Inspecting string options with predicates


@defun mbfl_getopts_islong @var{STRING}
@defunx mbfl_getopts_islong @var{STRING} @var{VARNAME}
Verify if a string has the format of a long option without argument.  @var{STRING} is the string to
validate.  The optional @var{VARNAME} is the name of a variable that this function will set to the
option name from @var{STRING}, without the leading dashes.

Return with code zero if the string is a long option without argument, else returns with code one.

An option must be of the form @code{--option}, only characters in the ranges @code{A-Z}, @code{a-z},
@code{0-9} and the characters @code{-} and @code{_} are allowed in the option name.

Usage examples:

@example
mbfl_getopts_islong --option            @result{} 0
mbfl_getopts_islong --option=123        @result{} 1
mbfl_getopts_islong gasp                @result{} 1
@end example
@end defun


@defun mbfl_getopts_islong_with @var{STRING}
@defunx mbfl_getopts_islong_with @var{STRING} @var{OPTNAME} @var{VARNAME}
Verify if a string has the format of a long option with argument.  Arguments:

@table @var
@item STRING
The string to validate.

@item OPTNAME
Optional name of a variable that this function will set to the option name from @var{STRING},
without the leading dashes.

@item VARNAME
Optional name of a variable that this function will set to the option value from @var{STRING}.
@end table

Return with code @code{0} if the string is a long option with argument.  Return with code @code{1}
if the string is not an option with argument.

An option must be of the form @code{--option=value}, only characters in the ranges @code{A-Z},
@code{a-z}, @code{0-9} and the characters @code{-} and @code{_} are allowed in the option name.

If the argument is not an option with value, the variable names are ignored.

Usage examples:

@example
mbfl_getopts_islong_with --option=one   @result{} 0
mbfl_getopts_islong_with --option       @result{} 1
mbfl_getopts_islong_with wappa          @result{} 1
mbfl_getopts_islong_with --option=      @result{} 1
mbfl_getopts_islong_with --=            @result{} 1
@end example
@end defun


@defun mbfl_getopts_isbrief @var{STRING}
@defunx mbfl_getopts_isbrief @var{STRING} @var{VARNAME}
Verify if a string has the format of a brief option without argument.  @var{STRING} is the string to
validate.  The optional @var{VARNAME} is the name of a variable that this function will set to the
option name from @var{STRING}, without the leading dash.

Return with code zero if the argument is a brief option without argument, else return with code one.

A brief option must be of the form @code{-a}, only characters in the ranges @code{A-Z}, @code{a-z},
@code{0-9} are allowed as option letters.

Usage examples:

@example
mbfl_getopts_isbrief -o         @result{} 0
mbfl_getopts_isbrief -o123      @result{} 1
mbfl_getopts_isbrief gasp       @result{} 1
@end example
@end defun


@defun mbfl_getopts_isbrief_with @var{STRING}
@defunx mbfl_getopts_isbrief_with @var{STRING} @var{OPTNAME} @var{VALNAME}
Verify if a string has the format of a brief option with argument.  Arguments:

@table @var
@item STRING
The string to validate.

@item OPTNAME
Optional name of a variable that this function will set to the option name from @var{STRING},
without the leading dashes.

@item VALNAME
Optional name of a variable that this function will set to the option value.
@end table

Return with code zero if the argument is a brief option without argument, else return with code one.

A brief option must be of the form @code{-aV} (@code{a} is the option, @code{V} is the value), only
characters in the ranges @code{A-Z}, @code{a-z}, @code{0-9} are allowed as option letters.

Usage examples:

@example
mbfl_getopts_isbrief_with -o123         @result{} 0
mbfl_getopts_isbrief_with -o            @result{} 1
mbfl_getopts_isbrief_with --option      @result{} 1
mbfl_getopts_isbrief_with wappa         @result{} 1
@end example
@end defun

@c page
@node getopts interface args
@subsection Command--line arguments


Usually, in a script action function, we want to do this:

@example
function script_action_DO_SOMETHING () @{
    local -r NUMBER_OF_REQUIRED_ARGUMENTS=3

    if ! mbfl_wrong_num_args $NUMBER_OF_REQUIRED_ARGUMENTS $ARGC
    then
        mbfl_main_print_usage_screen_brief
        exit_because_wrong_num_args
    fi

    ... do something ...
@}
@end example


@defun mbfl_wrong_num_args @var{REQUIRED} @var{PRESENT}
Validate the number of arguments.  @var{REQUIRED} is the required number of arguments, @var{PRESENT}
is the given number of arguments on the command line.  If the number of arguments is different from
the required one: print an error message and return with code one; else return with code zero.
@end defun


@defun mbfl_wrong_num_args_range @var{MIN_REQUIRED} @var{MAX_REQUIRED} @var{ARGC}
Validate the number of arguments.  @var{ARGC} must be between @var{MIN_REQUIRED} and
@var{MAX_REQUIRED}, inclusive.
@end defun


@defun mbfl_argv_from_stdin
If the @code{ARGC} global variable is set to zero: fills the global variable @code{ARGV} with lines
read from stdin.  If the global variable @code{mbfl_option_NULL} is set to @code{yes}: lines are
read using the null character as terminator, else they are read using the standard newline as
terminator.

This function may block waiting for input.
@end defun


@defun mbfl_argv_all_files
Check that all the arguments in @code{ARGV} are file names of existent files.  Return with code zero
if no errors, else print an error message and return with code 1.
@end defun

@c page
@node getopts interface gather
@subsection Gathering predefined options


Gathering predefined options is useful when executing an @mbfl{} script as subprocess for an @mbfl{}
script: we can hand the subprocess the same options that were given to the process, or maybe change
them.  The following functions are used to gather the required options:

@example
mbfl_option_verbose
mbfl_option_verbose_program
mbfl_option_debug
mbfl_option_show_program
mbfl_option_test
mbfl_option_interactive
mbfl_option_null
mbfl_option_encoded_args
@end example


@defun mbfl_getopts_gather_mbfl_options_var @var{_RV}
Append to the data variable whose name is @var{_RV} a list of @mbfl{} command--line options
reflecting the current @mbfl{} options state.  Assuming no predefined options were given on the
command line:

@example
mbfl_declare_varref(FLAGS)

mbfl_set_option_verbose
mbfl_set_option_test
mbfl_getopts_gather_mbfl_options_var mbfl_datavar(FLAGS)
"$FLAGS"        @result{} '--verbose --test'
@end example

We can test how this works with:

@example
@{
   mbfl_declare_varref(FLAGS)
   local -a ARGV1=('--show-program' '--verbose-program')
   local -i ARGC1=mbfl_slots_number(ARGV1)
   local -i ARG1ST=0
   local -a ARGV
   local -i ARGC=0

   mbfl_getopts_reset
   mbfl_getopts_parse

   FLAGS='-a -b -c'
   mbfl_getopts_gather_mbfl_options_var mbfl_datavar(FLAGS)
   mbfl_string_equal "$FLAGS" '-a -b -c --verbose-program --show-program'
@}
@result{} 0
@end example
@end defun


@defun mbfl_getopts_gather_mbfl_options_array @var{_RV_ARRAY}
Append to the pairs in the indexed array variable whose name is @var{_RV_ARRAY} a list of @mbfl{}
command--line options reflecting the current @mbfl{} options state.  Assuming no predefined options
were given on the command line:

@example
mbfl_declare_index_array_varref(FLAGS_ARRY)

mbfl_set_option_verbose
mbfl_set_option_test
mbfl_getopts_gather_mbfl_options_array mbfl_datavar(FLAGS_ARRY)
mbfl_slot_ref(FLAGS_ARRY, 0)    @result{} --verbose
mbfl_slot_ref(FLAGS_ARRY, 1)    @result{} --test
@end example

We can test how this works with:

@example
@{
   mbfl_declare_index_array_varref(FLAGS_ARRY, ('-a' '-b' '-c'))
   local -a ARGV1=('--show-program' '--verbose-program')
   local -i ARGC1=mbfl_slots_number(ARGV1)
   local -i ARG1ST=0
   local -a ARGV
   local -i ARGC=0

   mbfl_getopts_reset
   mbfl_getopts_parse

   FLAGS='-a -b -c'
   mbfl_getopts_gather_mbfl_options_array mbfl_datavar(FLAGS_ARRY)
   mbfl_slot_ref(FLAGS_ARRY, 0)         @result{} -a
   mbfl_slot_ref(FLAGS_ARRY, 1)         @result{} -b
   mbfl_slot_ref(FLAGS_ARRY, 2)         @result{} -c
   mbfl_slot_ref(FLAGS_ARRY, 3)         @result{} --verbose-program
   mbfl_slot_ref(FLAGS_ARRY, 4)         @result{} --show-program
@}
@end example

Once we have built the array, we can extract its values with:

@example
mbfl_slots_qvalues(FLAGS_ARRY)
@end example
@end defun

@c page
@node getopts interface exit
@subsection Exiting and returning


@deffn {Function} exit_because_wrong_num_args
@deffnx {Alias} return_because_wrong_num_args
Exit or return with code @code{98}.
@end deffn



@deffn {Function} exit_because_invalid_option_declaration
@deffnx {Alias} return_because_invalid_option_declaration
Exit or return with code @code{93}.
@end deffn


@deffn {Function} exit_because_invalid_option_argument
@deffnx {Alias} return_because_invalid_option_argument
Exit or return with code @code{92}.
@end deffn

@c page
@node getopts interface misc
@subsection Miscellaneous functions


@defun mbfl_getopts_print_long_switches
Print all the long switches in a row, separated by spaces.  This is useful to retrieve the option
for Bash programmable completion.
@end defun


@defun mbfl_getopts_reset
Reset to empty the internal state representing the declared options.
@end defun

@c page
@node message
@chapter Printing messages to the console


This module allows us to print messages to an output channel.  Various forms of message are
supported.  All the function names are prefixed with @code{mbfl_message_}.  Almost all the messages
will have one of the forms:

@example
<progname>: <message>
<progname>: error: <message>
<progname>: warning: <message>
<progname>: debug: <message>
@end example

@menu
* message config::              Message module configuration.
* message plain::               Printing plain messages.
* message format::              Printing formatted messages.
@end menu

@c page
@node message config
@section Message module configuration


@defun mbfl_message_set_progname @var{PROGNAME}
Set the script's official name to put at the beginning of messages.  This value is initialised to
@code{script_PROGNAME}.
@end defun


@defun mbfl_message_set_channel @var{CHANNEL}
Select the channel to be used to output messages.  @var{CHANNEL} must be a numeric string,
otherwise: an error is printed on the old channel and the function returns false.  This value is
initialised to @code{2}, which is @stderr{}.
@end defun

@c page
@node message plain
@section Printing plain messages


@defun mbfl_message_string @var{STRING}
Output a message to the selected output channel.  Echo a string composed of: the selected program
name, a colon, a space, @var{STRING}.  No newline character is appended to the message.  Escape
characters supported by @code{printf} are allowed in @var{STRING}.
@end defun


@defun mbfl_message_verbose @var{STRING}
Output a message to the selected output channel, but only if the evaluation of the function
@func{mbfl_option_verbose} returns true.

Echo a string composed of: the selected program name, a colon, a space, @var{STRING}.  No newline
character is appended to the message.  Escape characters supported by @code{printf} are allowed in
@var{STRING}.
@end defun


@defun mbfl_message_verbose_end @var{STRING}
Output a message to the selected output channel, but only if the evaluation of the function
@func{mbfl_option_verbose} returns true.  Echo the string.  No newline character is appended to the
message.  Escape characters supported by @code{printf} are allowed in @var{STRING}.

If @var{STRING} is empty: this function just prints a newline when verbose execution is enabled.
@end defun


@defun mbfl_message_error @var{STRING}
Output an error message to the selected output channel.  Echo a string composed of: the selected
program name, a colon, a space, the string @code{error}, a colon, a space, @var{STRING}, a newline
character.  Escape characters supported by @code{printf} are allowed in @var{STRING}.
@end defun


@defun mbfl_message_warning @var{STRING}
Output a warning message to the selected output channel.  Echo a string composed of: the selected
program name, a colon, a space, the string @code{warning}, a colon, a space, @var{STRING}, a newline
character.  Escape characters supported by @code{printf} are allowed in @var{STRING}.
@end defun


@defun mbfl_message_debug @var{STRING}
Output a message to the selected output channel, but only if the evaluation of the function
@func{mbfl_option_debug} returns true.  Echo a string composed of: the selected program name, a
colon, a space, @var{STRING}, a newline character.  Escape characters supported by @code{printf} are
allowed in @var{STRING}.
@end defun

@c page
@node message format
@section Printing formatted messages


@defun mbfl_message_verbose_printf @var{TEMPLATE} [@var{ARG} @dots{}]
Format the arguments in the same way @code{printf} would do; output the resulting string to the
selected output channel, but only if the evaluation of the function @func{mbfl_option_verbose}
returns true.

Echo a string composed of: the selected program name, a colon, a space, the formatting result.  No
newline character is appended to the message.
@end defun


@defun mbfl_message_error_printf @var{TEMPLATE} [@var{ARG} @dots{}]
Format the arguments in the same way @code{printf} would do; output the resulting string to the
selected output channel.

Echo a string composed of: the selected program name, a colon, a space, the string @code{error}, a
colon, a space, the formatting result, a newline character.
@end defun


@defun mbfl_message_warning_printf @var{TEMPLATE} [@var{ARG} @dots{}]
Format the arguments in the same way @code{printf} would do; output the resulting string to the
selected output channel.

Echo a string composed of: the selected program name, a colon, a space, the string @code{warning}, a
colon, a space, the formatting result, a newline character.
@end defun


@defun mbfl_message_debug_printf @var{TEMPLATE} [@var{ARG} @dots{}]
Format the arguments in the same way @code{printf} would do; output the resulting string to the
selected output channel, but only if the evaluation of the function @func{mbfl_option_debug}
returns true.

Echo a string composed of: the selected program name, a colon, a space, the string @code{debug}, a
colon, a space, the formatting result, a newline character.
@end defun

@c page
@node dialog
@chapter Interacting with the user


@defun mbfl_dialog_yes_or_no @var{STRING}
@defunx mbfl_dialog_yes_or_no @var{STRING} @var{PROGNAME}
Print the question @var{STRING} on the standard output and wait for the user to type @code{yes} or
@code{no} in the standard input.  Return true if the user has typed @code{yes}, false if the user
has typed @code{no}.

The optional parameter @var{PROGNAME} is used as prefix for the prompt; if not given: It defaults to
the value of @code{script_PROGNAME}.  @ref{variables service, Required user defined variables}.
@end defun


@defun mbfl_dialog_enable_programs
Declare the usage of the external program @command{stty}, which is used by
@func{mbfl_dialog_ask_password} to turn of password echoing on the terminal.
@end defun


@defun mbfl_dialog_ask_password @var{PROMPT}
@defunx mbfl_dialog_ask_password_var @var{_RV} @var{PROMPT}
Print @var{PROMPT} followed by a colon and a space, then reads a password from the terminal.  Print
the password.

@DocVarVariant{}
@end defun

@c page
@node file
@chapter Manipulating files and pathnames


@menu
* file conventions::            Coding conventions and identifier names.
* file names::                  Manipulating file names.
* file listing::                Listing directory entries.
* file stat::                   Inspecting files and directories.
* file mkdir::                  Creating directories.
* file copy::                   Copying files.
* file move::                   Moving files.
* file removing::               Removing files and directories.
* file symlink::                Creating links and symbolic links.
* file realpath::               Normalising pathnames.
* file perms::                  Setting and getting file access permissions.
* file owner::                  Setting file owner and group.
* file testing::                Testing file existence and the like.
* file read and write::         Reading and writing files with privileges.
* file cd::                     Changing directory.
* file fifo::                   Named pipes.
@end menu

@c page
@node file conventions
@section Coding conventions and identifier names


In this documentation, some predicate functions accept an optional parameter @var{PRINT_ERROR}: it
will cause an error message to be printed with @func{mbfl_message_error} if the test fails; the
argument value must be @code{print_error}.

@c page
@node file names
@section File names


@menu
* file names parts::            Splitting a file name into its
                                components.
* file names path::             Absolute and relative pathnames.
* file names system::           Finding pathnames on the system.
@end menu


@c page
@node file names parts
@subsection Splitting a file name into its components


@defun mbfl_file_extension @var{PATHNAME}
@defunx mbfl_file_extension_var @var{_RV} @var{PATHNAME}
Extract the extension from a file name.  Starting from the end of the string @var{PATHNAME}: search
the last dot character in the argument string and echo to stdout the range of characters from the
dot to the end, not including the dot.  If a slash character or the beginning of the string is found
first: echoes to stdout the empty string.

@DocVarVariant{}

@example
mbfl_file_extension /path/to/file.ext   @print{} ext
mbfl_file_extension /path/to/file.      @print{} <no output>
mbfl_file_extension /path/to/file       @print{} <no output>
mbfl_file_extension /path/to/.file.ext  @print{} ext
mbfl_file_extension /path/to/.dotfile   @print{} <no output>
mbfl_file_extension .dotfile            @print{} <no output>

local _RV
mbfl_file_extension_var _RV /path/to/file.ext
"$_RV"  @result{} ext
@end example
@end defun


@defun mbfl_file_dirname @var{PATHNAME}
@defunx mbfl_file_dirname_var @var{_RV} @var{PATHNAME}
Extract the directory part from a fully qualified file name.  Search the last slash character in the
input string and echo to stdout the range of characters from the first to the slash, not including
the slash.

If no slash is found: echo a single dot (the current directory).

If the input string begins with @code{/} or @code{//} with no slash characters after the first ones:
echo a single slash.

@DocVarVariant{}

@example
mbfl_file_dirname /path/to/file.ext     @print{} /path/to
mbfl_file_dirname file.ext              @print{} .
mbfl_file_dirname /file.ext             @print{} /
mbfl_file_dirname //file.ext            @print{} /
mbfl_file_dirname /path/to///file.ext   @print{} /path/to
mbfl_file_dirname //////file.ext        @print{} /
mbfl_file_dirname a/b                   @print{} a
mbfl_file_dirname a                     @print{} .
mbfl_file_dirname ../a                  @print{} ..
mbfl_file_dirname ./a                   @print{} .
mbfl_file_dirname ../abcd               @print{} ..
mbfl_file_dirname ./abcd                @print{} .
mbfl_file_dirname ../abcd/efgh          @print{} ../abcd
mbfl_file_dirname ./abcd/efgh           @print{} ./abcd

local _RV
mbfl_file_dirname_var _RV /path/to/file.ext
"$_RV" @result{} /path/to
@end example
@end defun


@defun mbfl_file_rootname @var{PATHNAME}
@defunx mbfl_file_rootname_var @var{_RV} @var{PATHNAME}
Extract the root portion of a file pathname: everything excluding the last component's extension and
the extension's dot separator.  Search the last dot character in the argument string and echo to
stdout the range of characters from the beginning to the dot, not including the dot.  If a slash is
the last character: skip it; then if a slash character is found first, or no dot is found, or the
dot is the first character: echo the full @var{PATHNAME}.

@DocVarVariant{}

@example
mbfl_file_rootname file.ext              @print{} file
mbfl_file_rootname /path/to/file.ext     @print{} /path/to/file
mbfl_file_rootname /path/to/file..ext    @print{} /path/to/file.
mbfl_file_rootname /path/to/file.ext/    @print{} /path/to/file
mbfl_file_rootname /path/to/file.ext///  @print{} /path/to/file
mbfl_file_rootname /path/to/file         @print{} /path/to/file
mbfl_file_rootname /path/to.to/file      @print{} /path/to.to/file
mbfl_file_rootname .dotfile              @print{} .dotfile
mbfl_file_rootname /path/to/.dotfile     @print{} /path/to/.dotfile
mbfl_file_rootname a                     @print{} a
mbfl_file_rootname /                     @print{} /
mbfl_file_rootname .                     @print{} .
mbfl_file_rootname ..                    @print{} ..

local _RV
mbfl_file_rootname_var /path/to/file.ext
"$_RV" @result{} /path/to/file
@end example
@end defun


@defun mbfl_file_tail @var{PATHNAME}
@defunx mbfl_file_tail_var @var{_RV} @var{PATHNAME}
Extract the file portion from a fully qualified pathname.  Search the last slash character in the
input string and echo to stdout the range of characters from the slash to the end, not including the
slash.  If no slash is found: echo the whole string.

@DocVarVariant{}

@example
mbfl_file_tail /path/to/file.ext  @print{} file.ext
mbfl_file_tail /path/to/          @print{} <no output>
mbfl_file_tail file.ext           @print{} file.ext

local _RV
mbfl_file_tail_var _RV /path/to/file.ext
"$_RV" @result{} file.ext
@end example
@end defun


@defun mbfl_file_split @var{PATHNAME}
Separate a file name into its components.  One or more contiguous occurrences of the slash character
is used as separator.  The components are stored in an array named @code{SPLITPATH}, that may be
declared @code{local} in the scope of the caller; the base index is zero.  The number of elements in
the array is stored in a variable named @code{SPLITCOUNT}.  Return true.

@example
local -a SPLITPATH
local -i SPLITCOUNT

mbfl_file_split /path/to/file.ext
"$@{SPLITPATH[0]@}"       @result{} path
"$@{SPLITPATH[1]@}"       @result{} to
"$@{SPLITPATH[2]@}"       @result{} file.ext
$SPLITCOUNT             @result{} 3
@end example
@end defun


@defun mbfl_file_strip_trailing_slash @var{PATHNAME}
@defunx mbfl_file_strip_trailing_slash_var @var{_RV} @var{PATHNAME}
Remove all the trailing slashes from @var{PATHNAME} and print the result on stdout.  If
@var{PATHNAME} consists only of slashes: print a single dot.

@DocVarVariant{}

@example
mbfl_file_strip_trailing_slash '/path/to/file.ext'
@print{} /path/to/file.ext

mbfl_file_strip_trailing_slash '/path/to/dir.ext/'
@print{} /path/to/dir.ext

mbfl_file_strip_trailing_slash '/path/to/dir.ext///'
@print{} /path/to/dir.ext

mbfl_file_strip_trailing_slash '/'      @print{} .
mbfl_file_strip_trailing_slash '///'    @print{} .
mbfl_file_strip_trailing_slash 'file'   @print{} file

local _RV
mbfl_file_strip_trailing_slash_var _RV '/path/to/dir.ext/'
"$_RV" @result{} /path/to/dir.ext
@end example
@end defun


@defun mbfl_file_strip_leading_slash @var{PATHNAME}
@defunx mbfl_file_strip_leading_slash_var @var{_RV} @var{PATHNAME}
Remove all the leading slashes from @var{PATHNAME} and print the result on stdout.  If
@var{PATHNAME} consists only of slashes: print a single dot.

@DocVarVariant{}

@example
mbfl_file_strip_leading_slash '/path/to/file.ext'
@print{} path/to/file.ext

mbfl_file_strip_leading_slash '/path/to/dir.ext/'
@print{} path/to/dir.ext/

mbfl_file_strip_leading_slash '///path/to/dir.ext'
@print{} path/to/dir.ext

mbfl_file_strip_leading_slash '/'       @print{} .
mbfl_file_strip_leading_slash '///'     @print{} .
mbfl_file_strip_leading_slash 'file'    @print{} file
@end example
@end defun


@defun mbfl_file_normalise @var{PATHNAME}
@defunx mbfl_file_normalise @var{PATHNAME} @var{PREFIX}
@defunx mbfl_file_normalise_var @var{_RV} @var{PATHNAME}
@defunx mbfl_file_normalise_var @var{_RV} @var{PATHNAME} @var{PREFIX}
Normalise a file name: remove all the occurrences of @code{.} and @code{..}.

If @var{PATHNAME} is relative (according to @func{mbfl_file_is_absolute}) and @var{PREFIX} is not
present or it is the empty string: the current process working directory is prepended to
@var{PATHNAME}.

If @var{PREFIX} is present and non empty, and @var{PATHNAME} is relative (according to
@func{mbfl_file_is_absolute}): @var{PREFIX} is prepended to @var{PATHNAME} and normalised, too.

Echo to stdout the normalised file name.  Return true.

@DocVarVariant{}
@end defun

@c page
@node file names path
@subsection Absolute and relative pathnames


@defun mbfl_file_subpathname @var{PATHNAME} @var{BASEDIR}
@defunx mbfl_file_subpathname_var @var{_RV} @var{PATHNAME} @var{BASEDIR}
If @var{PATHNAME} is a subdirectory or file under @var{BASEDIR}: print to stdout the subpathname
portion.  Example:

@example
mbfl_file_subpathname /a/b/c /a
-> ./b/c
@end example

Both @var{PATHNAME} and @var{BASEDIR} must be full (normalised) pathnames for this function to work.
If @var{PATHNAME} is recognised as subpathname of @var{BASEDIR}: the return code is zero; else the
return code is one.

@DocVarVariant{}

@example
mbfl_file_subpathname /a /a       @print{} ./
mbfl_file_subpathname /a/b/c /a/  @print{} ./b/c
mbfl_file_subpathname /a/b/c /a   @print{} ./b/c

mbfl_file_subpathname /a/b/c /d   @error{} no match

local _RV
mbfl_file_subpathname_var _RV /a/b/c /a
"$_RV" @result{} ./b/c
@end example
@end defun

@c ------------------------------------------------------------------------

@defun mbfl_file_is_absolute @var{PATHNAME}
Return true if the first character in @var{PATHNAME} is a slash (@code{/}); else return false.
@end defun


@defun mbfl_file_is_absolute_dirname @var{PATHNAME}
Return true if @var{PATHNAME} is a directory according to @func{mbfl_file_is_directory} and an
absolute pathname according to @func{mbfl_file_is_absolute}.
@end defun


@defun mbfl_file_is_absolute_filename @var{PATHNAME}
Return true if @var{PATHNAME} is a file according to @func{mbfl_file_is_file} and an absolute
pathname according to @func{mbfl_file_is_absolute}.
@end defun

@c ------------------------------------------------------------------------

@defun mbfl_file_is_relative @var{PATHNAME}
Return true if the first character in @var{PATHNAME} is @strong{not} a slash (@code{/}); else return
false.
@end defun


@defun mbfl_file_is_relative_dirname @var{PATHNAME}
Return true if @var{PATHNAME} is a directory according to @func{mbfl_file_is_directory} and an
relative pathname according to @func{mbfl_file_is_relative}.
@end defun


@defun mbfl_file_is_relative_filename @var{PATHNAME}
Return true if @var{PATHNAME} is a file according to @func{mbfl_file_is_file} and an relative
pathname according to @func{mbfl_file_is_relative}.
@end defun

@c page
@node file names system
@subsection Finding pathnames on the system


@defun mbfl_file_find_tmpdir
@defunx mbfl_file_find_tmpdir @var{PATHNAME}
@defunx mbfl_file_find_tmpdir_var @var{_RV}
@defunx mbfl_file_find_tmpdir_var @var{_RV} @var{PATHNAME}
Find a value for a temporary directory according to the following rules:

@enumerate
@item
If @var{PATHNAME} is not used: it defaults to the current value of @code{mbfl_option_TMPDIR}.

@item
If @var{PATHNAME} is not null and it is a directory and it is writable: it is accepted as value.

@item
If @var{PATHNAME} is invalid: the value @file{/tmp/$USER}, where @env{USER} is the environment
variable, is tried.

@item
Finally the value @file{/tmp} is tried.
@end enumerate

Echo the accepted value to stdout.  Return true if a value is found, false otherwise.

@DocVarVariant{}
@end defun

@c page
@node file listing
@section Listing directory entries


@cindex Files, listing
@cindex Files, owner
@cindex Files, group
@cindex Files, size
@cindex Listing files
@cindex Owner of files
@cindex Group of files
@cindex Size of files
@cindex Getting owner of files
@cindex Getting group of files
@cindex Getting size of files
@CindexCommand{ls}
@CindexCommand{readlink}
@CindexCommand{chmod}
@CindexCommand{chown}


@defun mbfl_file_enable_listing
Declare the commands required to retrieve informations about files and directories.  @ref{program
declaring, Declaring the intention to use a program}

The programs are: @command{ls}, @command{readlink}.
@end defun


@defun mbfl_file_listing @var{PATHNAME} @var{OPT} @dots{}
Execute the program @command{ls} with @var{PATHNAME} as argument.  If other arguments are present:
they are inserted as options in the command line of @command{ls}.
@end defun


@defun mbfl_file_long_listing @var{PATHNAME} @var{OPT} @dots{}
Execute the program @command{ls} with @var{PATHNAME} as argument and the flag @code{-l}.  If other
arguments are present: they are inserted as options in the command line of @command{ls}.
@end defun


@defun mbfl_file_normalise_link @var{PATHNAME}
Execute the program @command{readlink} to normalise the pathname of a symbolic link (remember that a
symbolic link references a file, never a directory).  Echo to stdout the normalised pathname.

The command line of @command{readlink} is:

@example
readlink  --canonicalize --no-newline "$@var{PATHNAME}"
@end example
@end defun


@defun mbfl_file_read_link @var{PATHNAME} @var{OPT} @dots{}
@defunx mbfl_file_readlink @var{PATHNAME} @var{OPT} @dots{}
Execute the program @command{readlink} to acquire the original pathname referenced by
@var{PATHNAME}, then print it.  If other arguments are present: they are inserted as options in the
command line of @command{readlink}.
@end defun


@defun mbfl_exec_ls @var{ARG} @dots{}
Execute the program @command{ls} with the given optional command line arguments.
@end defun


@defun mbfl_exec_readlink @var{ARG} @dots{}
Execute the program @command{readlink} with the given optional command line arguments.
@end defun

@c page
@node file stat
@section Inspecting files and directories


The @gnu{} Coreutils package comes with a command line program @command{stat} which implements
advanced inspection of file and directory status.  @xref{stat invocation, stat, Report file or file
system status, coreutils}.


@defun mbfl_file_enable_stat
Declare the intention to use the program @command{stat}.
@end defun


@defun mbfl_file_stat @var{PATHNAME} @var{OPT} @dots{}
@defunx mbfl_file_stat_var @var{_RV} @var{PATHNAME} @var{OPT} @dots{}
Execute the program @command{stat} with @var{PATHNAME} as first argument and the optional arguments
@var{OPT} inserted in the command line as options.

@example
mbfl_file_enable_stat

mbfl_file_stat /bin/ls --format='%F'
@result{} 0
@print{} regular

mbfl_file_stat /bin --format='%F'
@result{} 0
@print{} directory
@end example

@DocVarVariant{}
@end defun


@defun mbfl_file_get_size @var{PATHNAME}
@defunx mbfl_file_get_size_var @var{_RV} @var{PATHNAME}
Print the size of the file in bytes.

@DocVarVariant{}
@end defun


@defun mbfl_exec_stat @var{ARG} @dots{}
Execute the program @command{stat} using the given optional command line arguments.
@end defun

@c page
@node file mkdir
@section Creating directories


@cindex Creating directories
@cindex Directories, creating
@CindexCommand{mkdir}


@defun mbfl_file_enable_make_directory
Declare the commands required to create directories.  @ref{program
declaring, Declaring the intention to use a program}

The programs are: @command{mkdir}.
@end defun


@defun mbfl_file_make_directory @var{PATHNAME}
@defunx mbfl_file_make_directory @var{PATHNAME} @var{PERMISSIONS}
Create a directory named @var{PATHNAME}; all the non--existent parents are
created, too.  If @var{PERMISSIONS} is present: it is the specification
of directory permissions in octal mode.

This function does not test if the directory already exists: the command
is always executed.
@end defun


@defun mbfl_file_make_if_not_directory @var{PATHNAME}
@defunx mbfl_file_make_if_not_directory @var{PATHNAME} @var{PERMISSIONS}
Wrapper for @func{mbfl_file_make_directory} that creates the
directory if it does not exist.

If a @command{sudo} user was requested: this function resets the request
even if no command has been executed.
@end defun


@defun mbfl_exec_mkdir @var{ARG} @dots{}
Execute the program @command{mkdir} using the given optional command line arguments.
@end defun

@c page
@node file copy
@section Copying files


@cindex Copying files
@cindex Files, copying
@CindexCommand{cp}


At present, copying of directories is not supported; we have to create the directory and then copy
files into it.


@defun mbfl_file_enable_copy
Declare the commands required to copy files and directories.  @ref{program declaring, Declaring the
intention to use a program}

The programs are: @command{cp}.
@end defun


@defun mbfl_file_copy @var{SOURCE} @var{TARGET} ?@dots{}?
Copy the @var{SOURCE}, a file pathname, to @var{TARGET}, a file pathname.  Additional arguments are
handed to the command unchanged.

If @var{SOURCE} does not exist, or if it is not a file, an error is generated and the return value
is 1.  If @var{TARGET} exists an error is generated and the return value is 1.
@end defun


@defun mbfl_file_copy_to_directory @var{SOURCE} @var{TARGET} ?@dots{}?
Copy the @var{SOURCE}, a file pathname, into the directory @var{TARGET}.  Additional arguments are
handed to the command unchanged.

If @var{SOURCE} does not exist, or if it is not a file, an error is generated and the return value
is 1.  If @var{TARGET} does not exist or it is not a directory: an error message is generated and
the return value is 1.
@end defun


@defun mbfl_exec_cp @var{ARG} @dots{}
Execute the program @command{cp} using the given optional command line arguments.
@end defun

@c page
@node file move
@section Moving files


@cindex Moving files
@cindex Files, moving
@CindexCommand{mv}


@defun mbfl_file_enable_move
Declare the commands required to move files and directories.  @ref{program declaring, Declaring the
intention to use a program}

The programs are: @command{mv}.
@end defun


@defun mbfl_file_move @var{SOURCE} @var{TARGET} ?@dots{}?
Move the @var{SOURCE}, a file or directory, to @var{TARGET}, a pathname.  Additional arguments are
handed to the command unchanged.

If @var{SOURCE} does not exist, or if it is not readable, an error is generated and the return value
is 1.  If @var{TARGET} exists an error is generated and the return value is 1.
@end defun


@defun mbfl_file_move_to_directory @var{SOURCE} @var{TARGET} ?@dots{}?
Move the @var{SOURCE}, a file or directory, into the directory @var{TARGET}.  Additional arguments
are handed to the command unchanged.

If @var{SOURCE} does not exist, or if it is not readable, an error message is generated and the
return value is 1.  If @var{TARGET} does not exist or it is not a directory: an error is generated
and the return value is 1.
@end defun


@defun mbfl_exec_mv @var{ARG} @dots{}
Execute the program @command{mv} using the given optional command line arguments.
@end defun

@c page
@node file removing
@section Removing files and directories


@cindex Removing files
@cindex Files, removing
@CindexCommand{rm}
@CindexCommand{rmdir}


Files removal is forced: the @code{--force} option to @command{rm} is
always used.  It is responsibility of the caller to validate the
operation before invoking these functions.

Some functions test the existence of the pathname before attempting to
remove it: this is done only if test execution is disabled; if test
execution is enabled the command line is echoed to stderr to make it
easier to debug scripts.


@defun mbfl_file_enable_remove
Declare the commands required to remove files and directories.
@ref{program declaring, Declaring the intention to use a program}

The programs are: @command{rm}, @command{rmdir}.
@end defun


@defun mbfl_file_remove @var{PATHNAME}
Remove @var{PATHNAME}, no matter if it is a file or directory.  If it is
a directory: descend the sub-levels removing all of them.  If an error
occurs return 1.
@end defun


@defun mbfl_file_remove_file @var{PATHNAME}
Remove the file or symbolic link selected by @var{PATHNAME}.  If the
file does not exist or it is not a file or an error occurs: return 1.
@end defun


@defun mbfl_file_remove_symlink @var{PATHNAME}
Remove the symbolic link selected by @var{PATHNAME}.  If the link does
not exist or it is not a symbolic link or an error occurs: return 1.
@end defun


@defun mbfl_file_remove_file_or_symlink @var{PATHNAME}
Remove the file or symbolic link selected by @var{PATHNAME}.  If the
file does not exist or it is not a file or an error occurs: return 1.
@end defun


@defun mbfl_file_remove_directory @var{PATHNAME}
Remove the directory selected by @var{PATHNAME}.  If the directory does
not exist or an error occurs: return 1.
@end defun


@defun mbfl_file_remove_directory_silently @var{PATHNAME}
Like @func{mbfl_file_remove_directory}, but do not print messages if
the directory is not empty.
@end defun


@defun mbfl_exec_rm @var{ARG} @dots{}
Execute the program @command{rm} with the given optional command line arguments.
@end defun


@defun mbfl_exec_rmdir @var{ARG} @dots{}
Execute the program @command{rmdir} with the given optional command line arguments.
@end defun

@c page
@node file symlink
@section Creating links and symbolic links


@cindex Files, links
@cindex Files, symbolic links
@cindex Links between files
@cindex Symbolic links between files
@cindex Creating links between files
@cindex Creating symbolic links between files
@CindexCommand{ln}


@defun mbfl_file_enable_link
@defunx mbfl_file_enable_symlink
Declare the commands required to create links and symbolic links between files.  @ref{program
declaring, Declaring the intention to use a program}

The programs are: @command{ln}.
@end defun


@defun mbfl_file_symlink @var{ORIGINAL_NAME} @var{SYMLINK_NAME} @var{OPT} @dots{}
Create a symbolic link from @var{ORIGINAL_NAME} @var{LINK_NAME}.  Insert in the command line of
@command{ln} the given optional arguments.
@end defun


@defun mbfl_file_link @var{ORIGINAL_NAME} @var{LINK_NAME} @var{OPT} @dots{}
Create a link from @var{ORIGINAL_NAME} @var{LINK_NAME}.  Insert in the command line of @command{ln}
the given optional arguments.
@end defun


@defun mbfl_exec_ln @var{ARG} @dots{}
Execute the program @command{ln} using the given optional command line arguments.
@end defun

@c page
@node file realpath
@section Normalising pathnames


@cindex Files, normalisation
@CindexCommand{realpath}


@defun mbfl_file_enable_realpath
Declare the commands required to normalise pathnames.  @ref{program declaring, Declaring the
intention to use a program}

The programs are: @command{realpath}.
@end defun


@defun mbfl_file_realpath @var{PATHNAME} @var{OPT} @dots{}
@defunx mbfl_file_realpath_var @var{_RV} @var{PATHNAME} @var{OPT} @dots{}
Normalise the given @var{PATHNAME} using @command{realpath} and print the result to stdout.  The
optional arguments @var{OPT} are added, as options, to the command line of @command{realpath}.

@DocVarVariant{}
@end defun


@defun mbfl_exec_realpath @var{ARG} @dots{}
Execute the program @command{realpath} using the given optional command line arguments.
@end defun

@c page
@node file perms
@section Set/get file permissions


@cindex Files, permissions
@cindex Getting file permissions
@cindex Permissions of files
@cindex @command{chmod}, changing file and directory access permissions


@defun mbfl_file_enable_permissions
Declare the intention to use the programs required to get/set file permissions.  @ref{program
declaring, Declaring the intention to use a program}

The programs are: @command{stat}, @command{chmod}.
@end defun


@defun mbfl_file_get_permissions @var{PATHNAME}
@defunx mbfl_file_get_permissions_var @var{_RV} @var{PATHNAME}
Print the access permissions for @var{PATHNAME}, in octal format.

@DocVarVariant{}

@example
mbfl_file_get_permissions /bin/ls       @print{} 0755

mbfl_declare_varref(PERMS)
mbfl_file_get_permissions_var mbfl_datavar(PERMS) /bin/ls
"$PERMS" @result{} 0755
@end example
@end defun


To set permissions one may request the use of @command{sudo}: just request a user before invoking
the following function.  @ref{program executing, Executing a program}


@defun mbfl_file_set_permissions @var{MODE} @var{PATHNAME}
Set the access permissions for @var{PATHNAME}; @var{MODE} must be in a form accepted by
@command{chmod}.
@end defun


@defun mbfl_file_chmod @var{PERMISSIONS} @var{PATHNAME} @var{OPT} @dots{}
Execute the program @command{chmod} with @var{PERMISSIONS} as permissions arguments and
@var{PATHNAME} as file system pathname argument.  If the optional arguments @var{OPT} are present:
they are inserted as command line options.
@end defun


@defun mbfl_exec_chmod @var{ARG} @dots{}
Execute the program @command{chmod} using the given optional arguments.
@end defun

@c ------------------------------------------------------------------------

@subsubheading File access permissions conversion


The following functions implement a very limited conversion between symbolic and octal access
permissions representations.


@defun mbfl_file_symbolic_to_octal_permissions @var{MODE}
@defunx mbfl_system_symbolic_to_octal_permissions @var{MODE}
Convert three chars representing file permissions in a single octal digit.

@example
mbfl_file_symbolic_to_octal_permissions 'rwx'
@print{} 7

mbfl_file_symbolic_to_octal_permissions 'r-x'
@print{} 5
@end example
@end defun


@defun mbfl_file_octal_to_symbolic_permissions @var{MODE}
@defunx mbfl_system_octal_to_symbolic_permissions @var{MODE}
Convert a single octal digit representing file permissions into three chars.

@example
mbfl_file_octal_to_symbolic_permissions '7'
@print{} rwx

mbfl_file_octal_to_symbolic_permissions '5'
@print{} r-x
@end example
@end defun

@c page
@node file owner
@section Setting file owner and group


@cindex Files, owner and group
@cindex Owner of of files
@cindex Group of of files
@cindex @command{chown}, changing file and directory onwer
@cindex @command{chgrp}, changing file and directory group


@defun mbfl_file_enable_owner_and_group
Declare the intention to use the programs required to change file owner and group.  @ref{program
declaring, Declaring the intention to use a program}

The programs are: @command{chown}, @command{chgrp}, @command{stat}.
@end defun


To change the file owner and group one may request the use of @command{sudo}: just request a user
before invoking the following function.  @ref{program executing, Executing a program}


@defun mbfl_file_set_owner @var{OWNER} @var{PATHNAME} @var{OPT} @dots{}
Change the file owner for @var{PATHNAME}; @var{OWNER} must be in a form accepted by @command{chown}.
The optional arguments @var{OPT} are handed to @command{chown} as options.
@end defun


@defun mbfl_file_set_group @var{GROUP} @var{PATHNAME} @var{OPT} @dots{}
Change the file group for @var{PATHNAME}; @var{GROUP} must be in a form accepted by @command{chgrp}.
The optional arguments @var{OPT} are handed to @command{chgrp} as options.
@end defun


@defun mbfl_file_get_owner @var{PATHNAME}
@defunx mbfl_file_get_owner_var @var{_RV} @var{PATHNAME}
Print the owner of the file as symbolic name.

@DocVarVariant{}
@end defun


@defun mbfl_file_get_group @var{PATHNAME}
@defunx mbfl_file_get_group_var @var{_RV} @var{PATHNAME}
Print the group of the file as symbolic name.

@DocVarVariant{}
@end defun


@defun mbfl_exec_chown @var{ARG} @dots{}
Execute the program @command{chown} using the given optional arguments.
@end defun


@defun mbfl_exec_chgrp @var{PATHNAME} @var{OPT} @dots{}
Execute the program @command{chgrp} using the given optional arguments.
@end defun

@c page
@node file testing
@section Testing file existence and the like


@menu
* file testing file::           Testing file existence and permissions.
* file testing directory::      Testing directory existence and permissions.
* file testing pathname::       Testing pathname permissions.
* file testing misc::           Testing miscellaneous file types.
* file testing modtime::        Testing modification times.
@end menu

@c page
@node file testing file
@subsection Testing file existence and permissions


@cindex Existence of files


For the semantics of the parameter @var{PRINT_ERROR} see @ref{file conventions, Coding conventions
and identifier names}.


@defun mbfl_file_exists @var{PATHNAME}
Return true if @var{PATHNAME} exists.
@end defun


@defun mbfl_file_is_file @var{FILENAME}
@defunx mbfl_file_is_file @var{FILENAME} @var{PRINT_ERROR}
Return true if @var{FILENAME} is not the empty string and is a file.
@end defun


@defun mbfl_file_is_readable @var{FILENAME}
@defunx mbfl_file_is_readable @var{FILENAME} @var{PRINT_ERROR}
Return true if @var{FILENAME} is not the empty string, is a file and is readable.
@end defun


@defun mbfl_file_is_writable @var{FILENAME}
@defunx mbfl_file_is_writable @var{FILENAME} @var{PRINT_ERROR}
Return true if @var{FILENAME} is not the empty string, is a file and is writable.
@end defun


@defun mbfl_file_is_executable @var{FILENAME}
@defunx mbfl_file_is_executable @var{FILENAME} @var{PRINT_ERROR}
Return true if @var{FILENAME} is not the empty string, is a file and is executable.
@end defun

@c page
@node file testing directory
@subsection Testing directory existence and permissions


For the semantics of the parameter @var{PRINT_ERROR} see @ref{file conventions, Coding conventions
and identifier names}.


@defun mbfl_file_is_directory @var{DIRECTORY}
@defunx mbfl_file_is_directory @var{DIRECTORY} @var{PRINT_ERROR}
Return true if @var{DIRECTORY} is not the empty string and is a directory.
@end defun


@defun mbfl_file_directory_is_readable @var{DIRECTORY}
@defunx mbfl_file_directory_is_readable @var{DIRECTORY} @var{PRINT_ERROR}
@defunx mbfl_directory_is_readable @var{DIRECTORY}
@defunx mbfl_directory_is_readable @var{DIRECTORY} @var{PRINT_ERROR}
Return true if @var{DIRECTORY} is not the empty string, is a directory and is readable.
@end defun


@defun mbfl_file_directory_is_writable @var{DIRECTORY}
@defunx mbfl_file_directory_is_writable @var{DIRECTORY} @var{PRINT_ERROR}
@defunx mbfl_directory_is_writable @var{DIRECTORY}
@defunx mbfl_directory_is_writable @var{DIRECTORY} @var{PRINT_ERROR}
Return true if @var{DIRECTORY} is not the empty string, is a directory and is writable.
@end defun


@defun mbfl_file_directory_is_executable @var{DIRECTORY}
@defunx mbfl_file_directory_is_executable @var{DIRECTORY} @var{PRINT_ERROR}
@defunx mbfl_directory_is_executable @var{DIRECTORY}
@defunx mbfl_directory_is_executable @var{DIRECTORY} @var{PRINT_ERROR}
Return true if @var{DIRECTORY} is not the empty string, is a directory and is executable.
@end defun


@defun mbfl_file_directory_validate_writability @var{DIRECTORY} @var{DESCRIPTION}
@defunx mbfl_directory_validate_writability @var{DIRECTORY} @var{DESCRIPTION}
Test directory existence and writability; return true if the directory exists and is writable.  If
the condition is not met: Print informative messages using @var{DESCRIPTION} to refer to the
directory.
@end defun

@c page
@node file testing pathname
@subsection Testing pathname permissions


For the semantics of the parameter @var{PRINT_ERROR} see @ref{file conventions, Coding conventions
and identifier names}.


@defun mbfl_file_pathname_is_readable @var{PATHNAME}
@defunx mbfl_file_pathname_is_readable @var{PATHNAME} @var{PRINT_ERROR}
Return true if @var{PATHNAME} is not the empty string and is readable.
@end defun


@defun mbfl_file_pathname_is_writable @var{PATHNAME}
@defunx mbfl_file_pathname_is_writable @var{PATHNAME} @var{PRINT_ERROR}
Return true if @var{PATHNAME} is not the empty string and is writable.
@end defun


@defun mbfl_file_pathname_is_executable @var{PATHNAME}
@defunx mbfl_file_pathname_is_executable @var{PATHNAME} @var{PRINT_ERROR}
Return true if @var{PATHNAME} is not the empty string and is executable.
@end defun

@c page
@node file testing misc
@subsection Testing miscellaneous file types


For the semantics of the parameter @var{PRINT_ERROR} see @ref{file conventions, Coding conventions
and identifier names}.


@defun mbfl_file_is_symlink @var{PATHNAME}
@defunx mbfl_file_is_symlink @var{PATHNAME} @var{PRINT_ERROR}
Return true if @var{PATHNAME} is not the empty string and is a symbolic link.
@end defun


@defun mbfl_file_is_fifo @var{PATHNAME}
@defunx mbfl_file_is_fifo @var{PATHNAME} @var{PRINT_ERROR}
@defunx mbfl_file_is_named_pipe @var{PATHNAME}
@defunx mbfl_file_is_named_pipe @var{PATHNAME} @var{PRINT_ERROR}
Return true if @var{PATHNAME} is not the empty string and is a named pipe.
@end defun

@c page
@node file testing modtime
@subsection Testing modification times


@defun mbfl_file_modification_time_is_newer @vari{PATHNAME} @varii{PATHNAME}
Return true if @vari{PATHNAME} has newer modification time than @varii{PATHNAME}.
@end defun


@defun mbfl_file_modification_time_is_older @vari{PATHNAME} @varii{PATHNAME}
Return true if @vari{PATHNAME} has older modification time than @varii{PATHNAME}.
@end defun

@c page
@node file read and write
@section Reading and writing files with privileges


@cindex Files, reading and writing
@cindex Reading and writing files
@cindex Writing and reading files


The following functions perform actions that can normally be done directly with the redirection
operators of Bash:

@example
# write to a file
printf '%s' "$string" >"$filename"

# append to a file
printf '%s' "$string" >>"$filename"

# read a file, print contents
printf '%s' "$(<$filename)"
@end example

The functions act differently in that they spawn a @command{bash} subprocess, by invoking
@func{mbfl_program_bash_command}, and let it do the operation; this allows us to request the use of
@command{sudo} and so to read and write files with modified privileges, but only for the time needed
to do the operation, not for the whole script.  @ref{program executing bash, Executing a
@command{bash} process}.


@defun mbfl_file_write @var{STRING} @var{FILENAME}
Write @var{STRING} to @var{FILENAME}, eventually creating it or
overwriting old contents.
@end defun


@defun mbfl_file_append @var{STRING} @var{FILENAME}
Append @var{STRING} to @var{FILENAME}, eventually creating it.
@end defun


@defun mbfl_file_read @var{FILENAME}
Read and print @strong{all} the contents of @var{FILENAME}.
@end defun

@c page
@node file cd
@section Changing directory


@cindex Changing directory
@cindex Directory, changing
@cindex Files, changing directory


@defvar mbfl_CHANGE_DIRECTORY_HOOK
A global hook variable whose commands are evaluated whenever the current process directory is
successfully changed with a call to @func{mbfl_change_directory}; @ref{hooks, Executing commands
with event hooks}.
@end defvar


@defun mbfl_change_directory @var{DIRNAME} @var{OPT} @dots{}
Change directory to @var{DIRNAME}.  Optional flags to @command{cd} may be appended.  If the
execution of the @code{cd} command is successful: the hook @env{mbfl_CHANGE_DIRECTORY_HOOK} is run.
@end defun


@defun mbfl_cd @var{DIRNAME} @var{OPT} @dots{}
Wrapper for @func{mbfl_change_directory}.  If verbose mode is on: print a message.
@end defun

@c page
@node file fifo
@section Named pipes


Named pipes allow two processes to communicate; @coreutilsref{mkfifo invocation, @command{mkfifo}
Make FIFOs (named pipes)}.  Before considering named pipes, we should see if the Bash built--in
@command{coproc} can solve our problem, @bashref{Coprocesses, Coprocesses}.


@defun mbfl_exec_mkfifo @var{ARG} @dots{}
Execute the program @command{mkfifo} using the given optional command line arguments.
@end defun


There are multiple ways to use named pipes as interprocess communication method.

@menu
* file fifo example one::       Each process opens the FIFO pathnames.
* file fifo example two::       Redirection of standard channels to FIFO pathnames.
@end menu

@c page
@node file fifo example one
@subsection Each process opens the FIFO pathnames


One way is to generate unique file pathnames for 2 named pipes and, somehow, make them known to 2
processes; then have them open the named pipes to exchange characters.  Let's say a parent process
executes a child process and we use environment variables to make the pathnames known to the child.

The parent can look like this:

@example
mbfl_file_enable_remove
mbfl_process_enable

declare -r CHILD=/path/to/child.bash

# Export these variables so the child sees them.
declare -rx FIFO_PARENT_TO_CHILD=/path/to/fifo-parent-to-child.$RANDOM
declare -rx FIFO_CHILD_TO_PARENT=/path/to/fifo-child-to-parent.$RANDOM

declare -ri FD_PARENT_TO_CHILD=4
declare -ri FD_CHILD_TO_PARENT=5

mbfl_location_enter
@{
    if mbfl_exec_mkfifo --mode=0600 -- "$FIFO_PARENT_TO_CHILD"
    then mbfl_location_handler "mbfl_file_remove '$FIFO_PARENT_TO_CHILD'"
    else
        mbfl_location_leave
        exit_failure
    fi

    if mbfl_exec_mkfifo --mode=0600 -- "$FIFO_CHILD_TO_PARENT"
    then mbfl_location_handler "mbfl_file_remove '$FIFO_CHILD_TO_PARENT'"
    else
        mbfl_location_leave
        exit_failure
    fi

    if mbfl_fd_open_input_output $FD_PARENT_TO_CHILD "$FIFO_PARENT_TO_CHILD"
    then mbfl_location_handler "mbfl_fd_close $FD_PARENT_TO_CHILD"
    else
        mbfl_location_leave
        exit_failure
    fi

    if mbfl_fd_open_input_output $FD_CHILD_TO_PARENT "$FIFO_CHILD_TO_PARENT"
    then mbfl_location_handler "mbfl_fd_close $FD_CHILD_TO_PARENT"
    else
        mbfl_location_leave
        exit_failure
    fi

    if mbfl_program_execbg 0 1 "$mbfl_PROGRAM_BASH" "$FIFO_SCRIPT"
    then mbfl_location_handler "mbfl_process_wait $mbfl_program_BGPID"
    else
        mbfl_location_leave
        exit_failure
    fi

    printf 'ciao child\n' >&$FD_PARENT_TO_CHILD
    read -u $FD_CHILD_TO_PARENT
@}
mbfl_location_leave
@end example

The child can look like this:

@example
declare -r FIFO_PARENT_TO_CHILD=$FIFO_PARENT_TO_CHILD
declare -r FIFO_CHILD_TO_PARENT=$FIFO_CHILD_TO_PARENT

declare -ri FD_PARENT_TO_CHILD=4
declare -ri FD_CHILD_TO_PARENT=5

mbfl_location_enter
@{
    if mbfl_fd_open_input_output $FD_PARENT_TO_CHILD "$FIFO_PARENT_TO_CHILD"
    then mbfl_location_handler "mbfl_fd_close $FD_PARENT_TO_CHILD"
    else
        mbfl_location_leave
        exit_failure
    fi

    if mbfl_fd_open_input_output $FD_CHILD_TO_PARENT "$FIFO_CHILD_TO_PARENT"
    then mbfl_location_handler "mbfl_fd_close $FD_CHILD_TO_PARENT"
    else
        mbfl_location_leave
        exit_failure
    fi

    read -u $FD_PARENT_TO_CHILD
    printf 'ciao parent\n' >&$FD_CHILD_TO_PARENT
@}
mbfl_location_leave
@end example

@c page
@node file fifo example two
@subsection Redirection of standard channels to FIFO pathnames


Another way is to generate unique file pathnames for 2 named pipes and, somehow, launch the
processes redirecting their standard input and output channels to the appropriate named pipes.
Let's say a parent process executes a child process with @func{mbfl_program_execbg}.

The parent can look like this:

@example
mbfl_file_enable_remove
mbfl_process_enable

function doit () @{
    declare -r CHILD=/path/to/child.bash

    declare -r FIFO_PARENT_TO_CHILD=/path/to/fifo-parent-to-child.$RANDOM
    declare -r FIFO_CHILD_TO_PARENT=/path/to/fifo-child-to-parent.$RANDOM

    declare -ri FD_PARENT_TO_CHILD=4
    declare -ri FD_CHILD_TO_PARENT=5

    mbfl_location_enter
    @{
        mbfl_declare_varref(OUTER_HOOK)
        mbfl_location_hook_var _(OUTER_HOOK)

        sub_doit

        printf 'ciao child\n' >&$FD_PARENT_TO_CHILD
        read -u $FD_CHILD_TO_PARENT
    @}
    mbfl_location_leave
@}
function sub_doit () @{
    mbfl_location_enter
    @{
        if mbfl_exec_mkfifo --mode=0600 -- "$FIFO_PARENT_TO_CHILD"
        then mbfl_location_handler "mbfl_file_remove '$FIFO_PARENT_TO_CHILD'"
        else
            mbfl_location_leave
            return_failure
        fi

        if mbfl_exec_mkfifo --mode=0600 -- "$FIFO_CHILD_TO_PARENT"
        then mbfl_location_handler "mbfl_file_remove '$FIFO_CHILD_TO_PARENT'"
        else
            mbfl_location_leave
            return_failure
        fi

        if mbfl_fd_open_input_output $FD_PARENT_TO_CHILD "$FIFO_PARENT_TO_CHILD"
        then mbfl_hook_add $OUTER_HOOK "mbfl_fd_close $FD_PARENT_TO_CHILD"
        else
            mbfl_location_leave
            return_failure
        fi

        if mbfl_fd_open_input_output $FD_CHILD_TO_PARENT "$FIFO_CHILD_TO_PARENT"
        then mbfl_hook_add $OUTER_HOOK "mbfl_fd_close $FD_CHILD_TO_PARENT"
        else
            mbfl_location_leave
            return_failure
        fi

        if mbfl_program_execbg $FD_PARENT_TO_CHILD $FD_CHILD_TO_PARENT "$mbfl_PROGRAM_BASH" "$CHILD"
        then mbfl_hook_add $OUTER_HOOK "mbfl_process_wait $mbfl_program_BGPID"
        else
            mbfl_location_leave
            return_failure
        fi

        # We have connected  both the ends of  both the FIFOs, so  we can remove them  from the file
        # system: the FIFOs will continue to exist until the file descriptors are closed.
    @}
    mbfl_location_leave
@}
@end example

The child can look like this:

@example
function main () @{
  read
  printf 'ciao parent\n'
@}
@end example

@c page
@node fd
@chapter Handling file descriptors


@menu
* fd open::                     Opening file descriptors.
* fd close::                    Closing file descriptors.
* fd dup::                      Duplicating file descriptors.
* fd move::                     Moving file descriptors.
@end menu

@c page
@node fd open
@section Opening file descriptors


@defun mbfl_fd_open_input @var{FD} @var{FILE}
Open the file descriptor @var{FD} to read from @var{FILE}.  When successful: return true; otherwise
return false.

@strong{NOTE} When @var{FILE} is a FIFO: we need to call @func{mbfl_fd_open_input_output}, not this
function.

If the predefined options @option{--test} or @option{--show-program} are enabled: print a line on
the standard error channel describing the operation.  If the predefined option @option{--test} is
enabled: the file descriptor @strong{is still opened}.  @ref{getopts, Predefined options}.
@end defun


@defun mbfl_fd_open_output @var{FD} @var{FILE}
Open the file descriptor @var{FD} to write to @var{FILE}.  When successful: return true; otherwise
return false.

If the predefined options @option{--test} or @option{--show-program} are enabled: print a line on
the standard error channel describing the operation.  If the predefined option @option{--test} is
enabled: the file descriptor @strong{is still opened}.  @ref{getopts, Predefined options}.
@end defun


@defun mbfl_fd_open_input_output @var{FD} @var{FILE}
Open the file descriptor @var{FD} to read from and write to @var{FILE}.  When successful: return
true; otherwise return false.

If the predefined options @option{--test} or @option{--show-program} are enabled: print a line on
the standard error channel describing the operation.  If the predefined option @option{--test} is
enabled: the file descriptor @strong{is still opened}.  @ref{getopts, Predefined options}.
@end defun


Let's see how we can open a file for reading and writing with two file descriptors:

@example
declare TESTFILE=/path/to/file.ext
declare INFD=3 OUFD=4
declare LINE

mbfl_fd_open_output $OUFD "$TESTFILE"
echo 1234 >&$@{OUFD@}
mbfl_fd_close $OUFD

mbfl_fd_open_input  $INFD "$TESTFILE"
read -u $@{INFD@} LINE
mbfl_fd_close $INFD

echo "$LINE"
@end example

@noindent
now let's use a location to automatically close the file descriptors:

@example
declare TESTFILE=/path/to/file.ext
declare INFD=3 OUFD=4
declare LINE

mbfl_location_enter
@{
    mbfl_fd_open_output $OUFD "$TESTFILE"
    mbfl_location_handler "mbfl_fd_close $@{OUFD@}"
    echo 1234 >&$@{OUFD@}

    mbfl_fd_open_input  $INFD "$TESTFILE"
    mbfl_location_handler "mbfl_fd_close $@{INFD@}"
    read -u $@{INFD@} LINE

    echo "$LINE"
@}
mbfl_location_leave
@end example

Let's see how we can use a FIFO for reading and writing with two file descriptors:

@example
mbfl_declare_program mkfifo
mbfl_file_enable_remove

function program_mkfifo () @{
    local PATHNAME=$@{1:?@}
    shift 1
    local MKFIFO
    mbfl_program_found_var MKFIFO mkfifo || exit_because_program_not_found

    "$MKFIFO" --mode=0600 "$@@" "$PATHNAME"
@}

declare TESTFILE=/path/to/fifo.ext
declare INFD=3 OUFD=4
declare LINE

mbfl_location_enter
@{
    program_mkfifo "$TESTFIFO"
    mbfl_location_handler "mbfl_file_remove $@{TESTFIFO@}"

    mbfl_fd_open_input_output $INFD "$TESTFIFO"
    mbfl_location_handler "mbfl_fd_close $@{INFD@}"

    mbfl_fd_open_output $OUFD "$TESTFIFO"
    mbfl_location_handler "mbfl_fd_close $@{OUFD@}"

    echo 1234 >&$@{OUFD@}
    read -u $@{INFD@} LINE

    echo "$LINE"
@}
mbfl_location_leave
@end example

@c page
@node fd close
@section Closing file descriptors


@defun mbfl_fd_close @var{FD}
Close the file descriptor @var{FD}.

If the predefined options @option{--test} or @option{--show-program} are enabled: print a line on
the standard error channel describing the operation.  If the predefined option @option{--test} is
enabled: the file descriptor @strong{is still closed}.  @ref{getopts, Predefined options}.
@end defun

@c page
@node fd dup
@section Duplicating file descriptors


@defun mbfl_fd_dup_input @var{SRCFD} @var{DSTFD}
@defunx mbfl_fd_dup_output @var{SRCFD} @var{DSTFD}
Duplicate the source file descriptor @var{SRCFD} to the destination file descriptor @var{DSTFD}.

If the predefined options @option{--test} or @option{--show-program} are enabled: print a line on
the standard error channel describing the operation.  If the predefined option @option{--test} is
enabled: the file descriptor @strong{is still duplicated}.  @ref{getopts, Predefined options}.
@end defun


Let's see how we can use a FIFO for reading and writing with two duplicate file descriptors:

@example
mbfl_declare_program mkfifo
mbfl_file_enable_remove

function program_mkfifo () @{
    local PATHNAME=$@{1:?@}
    shift 1
    local MKFIFO
    mbfl_program_found_var MKFIFO mkfifo || exit_because_program_not_found

    "$MKFIFO" --mode=0600 "$@@" "$PATHNAME"
@}

declare TESTFILE=/path/to/fifo.ext
declare INFD=3 OUFD=4 DUP_INFD=5 DUP_OUFD=6
declare LINE1 LINE2 LINE3

mbfl_location_enter
@{
    program_mkfifo "$TESTFIFO"
    mbfl_location_handler "mbfl_file_remove $@{TESTFIFO@}"

    mbfl_fd_open_input_output $INFD "$TESTFIFO"
    mbfl_location_handler "mbfl_fd_close $@{INFD@}"

    mbfl_fd_open_output $OUFD "$TESTFIFO"
    mbfl_location_handler "mbfl_fd_close $@{OUFD@}"

    echo 1234 >&$@{OUFD@}
    read -u $@{INFD@} LINE1

    mbfl_location_enter
    @{
        mbfl_fd_dup_input  $INFD $DUP_INFD
        mbfl_location_handler "mbfl_fd_close $@{DUP_INFD@}"

        mbfl_fd_dup_output $OUFD $DUP_OUFD
        mbfl_location_handler "mbfl_fd_close $@{DUP_OUFD@}"

        echo 5678 >&$@{DUP_OUFD@}
        read -u $@{DUP_INFD@} LINE2
    @}
    mbfl_location_leave

    echo 90 >&$@{OUFD@}
    read -u $@{INFD@} LINE3
@}
mbfl_location_leave

echo $LINE1 $LINE2 $LINE3
@end example

@c page
@node fd move
@section Moving file descriptors


@defun mbfl_fd_move @var{SRCFD} @var{DSTFD}
Move the source file descriptor @var{SRCFD} to the destination file descriptor @var{DSTFD}.  The
source file descriptor is closed.

If the predefined options @option{--test} or @option{--show-program} are enabled: print a line on
the standard error channel describing the operation.  If the predefined option @option{--test} is
enabled: the file descriptor @strong{is still moved}.  @ref{getopts, Predefined options}.
@end defun


Let's see how we can use a file for reading and writing with two moved file descriptors:

@example
declare TESTFILE=/path/to/file.ext
declare INFD=3 OUFD=4 DUP_INFD=5 DUP_OUFD=6
declare LINE

mbfl_location_enter
@{
    mbfl_fd_open_input_output $INFD "$TESTFILE"
    mbfl_fd_open_output       $OUFD "$TESTFILE"

    mbfl_fd_move $INFD $DUP_INFD
    mbfl_location_handler "mbfl_fd_close $@{DUP_INFD@}"

    mbfl_fd_move $OUFD $DUP_OUFD
    mbfl_location_handler "mbfl_fd_close $@{DUP_OUFD@}"

    echo 1234 >&$@{DUP_OUFD@}
    read -u $@{DUP_INFD@} LINE
@}
mbfl_location_leave

echo LINE="$LINE"
@end example

@c page
@node program
@chapter Using external programs


The module @code{program} implements the infrastructure needed to run external programs.

@menu
* program checking::            Checking programs existence.
* program declaring::           Declaring the intention to use a program.
* program executing::           Executing a program.
* program preselected::         Preselected program pathnames.
@end menu

@c page
@node program checking
@section Checking programs existence


@defvr Array mbfl_split_PATH
After a call to @func{mbfl_program_split_path}: this array is filled with the components of the
@env{PATH} variable.
@end defvr


@defun mbfl_program_split_path
If the number of pairs in the global array @code{mbfl_split_PATH} is zero: split the current value
of @var{PATH} into its components by splitting the string using the colon character @code{:} as
separator; store the result in the global array @code{mbfl_split_PATH}; finally return true.

If the number of pairs in the global array @code{mbfl_split_PATH} is not zero: do nothing and return
false.

We can print the contents of the array with:

@example
local -i i

for ((i=0; i < $@{#mbfl_split_PATH[@@]@}; ++i))
do echo "$@{mbfl_split_PATH[$i]@}"
done
@end example

To force a resplit, just reset the array to the empty state with:

@example
mbfl_split_PATH=()
@end example
@end defun


@defun mbfl_program_find @var{PROGRAM}
@defunx mbfl_program_find_var @var{_RV} @var{PROGRAM}
Search for a file in the standard search path.  Print the full pathname of the file found, or an
empty string if nothing is found.  When a file is found: return successfully; otherwise return by
calling @func{return_because_program_not_found}.

@example
PATH=/bin
local RESULT=$(mbfl_program_find ls)
"$RESULT"       @result{} /bin/ls
@end example

The @code{_var} function variant will store the result in the variable @var{_RV} rather than print
it.

@example
PATH=/bin
mbfl_declare_varref(RESULT)
mbfl_program_find_var mbfl_datavar(RESULT) ls
"$RESULT"       @result{} /bin/ls
@end example

These functions assume that: if a file is in the standard search path, it is meant to be an
executable program.  These functions @strong{do not} actually test if the file is executable, they
only test if the file exists; this is because we want to find files that are executable by another
user, not just the effective user running the script.

The simpler way to test the availability of a program is to look for it just before it is used; the
@mbfl{} allows external programs to be run under a user different from the effective user running
the script, so we delay the test for an executable file until the last moment, when the program will
be actually run.

The search path is the one in the environment variable @var{PATH} as parsed by
@func{mbfl_program_split_path}.  The contained directories are searched in the order in which they
appear in @env{PATH}.  There are rules:

@itemize
@item
If @var{PROGRAM} is an absolute pathname (according to @func{mbfl_file_is_absolute}): only that
absolute pathname is verified as existent file.  @var{PATH} is ignored.

@item
If @var{PROGRAM} is a relative pathname (a string with at least one slash character in it): only
that relative pathname is verified as existent file.  @var{PATH} is ignored.

@item
If @var{PROGRAM} is a relative pathname without slash characters in it: the standard search path is
used.
@end itemize
@end defun

@c page
@node program declaring
@section Declaring the intention to use a program


To make a script model simpler, we assume that the unavailability of a program at the time of its
execution is a fatal error.  So if we need to execute a program and the executable is not there, the
script must be aborted on the spot.

Functions are provided to test the availability of a program, so we can try to locate an alternative
or terminate the process under the script control.  On a system where executables may vanish from
one moment to another, no matter how we test a program's existence, there's always the possibility
that the program is not ``there'' when we invoke it.

The vanishing of a program is a rare event: if it's there when we look for it, probably it will be
there also a few moments later when we invoke it.  For this reason, @mbfl{} proposes a set of
functions with which we can declare the intention of a script to use a set of programs.

A command line option is predefined to let the user test the availability of all the declared
programs before invoking the script;  @ref{--validate-programs, Predefined options}.


@defun mbfl_declare_program @var{PROGRAM}
Register @var{PROGRAM} as the name of a program required by the script; @func{mbfl_program_find} is
used to locate the program on the system.  @ref{program checking, Checking programs existence}.

If @var{PROGRAM} is a file name with no directory part (examples: @command{sed}, @command{grep}) the
selected program is the full pathname of the file in one of the directories of @env{PATH}.

If @var{PROGRAM} is a relative pathname (examples: @file{../bin/sed}, @file{./grep}): the selected
program is the full pathname of the file normalised by this function with respect to the current
working directory (with a call to @func{mbfl_file_normalise}).

If @var{PROGRAM} is an absolute pathname (examples: @file{/bin/sed}, @file{/bin/grep}): the selected
program is the full pathname itself.

The return value is always zero.
@end defun


@defun mbfl_program_validate_declared
Validate the existence of all the declared programs.  The return value is @code{0} if all the
programs are found, @code{1} otherwise.

This function is invoked by @func{mbfl_getopts_parse} when the @option{--validate-programs} option
is used on the command line.

It may be a good idea to invoke this function at the beginning of a script, just before starting to
do stuff, example:

@example
mbfl_program_validate_declared || exit_because_program_not_found
@end example

If verbose messages are enabled: a brief summary is echoed to @stderr{}.
@end defun


@defun mbfl_program_found @var{PROGRAM}
@defunx mbfl_program_found_var @var{_RV} @var{PROGRAM}
Print the pathname of the previously declared @var{PROGRAM}.  Return zero if the program was found,
otherwise print an error message and return by invoking @func{return_because_program_not_found}.

@example
function program_wrapper () @{
    mbfl_mandatory_parameter(PATHNAME, 1, argument)
    shift
    local PROGNAME FLAGS

    PROGNAME=$(mbfl_program_found myprog) || exit_because_program_not_found

    mbfl_option_verbose_program && FLAGS+=' --verbose'
    mbfl_program_exec "$PROGNAME" $FLAGS "$@@" '--' "$PATHNAME"
@}
@end example

Remember that we cannot use:

@example
local PROGNAME=$(mbfl_program_found 'myprog') || exit_because_program_not_found
@end example

@noindent
because @code{local} has exit status zero even if @func{mbfl_program_found} fails, so the error will
not be reported.

The function variant @code{_var} will store the result in @var{_RV} rather than printing it.

@example
function program_wrapper () @{
    mbfl_mandatory_parameter(PATHNAME, 1, argument)
    shift
    mbfl_declare_varref(PROGNAME)
    local FLAGS

    mbfl_program_found_var mbfl_datavar(PROGNAME) myprog || exit_because_program_not_found

    mbfl_option_verbose_program && FLAGS+=' --verbose'
    mbfl_program_exec "$PROGNAME" $FLAGS "$@@" '--' "$PATHNAME"
@}
@end example
@end defun


@deffn {Function} exit_because_program_not_found
@deffnx {Alias} return_because_program_not_found
Exit or return with code @code{99}.
@end deffn

@c page
@node program executing
@section Executing a program


@menu
* program executing intro::     Introduction to program execution.
* program executing core::      Core @api{} for program execution.
* program executing exec::      Core @api{} for program execution with replacement.
* program executing bg::        Executing programs in background.
* program executing sudo::      Executing programs with another
                                profile's privileges.
* program executing bash::      Executing a @command{bash} process.
* program executing channels::  Redirecting channels when executing a program.
* program executing testing::   Testing a script and running programs.
* program executing defining::  Defining program--execution functions.
@end menu

@c page
@node program executing intro
@subsection Introduction to program execution


This module provides an @api{} to execute a program under the privileges of the current user or
under a more or less privileged user; @command{sudo} is used run a program as a different user:
refer to its documentation for the required configuration; @command{whoami} is used to determine to
which user the process belongs.  @ref{program preselected, Preselected program pathnames}.

The functions described here must be used in the following way:

@itemize
@item
To execute a program under the current user privileges:

@example
mbfl_program_exec ls /bin
@end example

@item
To execute a program under a more or less privileged user:

@example
# At the beginning of the script:
mbfl_program_enable_sudo

# When executing a program:
mbfl_program_declare_sudo_user root
mbfl_program_exec ls /root
@end example
@end itemize

Every time we execute a program with @command{sudo}: we have to select the user under which to
execute it; if we do not do it: the internally registered user defaults to @code{:nosudo:}, which
tells the function @strong{not} to use @command{sudo}.  So the following script works as commented:

@example
mbfl_program_enable_sudo

# This is executed with the privileges of the user that
# launched the script.
mbfl_program_exec ls /bin

mbfl_program_declare_sudo_user root
# This is executed with root privileges.
mbfl_program_exec ls /root

# This is executed with the privileges of the user that
# launched the script.
mbfl_program_exec ls /bin
@end example

@c page
@node program executing core
@subsection Core @api{} for program execution


@anchor{mbfl_program_exec}
@defun mbfl_program_exec @var{PROGRAM} @var{ARG} @dots{}
Evaluate a command line.  @var{PROGRAM} identifies an executable file: it can be the program name,
or a relative or absolute pathname.  The optional @var{ARG} values are command line arguments that
are handed to the program unchanged.

If usage of @command{sudo} was requested, the command is executed with it; then the @command{sudo}
request is reset.  This means that this function ``consumes'' a @command{sudo} request.
@ref{program executing sudo, Executing programs with another's profile privileges}.

If the redirection of @stderr{} to @stdout{} is requested with
@func{mbfl_program_redirect_stderr_to_stdout}: such request is honoured and consumed.  For a
discussion of channels redirection when calling this function, see @ref{program executing channels,
Redirecting channels when executing a program}.

If the function @func{mbfl_program_set_exec_flags} was used to select arguments for the Bash
built--in @code{exec}: that request is ignored and reset.

If the function @func{mbfl_option_test} returns true: instead of evaluation, the command line is
sent to @code{stderr}.

If the function @func{mbfl_option_show_program} returns true: the command line is sent to
@code{stderr}, then it is executed.
@end defun


@anchor{mbfl_program_exec2}
@defun mbfl_program_exec2 @var{INFD} @var{OUFD} @var{ERFD} @var{PROGRAM} @var{ARG} @dots{}
Like @func{mbfl_program_exec}, but redirect the standard input, output and error channels using the
given file descriptors.

@example
local -ir INFD=10 OUFD=11 ERFD=12

mbfl_fd_open_input  $INFD /some/file
mbfl_fd_open_output $OUFD /another/file
mbfl_fd_open_output $ERFD /yet/another/file
mbfl_program_exec2 $INFD $OUFD $ERFD /some/program.exe --some-option SOME_ARG
@end example

If the redirection of @stderr{} to @stdout{} is requested with
@func{mbfl_program_redirect_stderr_to_stdout}: such request is ignored and consumed.  For a
discussion of channels redirection when calling this function, see @ref{program executing channels,
Redirecting channels when executing a program}.
@end defun

@c page
@node program executing exec
@subsection Core @api{} for program execution with replacement


@anchor{mbfl_program_replace}
@defun mbfl_program_replace @var{PROGRAM} @var{ARG} @dots{}
Like @func{mbfl_program_exec}, but execute the program through the Bash command @code{exec}, so
replacing the current process without creating a new one.

If the function @func{mbfl_program_set_exec_flags} was used to select arguments for the Bash
built--in @code{exec}: that request is honoured by putting the selected arguments on the command
line of @code{exec}.  The request is considered ``consumed'' and reset.

If a trap is set for the @samp{EXIT} event: such trap is executed by Bash, @bashref{Bourne Shell
Builtins, trap}.  This means the @mbfl{}'s atexit handlers are executed, @ref{exit atexit, Running
scripts at exit--time}.

Inside a script, we can easily test program execution with replacement as follows:

@example
@{
  (mbfl_program_replace "$mbfl_PROGRAM_BASH" '-c' 'exit 123';)
  $?      @result{} 123
@}

@{
  local RESULT

  RESULT=$(mbfl_program_replace "$mbfl_PROGRAM_BASH" '-c' 'echo password';)
  "$RESULT"       @result{} password
@}
@end example

@noindent
and we can select flags for @code{exec} as follows:

@example
local RESULT

RESULT=$(mbfl_program_set_exec_flags '-a' 'secret'
         mbfl_program_replace "$mbfl_PROGRAM_BASH" '-c' 'echo $0';)
"$RESULT"       @result{} secret
@end example

If the redirection of @stderr{} to @stdout{} is requested with
@func{mbfl_program_redirect_stderr_to_stdout}: such request is honoured and consumed.  For a
discussion of channels redirection when calling this function, see @ref{program executing channels,
Redirecting channels when executing a program}.
@end defun


@anchor{mbfl_program_replace2}
@defun mbfl_program_replace2 @var{INFD} @var{OUFD} @var{ERFD} @var{PROGRAM} @var{ARG} @dots{}
Like @func{mbfl_program_replace}, but redirect the standard input, output and error channels using
the given channels.

If the redirection of @stderr{} to @stdout{} is requested with
@func{mbfl_program_redirect_stderr_to_stdout}: such request is ignored and consumed.  For a
discussion of channels redirection when calling this function, see @ref{program executing channels,
Redirecting channels when executing a program}.
@end defun


@anchor{mbfl_program_set_exec_flags}
@defun mbfl_program_set_exec_flags @var{FLAG} @dots{}
Store the strings @var{FLAG} as internal state.  At the next program execution with one of the
functions @cfunc{mbfl_program_replace*}: the string is consumed as flags for the Bash built--in
@code{exec}.
@end defun


@anchor{mbfl_program_reset_exec_flags}
@defun mbfl_program_reset_exec_flags
Reset to empty the internal state representing flags for the Bash built--in @code{exec}.
@end defun

@c page
@node program executing bg
@subsection Executing programs in background


@anchor{mbfl_program_execbg}
@defun mbfl_program_execbg @var{INFD} @var{OUFD} @var{PROGRAM}
@defunx mbfl_program_execbg @var{INFD} @var{OUFD} @var{PROGRAM} @var{ARG} @dots{}
Like @func{mbfl_program_exec}, but runs the given command line as:

@example
@var{PROGRAM} @var{ARG} ... <&@var{INFD} >&@var{OUFD} &
@end example

@noindent
additionally: set the global variable @code{mbfl_program_BGPID} to the process ID of the background
process; that is: @code{mbfl_program_BGPID} is the value of @code{$!} right after the process
execution.

If the redirection of @stderr{} to @stdout{} is requested with
@func{mbfl_program_redirect_stderr_to_stdout}: such request is honoured and consumed.  For a
discussion of channels redirection when calling this function, see @ref{program executing channels,
Redirecting channels when executing a program}.
@end defun


@anchor{mbfl_program_execbg2}
@defun mbfl_program_execbg2 @var{INFD} @var{OUFD} @var{ERFD} @var{PROGRAM}
@defunx mbfl_program_execbg2 @var{INFD} @var{OUFD} @var{ERFD} @var{PROGRAM} @var{ARG} @dots{}
Like @func{mbfl_program_execbg}, but redirects also the standard error of the executed process to
@var{ERFD}, which must be a numeric file descriptor.

If the redirection of @stderr{} to @stdout{} is requested with
@func{mbfl_program_redirect_stderr_to_stdout}: such request is ignored and consumed.  For a
discussion of channels redirection when calling this function, see @ref{program executing channels,
Redirecting channels when executing a program}.
@end defun


@defvar mbfl_program_BGPID
Used by @func{mbfl_program_execbg} to store the process id of the program executed in background.
@end defvar

@c page
@node program executing sudo
@subsection Executing programs with another's profile privileges


@defun mbfl_program_enable_sudo
Declare the intention to use @command{sudo} and other commands required to use it.  The declared
programs are: @command{sudo}, @command{whoami}.

This function does @strong{not} use @func{mbfl_declare_program}.
@end defun


@defun mbfl_program_declare_sudo_user @var{PERSONA}
Register @var{PERSONA} as the user under which to execute the next program through @command{sudo};
the user will be selected using the @code{-u} option of @command{sudo}.  This function will:

@enumerate
@item
Check that the string @var{PERSONA} satisfies the function @func{mbfl_string_is_username}, else the
function will print an error message to @stderr{} and exit with
@func{exit_because_invalid_sudo_username}.

@item
Check that the built--in file system pathname for @command{sudo} references an existent and
executable file; otherwise call @func{exit_because_program_not_found}.  @ref{mbfl_PROGRAM_SUDO,
Preselected program pathnames}.

@item
Check that the built--in file system pathname for @command{whoami} references an existent and
executable file; otherwise call @func{exit_because_program_not_found}.  @ref{mbfl_PROGRAM_WHOAMI,
Preselected program pathnames}.

@item
Execute @command{whoami} to determine the current effective user name.  If an error occurs call
@func{exit_because_failure}.

@item
If the string @var{PERSONA} is different from the current effective user name: select @var{PERSONA}
as the user for the next @command{sudo} execution and call @func{return_success}; otherwise set the
internal state so that the next program execution will @strong{not} use @command{sudo}, then call
@func{return_because_failure}.
@end enumerate
@end defun


@defun mbfl_program_reset_sudo_user
Reset the previously requested @command{sudo} user to a value that will cause @command{sudo} not to
be used in the next program invocation.  This is useful to abort a user request.
@end defun


@defun mbfl_program_sudo_user
Print the current @command{sudo} user.  This function is for debugging purposes.
@end defun


@defun mbfl_program_requested_sudo
Return true if the usage of @command{sudo} has been requested for the next command execution.
@end defun


@defun mbfl_program_set_sudo_options @var{OPT} @dots{}
@defunx mbfl_program_declare_sudo_options @var{OPT} @dots{}
Select additional command line options to use on the next invocation of @command{sudo}.  These
values are consumed by the first use of @func{mbfl_program_exec}.
@end defun


@defun mbfl_program_reset_sudo_options
Clean the options previously set by @func{mbfl_program_declare_sudo_options}.
@end defun


@deffn {Function} exit_because_invalid_sudo_username
@deffnx {Alias} return_because_invalid_sudo_username
Exit or return with code @code{90}.
@end deffn

@c page
@node program executing bash
@subsection Executing a @command{bash} process


In the following functions: the file system pathname of @command{bash} is preselected and
hard--coded in the library at package--configuration time; @ref{mbfl_PROGRAM_BASH} for details.


@defun mbfl_program_bash @var{ARG} @dots{}
Execute the program @command{bash} with the @var{ARG} arguments on the command line.
@end defun


@defun mbfl_program_bash_command @var{COMMAND} @var{ARG} @dots{}
Execute @var{COMMAND} in a @command{bash} subprocess, using the @code{-c} switch.  If given, the
optional @var{ARG} arguments are placed on the command line of @command{bash} in options position
(before the @code{-c} option).

@example
mbfl_program_bash_command 'read ; echo "$REPLY"'
@end example
@end defun

@c ------------------------------------------------------------------------

@subsubheading Background execution


Notice that if we want to execute @command{bash} in background and access its PID with
@code{mbfl_program_BGPID} we have to use a command like the following (we need the option
@option{-i} to activate job control):

@example
local THE_PID

mbfl_program_execbg 0 1 "$mbfl_PROGRAM_BASH" '--norc' '--noprofile' '-i' '-c' 'suspend'
THE_PID=$mbfl_program_BGPID

mbfl_process_kill -SIGCONT $THE_PID
mbfl_process_wait $THE_PID
@end example

Attempting to use @func{mbfl_program_bash} or @func{mbfl_program_bash_command}, by putting them in
the background with @code{&}, will not work: it is impossible to determine the executed
@command{bash} process' PID from the parent shell process.

@c page
@node program executing channels
@subsection Redirecting channels when executing a program


When we execute programs with the functions @func{mbfl_program_exec}, @func{mbfl_program_execbg},
@func{mbfl_program_replace}, and other functions that @strong{do not} accept channels as arguments,
we could perform channels redirection by composing expressions like:

@example
mbfl_program_exec /the/program.exe </some/input >/some/output 2>/some/error
@end example

@noindent
but this way @strong{we redirect the channels of the function call}, not the channels of the
executed subprocess; this may be a problem, for example, when we use the predefined options
@option{--verbose}, @option{--debug}, @option{--show-program} that output text on the @stderr{}
channel, @ref{getopts options, Predefined options}.  For this reason there exist the functions
@func{mbfl_program_exec2}, @func{mbfl_program_execbg2}, @func{mbfl_program_replace2}, and other
functions that @strong{do} accept channels as arguments.

The functions @func{mbfl_program_exec}, @func{mbfl_program_execbg}, @func{mbfl_program_replace}, and
similar should be used only when it is fine, for the executed subprocess, to use the same channels
of the invoking parent process (the Bash script itself).

We can always use the default channels when calling @func{mbfl_program_exec2},
@func{mbfl_program_execbg2}, @func{mbfl_program_replace2}, and similar; for example:

@example
mbfl_program_exec2 0 1 2 /bin/ls --long
@end example

@noindent
is equivalent to:

@example
mbfl_program_exec /bin/ls --long
@end example

@noindent
In general we could use both numeric channels and symbolic channels; on a system where symbolic
channels are created under @file{/dev}, we can compose expressions like:

@example
mbfl_program_exec2 /dev/stdin /dev/stdout /dev/stderr /bin/ls --long
mbfl_program_exec2 /dev/fd/0  /dev/fd/1   /dev/fd/2   /bin/ls --long
@end example

@noindent
but we must remember that the human--readable aliases @file{/dev/stdin}, @file{/dev/stdout},
@file{/dev/stderr}, @file{/dev/fd/0}, @file{/dev/fd/1}, @dots{} are @strong{not} always available;
for example, when a script is run from a @command{cron} job: these aliases may not exist.

The solution that always works is to use numeric channels @samp{0}, @samp{1}, @samp{2}, @dots{}; but
we must beware that using numeric channels above @samp{9} may collide with the channels used
internally by Bash itself (as it is stated in the documentation of @gnu{} Bash version 4).  So we
should consider using the @code{fd} module to open channels as we see fit, @ref{fd, Handling file
descriptors}.

@c ------------------------------------------------------------------------

@subsubheading Redirecting @stderr{} to @stdout{}


There are programs that output useful informations on their stderr channel (example: the
@command{at} command).  When we execute programs with the functions @func{mbfl_program_exec},
@func{mbfl_program_execbg} or @func{mbfl_program_replace}, there is a simple, special case that is
sometimes useful: using the standard channels for input and output; redirecting the standard error
channel to the standard output channel.


@defun mbfl_program_set_stderr_to_stdout
@defunx mbfl_program_redirect_stderr_to_stdout
Just for the next invocation to @func{mbfl_program_exec} and similar functions: redirect @stderr{}
to @stdout{}, that is: use the @code{2>&1} redirection for the executed program.
@end defun


@defun mbfl_program_reset_stderr_to_stdout
Reset the @stderr{} to @stdout{} redirection, disabling it.
@end defun

@c page
@node program executing testing
@subsection Testing a script and running programs


@mbfl{} allows a script to execute a ``dry run'', that is: do not perform any operation on the
system, just print messages describing what will happen if the script is executed with the selected
options.  This implies, in the @mbfl{} model, that no external program is executed.  In many
scenarios we have to actively code the logic of testing execution.

We can turn on this feature by using the predefined command line option @option{--test},
@ref{--test, Predefined options}.  We can programmatically enable this feature by calling the
function @func{mbfl_set_option_test} and disable it by calling the function
@func{mbfl_unset_option_test}, @ref{mbfl_unset_option_test, Predefined options}.  We can also save
and restore this process state with the functions @func{mbfl_option_test_save} and
@func{mbfl_option_test_restore}, @ref{mbfl_option_test_save, Predefined options}.

When this feature is turned on: @func{mbfl_program_exec} and the other functions do not execute the
program, instead they print the command line on the standard error channel and return successfully.

We can temporarily disable testing mode if we actually need to run a program anyway; we can use a
statement like:

@example
if @{
     mbfl_location_enter
     @{
       mbfl_location_handler_suspend_testing
       mbfl_program_exec /some/program.exe --some-option SOME_ARG
     @}
     mbfl_location_leave
@}
then handle_the_error
fi
@end example

@c page
@node program executing defining
@subsection Defining program--execution functions


@cindex Defining program-execution functions
@cindex Program-execution functions, definition
@cindex Executing external programs, defining executor function


It happens often that we want to execute an external program; it is useful to wrap into a function
the machinery needed to use program declaration and execution with @mbfl{}'s facilities.  Some
preprocessor macros automate this function definition.

Let's say we want to define a function to execute @command{pamixer}, PulseAudio's mixer program; we
can use the macro @func{MBFL_DEFINE_PROGRAM_EXECUTOR}:

@example
mbfl_declare_program pamixer

MBFL_DEFINE_PROGRAM_EXECUTOR([[[pamixer]]], [[[pamixer]]])
@end example

@noindent
the macro use will expand into:

@example
function program_pamixer () @{
    mbfl_declare_varref(PROGRAM)
    mbfl_program_found_var mbfl_datavar(PROGRAM) pamixer || exit $?
    mbfl_program_exec "$PROGRAM"  "$@@"
@}
@end example

@noindent
we can use the function as:

@example
if ! program_pamixer --increase 2
then
    # handle the error
fi
@end example

@noindent
the function will return with status equal to the exit status of the program.


@deffn {Preprocessor Macro} MBFL_DEFINE_PROGRAM_EXECUTOR (@var{STEM}, @var{EXECUTABLE_PATHNAME}, @var{OPTIONAL_DEFAULT_FLAGS}, @var{OPTIONAL_FUNCTION_PREFIX})
Define a function we can call to execute an external program previously declared with
@func{mbfl_declare_program} and similar functions; @ref{program declaring, Declaring the intention
to use a program}.  The program is executed with @func{mbfl_program_exec}; @ref{mbfl_program_exec,
Core @api{} for Program execution}.

@table @var
@item STEM
A string used to compose the function name, which will be: @code{program_@var{STEM}}.

@item EXECUTABLE_PATHNAME
The executable specification of the program; it must be the same string used as argument to
@func{mbfl_declare_program}.

@item OPTIONAL_DEFAULT_FLAGS
Optional sequence of strings that will be inserted on the command line of the program.

@item OPTIONAL_FUNCTION_PREFIX
Optional function--name prefix.
@end table

With this preprocessor version the expansion of a macro use looks like this:

@example
function @var{OPTIONAL_FUNCTION_PREFIX}program_@var{STEM} () @{
    mbfl_declare_varref(PROGRAM)
    mbfl_program_found_var mbfl_datavar(PROGRAM) @var{EXECUTABLE_PATHNAME} || exit $?
    mbfl_program_exec "$PROGRAM" @var{OPTIONAL_DEFAULT_FLAGS} "$@@"
@}
@end example
@end deffn


@deffn {Preprocessor Macro} MBFL_DEFINE_PROGRAM_REPLACER (@var{STEM}, @var{EXECUTABLE_PATHNAME}, @var{OPTIONAL_DEFAULT_FLAGS}, @var{OPTIONAL_FUNCTION_PREFIX})
Like @func{MBFL_DEFINE_PROGRAM_REPLACER}, but uses @func{mbfl_program_replace} rather than
@func{mbfl_program_exec}; @ref{mbfl_program_replace, Core @api{} for program execution with
replacement}.

If the optional parameter @var{OPTIONAL_FUNCTION_PREFIX} is not used: the generated function name is:

@example
program_replace_@var{STEM}
@end example

@noindent
otherwise it is:

@example
@var{OPTIONAL_FUNCTION_PREFIX}program_replace_@var{STEM}
@end example
@end deffn

@c page
@node program preselected
@section Preselected program pathnames


@mbfl{} uses some external programs for its inner workings, especially from the @gnu{} Coreutils
package; the file system pathnames of these programs is selected at package--configuration time and
hard--coded in library's source code.

We may want to use these program pathnames, either directly or as argument to other programs, for
example @command{find}, as in:

@example
find -type f -exec "$mbfl_PROGRAM_CHOWN" marco:users '@{@}' ';'
@end example

The following global variables are available to access those file system pathnames.


@macro DefineProgramVariable{UPPERPROGNAME,LOWERPROGNAME}
@cindex Command @command{\LOWERPROGNAME\}
@cindex External command @command{\LOWERPROGNAME\}
@cindex @command{\LOWERPROGNAME\}, external command
@anchor{mbfl_PROGRAM_\UPPERPROGNAME\}
@defvar mbfl_PROGRAM_\UPPERPROGNAME\
The preselected file system pathname of the program @command{\LOWERPROGNAME\}; it is selected by the
@command{configure} script and customisable by setting a variable on its command line:

@example
configure MBFL_PROGRAM_\UPPERPROGNAME\=/path/to/\LOWERPROGNAME\
@end example
@end defvar


@end macro


@DefineProgramVariable{BASH,bash}
@DefineProgramVariable{M4, m4}
@DefineProgramVariable{SUDO, sudo}

The following are the @gnu{} Coreutils.

@DefineProgramVariable{CHGRP, chgrp}
@DefineProgramVariable{CHMOD, chmod}
@DefineProgramVariable{CHOWN, chown}
@DefineProgramVariable{CP, cp}
@DefineProgramVariable{DATE, date}
@DefineProgramVariable{GAWK, gawk}
@DefineProgramVariable{ID, id}
@DefineProgramVariable{INSTALL, install}
@DefineProgramVariable{LN, ln}
@DefineProgramVariable{LS, ls}
@DefineProgramVariable{MKDIR, mkdir}
@DefineProgramVariable{MKFIFO, mkfifo}
@DefineProgramVariable{MV, mv}
@DefineProgramVariable{READLINK, readlink}
@DefineProgramVariable{REALPATH, realpath}
@DefineProgramVariable{RMDIR, rmdir}
@DefineProgramVariable{RM, rm}
@DefineProgramVariable{SLEEP, sleep}
@DefineProgramVariable{STAT, stat}
@DefineProgramVariable{WHOAMI, whoami}

@c page
@node process
@chapter Job control


@defun mbfl_process_enable
@defunx mbfl_process_disable
Enable or disable job control, @bashref{Job Control, Job Control}.
@end defun


@defvr {Read-only Variable} mbfl_PID
The current process ID.  This value is saved by @mbfl{} because the value of @samp{$$} is the PID of
the current shell or subshell.
@end defvr


@defun mbfl_process_disown @var{ARG} @dots{}
Execute the builtin @code{disown} using the given optional arguments.

If the predefined options @option{--test} or @option{--show-program} are enabled: print a line on
the standard error channel describing the operation.  If the predefined option @option{--test} is
enabled: do not execute the builtin.  @ref{getopts, Predefined options}.
@end defun


@defun mbfl_process_wait @var{ARG} @dots{}
Execute the builtin @code{wait} using the given optional arguments.

If the predefined options @option{--test} or @option{--show-program} are enabled: print a line on
the standard error channel describing the operation.  If the predefined option @option{--test} is
enabled: do not execute the builtin.  @ref{getopts, Predefined options}.
@end defun


@defun mbfl_process_kill @var{ARG} @dots{}
Execute the builtin @code{kill} using the given optional arguments.

When sending signals to a process: we have to remember that multiple signals with the same number
may be delivered collapsed into a single signal; so:

@example
mbfl_process_kill -s SIGUSR1 $SOME_PID
mbfl_process_kill -s SIGUSR1 $SOME_PID
@end example

@noindent
may cause a single @samp{SIGUSR1} to be delivered.  We also have to remember that @samp{$$} expands
into the PID of the current shell or subshell.

If the predefined options @option{--test} or @option{--show-program} are enabled: print a line on
the standard error channel describing the operation.  If the predefined option @option{--test} is
enabled: do not execute the builtin.  @ref{getopts, Predefined options}.
@end defun


@defun mbfl_process_suspend @var{ARG} @dots{}
Execute the builtin @code{suspend} using the given optional arguments.

If the predefined options @option{--test} or @option{--show-program} are enabled: print a line on
the standard error channel describing the operation.  If the predefined option @option{--test} is
enabled: do not execute the builtin.  @ref{getopts, Predefined options}.
@end defun


@defun mbfl_process_bg @var{ARG} @dots{}
Execute the builtin @code{bg} using the given optional arguments.

If the predefined options @option{--test} or @option{--show-program} are enabled: print a line on
the standard error channel describing the operation.  If the predefined option @option{--test} is
enabled: do not execute the builtin.  @ref{getopts, Predefined options}.
@end defun


@defun mbfl_process_fg @var{ARG} @dots{}
Execute the builtin @code{fg} using the given optional arguments.

If the predefined options @option{--test} or @option{--show-program} are enabled: print a line on
the standard error channel describing the operation.  If the predefined option @option{--test} is
enabled: do not execute the builtin.  @ref{getopts, Predefined options}.
@end defun


@defun mbfl_process_sleep @var{ARG} @dots{}
Execute the command @command{sleep} using the given optional arguments.  @ref{mbfl_PROGRAM_SLEEP}
for details on the file system pathname of the program @command{sleep}.
@end defun

@c page
@node signal
@chapter Interprocess signals


@mbfl{} provides an interface to the @code{trap} builtin that allows the execution of more than one
function when a Unix interprocess signal is delivered to the current process.

In this chapter we use the underscore syntax as defined in @ref{objects conventions underscore, The
underscore syntax}.


@defun mbfl_signal_enable
Initialise @mbfl{}'s signal--handling facilities.  We must call this function before using any of
the facilities documented here.
@end defun


@menu
* signal specs::                Signal specifications as strings and numbers.
* signal handlers::             Managing signal handlers.
@end menu

@c page
@node signal specs
@section Signal specifications as strings and numbers


@defun mbfl_string_is_signame @var{STR}
Return true if @var{STR} is a valid signal--name string--specification; otherwise return false.

@example
mbfl_string_is_signame 'SIGKILL'        @result{} 0
mbfl_string_is_signame 'ciao            @result{} 1
@end example
@end defun


@defun mbfl_string_is_signum @var{STR}
Return true if @var{STR} is a valid signal--number specification; otherwise return false.

@example
mbfl_string_is_signum 9                 @result{} 0
mbfl_string_is_signum 9999              @result{} 1
@end example
@end defun


@defun mbfl_signal_map_signame_to_signum @var{SIGNAME}
@defunx mbfl_signal_map_signame_to_signum_var @var{SIGNUM_RV} @var{SIGNAME}
Convert @var{SIGNAME} to the corresponding signal--number specification, then print the number or
store it in the result variable @var{SIGNUM_RV}.  When successful return true, otherwise return
false.

@example
mbfl_declare_integer_varref(SIGNUM)

mbfl_signal_map_signame_to_signum_var _(SIGNUM) 'SIGKILL'
@result{} 0
$SIGNUM         @result{} 9
@end example
@end defun


@defun mbfl_signal_map_signum_to_signame @var{SIGNUM}
@defunx mbfl_signal_map_signum_to_signame_var @var{SIGNAME_RV} @var{SIGNUM}
Convert @var{SIGNUM} to the corresponding signal--name string--specification, then print the name or
store it in the result variable @var{SIGNAME_RV}.  When successful return true, otherwise return
false.

@example
mbfl_declare_varref(SIGNAME)

mbfl_signal_map_signum_to_signame_var _(SIGNAME) 9
@result{} 0
$SIGNAME        @result{} SIGKILL
@end example
@end defun

@c page
@node signal handlers
@section Managing signal handlers


Signal handlers are stored in hooks, one hook for every signal specification; @ref{hooks, Executing
commands with event hooks}.


@defun mbfl_signal_attach @var{SIGNAME} @var{HANDLER}
Add @var{HANDLER} to the @var{SIGNAME}'s hook.  When successful return true; otherwise return false.
If currently there is no @var{SIGNAME}'s hook: a new hook is defined.

@example
function my_sigkill_handler () @{
    echo gotcha >&2
@}

mbfl_signal_attack 'SIGKILL' my_sigkill_handler
@end example
@end defun


@defun mbfl_signal_has_handlers @var{SIGNAME}
Return true if @var{SIGNAME} has handlers associated to it, using this @mbfl{} module; otherwise
return false.
@end defun


@defun mbfl_signal_remove_all_handlers
Undefine all the signal hooks, implicitly removing all the registered handlers.
@end defun


@defun mbfl_signal_remove_signal_handlers @var{SIGNAME}
Undefine the signal hook associated to @var{SIGNAME}, implicitly removing all the registered
handlers.
@end defun


@defun mbfl_signal_invoke_handlers @var{SIGNAME}
Run the hook associated to the signal @var{SIGNAME}.  This function is not meant to be used during
normal scripts execution, but it may be useful to debug a script by simulating signal delivery.
@end defun


@defun mbfl_signal_hook_var @var{HOOK_RV} @var{SIGNAME}
If @var{SIGNAME} is a valid signal name: store in the result variable @var{HOOK_RV} @var{SIGNAME}'s
hook data variable, then return true; otherwise return false.  If currently there is no
@var{SIGNAME}'s hook: a new hook is defined.

@example
mbfl_declare_varref(SIGKILL_HOOK)

mbfl_signal_hook_var _(SIGKILL_HOOK) 'SIGKILL'
mbfl_hook_add $SIGKILL_HOOK 'my_signal_handler'
@end example
@end defun

@c page
@node times
@chapter Times and dates


@defun mbfl_times_and_dates_enable
Enable times and dates processing facilities.

The required programs are: @command{date}.
@end defun


@menu
* times raw::                   Raw call to @command{date}.
* times current::               Acquire the current time and date.
* times special::               Special time and date formats.
@end menu

@c page
@node times raw
@section Raw call to @command{date}


@defun mbfl_exec_date @var{ARG} @dots{}
Execute @command{date} with the optional arguments appended to the command line.
@ref{mbfl_PROGRAM_DATE, Preselected program pathnames}.
@end defun


@defun mbfl_exec_date_format @var{FORMAT} @var{OPT} @dots{}
Execute @command{date} with the mandatory @var{FORMAT} as first argument.  Additional, optional,
arguments are appended to the command line.
@end defun

@c page
@node times current
@section Acquire the current time and date


@defun mbfl_date_current_year
Print the current year as digit string.
@end defun


@defun mbfl_date_current_month
Print the current month as two--digits string.
@end defun


@defun mbfl_date_current_day
Print the current day as two--digits string.
@end defun


@defun mbfl_date_current_hour
Print the current hour as two--digits string.
@end defun


@defun mbfl_date_current_minute
Print the current minute as two--digits string.
@end defun


@defun mbfl_date_current_second
Print the current second as two--digits string.
@end defun


@defun mbfl_date_current_date
Print the current date, using the format @samp{%F}.  Example:

@example
mbfl_date_current_date
@print{} 2018-11-03
@end example
@end defun


@defun mbfl_date_current_time
Print the current date, using the format @samp{%T}.  Example:

@example
mbfl_date_current_time
@print{} 07:51:27
@end example
@end defun

@c page
@node times special
@section Special time and date formats


@defun mbfl_date_email_timestamp
Print the current timestamp, using the format specified by @option{--rfc-2822}: the format required
by Interned email.  Example:

@example
mbfl_date_email_timestamp
@print{} Sat, 03 Nov 2018 07:51:27 +0100
@end example
@end defun


@defun mbfl_date_iso_timestamp
Print the current timestamp, using the format specified by @option{--iso-8601=ns}: the format
required by @acronym{ISO} 8601 with nanoseconds precision.  Example:

@example
mbfl_date_iso_timestamp
@print{} 2018-11-03T07:51:27,564646289+01:00
@end example
@end defun

@c page
@node math
@chapter Evaluating mathematical expressions


@cindex Evaluating mathematical expressions
@cindex Evaluating arithmetic expressions
@cindex Mathematical expressions
@cindex Arithmetic expressions


The @gnu{} Bash has some arithmetic facilities to evaluate expressions, they are limited to
integers; @bashref{Shell Arithmetic, Shell Arithmetic}.  The @gnu{} Coreutils's @command{expr}
command can also evaluate mathematical expressions, its features are also limited;
@coreutilsref{expr invocation, @command{expr} Evaluate expressions}.

GAWK instead has a wider set of facilities, so it is used by @mbfl{} for mathematics;
@gawkref{Arbitrary Precision Arithmetic, Arithmetic and Arbitrary--Precision Arithmetic with
@command{gawk}}.  The pathname of GAWK is available in the variable @env{mbfl_PROGRAM_GAWK}
(@pxref{mbfl_PROGRAM_GAWK}).


@defun mbfl_math_expr @var{EXPR_STRING}
Evaluate the given expression string using GAWK; print the result to @stdout{}.  If an error occurs:
return with the same status of GAWK.

@example
mbfl_math_expr '1.2 + 3.4'
@print{} 4.6
@end example
@end defun


@defun mbfl_math_expr_var @var{RV} @var{EXPR_STRING}
Evaluate the given expression string using GAWK; only if successful: store the result in the
variable @var{RV}.  If an error occurs: return with the same status of GAWK; @var{RV} is left
untouched.

@example
mbfl_declare_varref(RV)

mbfl_math_expr_var mbfl_datavar(RV) '1.2 + 3.4'
$RV @result{} 4.6
@end example
@end defun

@c page
@node system
@chapter Interfacing with the system


@defun mbfl_system_enable_programs
Declare the intention to use the programs required by this module.  @ref{program declaring,
Declaring the intention to use a program}.

As of version @value{VERSION}: this function does nothing; it is still here for backwards
compatibility.
@end defun


@menu
* system passwd::               Reading and searching the file
                                @file{/etc/passwd}.
* system group::                Reading and searching the file
                                @file{/etc/group}.
* system users::                Gathering users data.
@end menu

@c page
@node system passwd
@section Reading and searching the file @file{/etc/passwd}


@menu
* system passwd reading::       Reading the file @file{passwd}.
* system passwd printing::      Printing entries from @file{passwd}.
* system passwd searching::     Searching entries from @file{passwd}.
* system passwd inspect::       Inspecting entries from @file{passwd}.
* system passwd userid::        Converting user identifiers.
@end menu

@c page
@node system passwd reading
@subsection Reading the file @file{passwd}


@defun mbfl_system_passwd_read
Read the file @file{/etc/passwd} and store the resulting fields in an internal global array
variable.  Only the first call to this function will actually read the file, unless
@func{mbfl_system_passwd_reset} has been called.
@end defun


@defun mbfl_system_passwd_reset
Reset the internal state so that the next call to @func{mbfl_system_passwd_read} will actually
load, or reaload, the contents of @file{/etc/passwd}.
@end defun

@c page
@node system passwd printing
@subsection Printing entries from @file{passwd}


We are meant to call these function after a call to @func{mbfl_system_passwd_read}.


@defun mbfl_system_passwd_print_entries
Print to @stdout{} the entries of @file{passwd}, one per line.  The format of each line is:

@example
name='root' passwd='x' uid=0 gid=0 gecos='' dir='/root' \
shell='/bin/bash'
@end example
@end defun


@defun mbfl_system_passwd_print_entries_as_xml
Print to @stdout{} the entries of @file{passwd}, one per line, in @acronym{XML} format.  The
format of each line is:

@example
<entry name='root' passwd='x' uid='0' gid='0' gecos='' \
dir='/root' shell='/bin/bash'/>
@end example
@end defun


@defun mbfl_system_passwd_print_entries_as_json
Print to @stdout{} the entries of @file{passwd}, one per line, in @acronym{JSON} format.  The
format of each line is:

@example
"entry": @{ "name": "root", "passwd": "x", "uid": 0, "gid": 0, \
"gecos": "", "dir": "/root", "shell": "/bin/bash" @}
@end example
@end defun

@c page
@node system passwd searching
@subsection Searching entries from @file{passwd}


We are meant to call these function after a call to @func{mbfl_system_passwd_read}.  The following
functions inspect entries from @file{/etc/passwd} and locate them using numeric indexes; such
indexes are valid only until the next call to @func{mbfl_system_passwd_reset}.


@defun mbfl_system_passwd_find_entry_by_name @var{NAME}
@defunx mbfl_system_passwd_find_entry_by_name_var @var{_RV} @var{NAME}
Search the entries of @file{passwd} for one whose user name is @var{NAME}.  When successful: print
to @stdout{} the index of the entry and return true; otherwise return false.  We can use the
index with the functions described in @ref{system passwd inspect, Inspecting entries from
@file{passwd}}.

@DocVarVariant{}
@end defun


@defun mbfl_system_passwd_find_entry_by_uid @var{UID}
@defunx mbfl_system_passwd_find_entry_by_uid_var @var{_RV} @var{UID}
Search the entries of @file{passwd} for one whose user id is @var{UID}.  When successful: print to
@stdout{} the index of the entry and return true; otherwise return false.  We can use the index
with the functions described in @ref{system passwd inspect, Inspecting entries from @file{passwd}}.

@DocVarVariant{}
@end defun

@c page
@node system passwd inspect
@subsection Inspecting entries from @file{passwd}


The following functions inspect entries from @file{/etc/passwd} using an index argument; we must
obtain indexes with the functions described in @ref{system passwd searching, Searching entries from
@file{passwd}}.


@defun mbfl_system_passwd_get_name @var{IDX}
@defunx mbfl_system_passwd_get_name_var @var{_RV} @var{IDX}
Print to @stdout{} the field name of the @file{passwd} entry at index @var{IDX}.

@DocVarVariant{}

@example
local IDX NAME

mbfl_system_passwd_read
if mbfl_system_passwd_find_entry_by_name_var IDX root
then
    if mbfl_system_passwd_get_name_var NAME $IDX
    then echo "$NAME"
    fi
fi
@end example
@end defun


@defun mbfl_system_passwd_get_passwd @var{IDX}
@defunx mbfl_system_passwd_get_passwd_var @var{_RV} @var{IDX}
Print to @stdout{} the field passwd of the @file{passwd} entry at index @var{IDX}.

@DocVarVariant{}
@end defun


@defun mbfl_system_passwd_get_uid @var{IDX}
@defunx mbfl_system_passwd_get_uid_var @var{_RV} @var{IDX}
Print to @stdout{} the field uid of the @file{passwd} entry at index @var{IDX}.

@DocVarVariant{}
@end defun


@defun mbfl_system_passwd_get_gid @var{IDX}
@defunx mbfl_system_passwd_get_gid_var @var{_RV} @var{IDX}
Print to @stdout{} the field gid of the @file{passwd} entry at index @var{IDX}.

@DocVarVariant{}
@end defun


@defun mbfl_system_passwd_get_gecos @var{IDX}
@defunx mbfl_system_passwd_get_gecos_var @var{_RV} @var{IDX}
Print to @stdout{} the field gecos of the @file{passwd} entry at index @var{IDX}.

@DocVarVariant{}
@end defun


@defun mbfl_system_passwd_get_dir @var{IDX}
@defunx mbfl_system_passwd_get_dir_var @var{_RV} @var{IDX}
Print to @stdout{} the field dir of the @file{passwd} entry at index @var{IDX}.

@DocVarVariant{}
@end defun


@defun mbfl_system_passwd_get_shell @var{IDX}
@defunx mbfl_system_passwd_get_shell_var @var{_RV} @var{IDX}
Print to @stdout{} the field shell of the @file{passwd} entry at index @var{IDX}.

@DocVarVariant{}
@end defun

@c page
@node system passwd userid
@subsection Converting user identifiers


We are meant to call these function after a call to @func{mbfl_system_passwd_read}; @ref{system
passwd reading, Reading the file @file{passwd}}.


@defun mbfl_system_passwd_uid_to_name @var{UID}
@defunx mbfl_system_passwd_uid_to_name_var @var{_RV} @var{UID}
Print to @stdout{} the name of the user whose uid is @var{UID}.  When successful return true;
otherwise return false.

@DocVarVariant{}

@example
local USER_NAME

if mbfl_system_passwd_read
then mbfl_system_passwd_uid_to_name 0
fi

# Using the "_var" variants.
if mbfl_system_passwd_read
then
    mbfl_system_passwd_uid_to_name_var USER_NAME 0
    echo "$USER_NAME"
fi
@end example
@end defun


@defun mbfl_system_passwd_name_to_uid @var{NAME}
@defunx mbfl_system_passwd_name_to_uid_var @var{_RV} @var{NAME}
Print to @stdout{} the id of the user whose uid is @var{UID}.  When successful return true;
otherwise return false.

@DocVarVariant{}

@example
local USER_ID

if mbfl_system_passwd_read
then mbfl_system_passwd_name_to_uid 'root'
fi

# Using the "_var" variants.
if mbfl_system_passwd_read
then
    if mbfl_system_passwd_name_to_uid_var USER_ID 'root'
    then echo "$USER_ID"
    fi
fi
@end example
@end defun


@defun mbfl_system_numerical_user_id_to_name @var{ID}
Convert the numerical user @var{ID} to the user name found in the @file{/etc/passwd} file; print the
result to @stdout{}.  When successful return true; otherwise return false.
@end defun


@defun mbfl_system_numerical_user_id_to_name @var{NAME}
Convert the symbolic user @var{NAME} to the numerical identifier found in the @file{/etc/passwd}
file; print the result to @stdout{}.  When successful return true; otherwise return false.
@end defun

@c page
@node system group
@section Reading and searching the file @file{/etc/group}


@menu
* system group reading::        Reading the file @file{/etc/group}.
* system group printing::       Printing entries from @file{/etc/group}.
* system group searching::      Searching entries from @file{/etc/group}.
* system group inspect::        Inspecting entries from @file{/etc/group}.
* system group groupid::        Converting group identifiers.
@end menu

@c page
@node system group reading
@subsection Reading the file @file{/etc/group}


@defun mbfl_system_group_read
Read the file @file{/etc/group} and store the resulting fields in an internal global array variable.
Only the first call to this function will actually read the file, unless
@func{mbfl_system_group_reset} has been called.
@end defun


@defun mbfl_system_group_reset
Reset the internal state so that the next call to @func{mbfl_system_group_read} will actually load,
or reaload, the contents of @file{/etc/group}.
@end defun

@c page
@node system group printing
@subsection Printing entries from @file{/etc/group}


We are meant to call these function after a call to @func{mbfl_system_group_read}.


@defun mbfl_system_group_print_entries
Print to @stdout{} the entries of @file{/etc/group}, one per line.  The format of each line is:

@example
name='root' passwd='x' gid=0 users='root'
@end example
@end defun


@defun mbfl_system_group_print_entries_as_xml
Print to @stdout{} the entries of @file{/etc/group}, one per line, in @acronym{XML} format.  The
format of each line is:

@example
<entry name='root' passwd='x' gid='0' users='root'/>
@end example
@end defun


@defun mbfl_system_group_print_entries_as_json
Print to @stdout{} the entries of @file{/etc/group}, one per line, in @acronym{JSON} format.
The format of each line is:

@example
"entry": @{ "name": "root", "passwd": "x", "gid": 0, "users": "root" @}
@end example
@end defun

@c page
@node system group searching
@subsection Searching entries from @file{/etc/group}


We are meant to call these function after a call to @func{mbfl_system_group_read}.  The following
functions inspect entries from @file{/etc/group} and locate them using numeric indexes; such indexes
are valid only until the next call to @func{mbfl_system_group_reset}.


@defun mbfl_system_group_find_entry_by_name @var{NAME}
@defunx mbfl_system_group_find_entry_by_name_var @var{_RV} @var{NAME}
Search the entries of @file{/etc/group} for one whose group name is @var{NAME}.  When successful:
print to @stdout{} the index of the entry and return true; otherwise return false.  We can use
the index with the functions described in @ref{system group inspect, Inspecting entries from
@file{/etc/group}}.

@DocVarVariant{}
@end defun


@defun mbfl_system_group_find_entry_by_gid @var{GID}
@defunx mbfl_system_group_find_entry_by_gid_var @var{_RV} @var{GID}
Search the entries of @file{/etc/group} for one whose group id is @var{GID}.  When successful: print
to @stdout{} the index of the entry and return true; otherwise return false.  We can use the
index with the functions described in @ref{system group inspect, Inspecting entries from
@file{/etc/group}}.

@DocVarVariant{}
@end defun

@c page
@node system group inspect
@subsection Inspecting entries from @file{/etc/group}


The following functions inspect entries from @file{/etc/group} using an index argument; we must
obtain indexes with the functions described in @ref{system group searching, Searching entries from
@file{/etc/group}}.


@defun mbfl_system_group_get_name @var{GROUP_IDX}
@defunx mbfl_system_group_get_name_var @var{_RV} @var{GROUP_IDX}
Print to @stdout{} the field name of the @file{/etc/group} entry at index @var{GROUP_IDX}.

@DocVarVariant{}

@example
local IDX NAME

mbfl_system_group_read
if mbfl_system_group_find_entry_by_name_var IDX root
then
    if mbfl_system_group_get_name_var NAME $IDX
    then echo "$NAME"
    fi
fi
@end example
@end defun


@defun mbfl_system_group_get_passwd @var{GROUP_IDX}
@defunx mbfl_system_group_get_passwd_var @var{_RV} @var{GROUP_IDX}
Print to @stdout{} the field passwd of the @file{/etc/group} entry at index @var{GROUP_IDX}.

@DocVarVariant{}
@end defun


@defun mbfl_system_group_get_gid @var{GROUP_IDX}
@defunx mbfl_system_group_get_gid_var @var{_RV} @var{GROUP_IDX}
Print to @stdout{} the field gid of the @file{/etc/group} entry at index @var{GROUP_IDX}.

@DocVarVariant{}
@end defun


@defun mbfl_system_group_get_users @var{GROUP_IDX}
@defunx mbfl_system_group_get_users_var @var{_RV} @var{GROUP_IDX}
Print to @stdout{} the field users of the @file{/etc/group} entry at index @var{GROUP_IDX}.

@DocVarVariant{}
@end defun


@defun mbfl_system_group_get_users_count @var{GROUP_IDX}
@defunx mbfl_system_group_get_users_count_var @var{_RV} @var{GROUP_IDX}
Print to @stdout{} the number of user names in the list of users for the entry at index
@var{GROUP_IDX}.

@DocVarVariant{}
@end defun


@defun mbfl_system_group_get_user_name @var{GROUP_IDX} @var{USER_IDX}
@defunx mbfl_system_group_get_user_name_var @var{_RV} @var{GROUP_IDX} @var{USER_IDX}
Print to @stdout{} the name of the user at index @var{USER_IDX} in the list of users for the
entry at index @var{GROUP_IDX}.

@DocVarVariant{}

@example
local -i GROUP_IDX USER_COUNT USER_IDX
local USER_NAME

mbfl_system_group_read

if GROUP_IDX=$(mbfl_system_group_find_entry_by_name root)
then
    USER_COUNT=$(mbfl_system_group_get_users_count $GROUP_IDX)
    for ((USER_IDX=0; USER_IDX < USER_COUNT; ++USER_IDX))
    do mbfl_system_group_get_user_name $GROUP_IDX $USER_IDX
    done
fi

# Using the "_var" variants.
if mbfl_system_group_find_entry_by_name_var GROUP_IDX root
then
    mbfl_system_group_get_users_count_var USER_COUNT $GROUP_IDX
    for ((USER_IDX=0; USER_IDX < USER_COUNT; ++USER_IDX))
    do
        mbfl_system_group_get_user_name_var USER_NAME \
           $GROUP_IDX $USER_IDX
        echo "$USER_NAME"
    done
else return 1
fi
@end example
@end defun

@c page
@node system group groupid
@subsection Converting group identifiers


We are meant to call these function after a call to @func{mbfl_system_group_read}; @ref{system
group reading, Reading the file @file{/etc/group}}.


@defun mbfl_system_group_gid_to_name @var{GID}
@defunx mbfl_system_group_gid_to_name_var @var{_RV} @var{GID}
Print to @stdout{} the name of the group whose gid is @var{GID}.  When successful return true;
otherwise return false.

@DocVarVariant{}

@example
local GROUP_NAME

if mbfl_system_group_read
then mbfl_system_group_gid_to_name 0
fi

# Using the "_var" variants.
if mbfl_system_group_read
then
    mbfl_system_group_gid_to_name_var GROUP_NAME 0
    echo "$GROUP_NAME"
fi
@end example
@end defun


@defun mbfl_system_group_name_to_gid @var{NAME}
@defunx mbfl_system_group_name_to_gid_var @var{_RV} @var{NAME}
Print to @stdout{} the id of the group whose gid is @var{GID}.  When successful return true;
otherwise return false.

@DocVarVariant{}

@example
local GROUP_ID

if mbfl_system_group_read
then mbfl_system_group_name_to_gid 'root'
fi

# Using the "_var" variants.
if mbfl_system_group_read
then
    if mbfl_system_group_name_to_gid_var GROUP_ID 'root'
    then echo "$GROUP_ID"
    fi
fi
@end example
@end defun


@defun mbfl_system_numerical_group_id_to_name @var{ID}
Convert the numerical group @var{ID} to the group name found in the @file{/etc/group} file; print the
result to @stdout{}.  When successful return true; otherwise return false.
@end defun


@defun mbfl_system_numerical_group_id_to_name @var{NAME}
Convert the symbolic group @var{NAME} to the numerical identifier found in the @file{/etc/group}
file; print the result to @stdout{}.  When successful return true; otherwise return false.
@end defun

@c page
@node system users
@section Gathering users data


At package configuration time we can specify which @command{id} and @command{whoami} executables to
use by setting variables on the command line of the configuration script @command{configure}:

@example
configure ID=/path/to/id WHOAMI=/pash/to/whoami
@end example

@menu
* system users whoami::         Determining the effective user name.
* system users id::             Determining user's IDs.
@end menu

@c page
@node system users whoami
@subsection Determining the effective user name


@defun mbfl_system_whoami
@defunx mbfl_system_whoami_var @var{_RV}
Run the program @command{whoami} to determine the effective user name; print it on the standard
output channel.  If @command{whoami} is not executable or an error occurs executing it: return by
calling @func{return_failure}.

We need to remember that a pathname to @command{whoami} is determined at package configuration time
and hard--coded in the @mbfl{} file; @ref{system users, Gathering users data}.

@example
mbfl_system_whoami      @print{} marco

@{
  mbfl_declare_varref(USERNAME)
  mbfl_system_whoami_var mbfl_datavar(USERNAME)
  "$USERNAME"
@} @result{} marco
@end example
@end defun

@c page
@node system users id
@subsection Determining user's IDs


@defun mbfl_system_id @var{ARG} @dots{}
@defunx mbfl_system_id_var @var{_RV} @var{ARG} @dots{}
Run the program @command{id} handing to it the given optional arguments; the program is run through
the @func{mbfl_program_exec} interface.  If @command{id} is not executable or an error occurs
executing it: return by calling @func{return_failure}.

We need to remember that a pathname to @command{id} is determined at package configuration time and
hard--coded in the @mbfl{} file; @ref{system users, Gathering users data}.

@example
mbfl_system_id '--user' '--name'
@print{} marco

@{
  mbfl_declare_varref(USERNAME)
  mbfl_system_id_var mbfl_datavar(USERNAME) '--user' '--name'
  "$USERNAME"
@} @result{} marco
@end example
@end defun


@defun mbfl_system_effective_user_id @var{ARG} @dots{}
@defunx mbfl_system_effective_user_id_var @var{_RV} @var{ARG} @dots{}
Use the functions @func{mbfl_system_id} and @func{mbfl_system_id_var} to determine the effective
user id.
@end defun


@defun mbfl_system_effective_group_id @var{ARG} @dots{}
@defunx mbfl_system_effective_group_id_var @var{_RV} @var{ARG} @dots{}
Use the functions @func{mbfl_system_id} and @func{mbfl_system_id_var} to determine the effective
group id.
@end defun


@defun mbfl_system_real_user_id @var{ARG} @dots{}
@defunx mbfl_system_real_user_id_var @var{_RV} @var{ARG} @dots{}
Use the functions @func{mbfl_system_id} and @func{mbfl_system_id_var} to determine the real user id.
@end defun


@defun mbfl_system_real_group_id @var{ARG} @dots{}
@defunx mbfl_system_real_group_id_var @var{_RV} @var{ARG} @dots{}
Use the functions @func{mbfl_system_id} and @func{mbfl_system_id_var} to determine the real group
id.
@end defun


@defun mbfl_system_effective_user_name @var{ARG} @dots{}
@defunx mbfl_system_effective_user_name_var @var{_RV} @var{ARG} @dots{}
Use the functions @func{mbfl_system_name} and @func{mbfl_system_name_var} to determine the effective
user name.
@end defun


@defun mbfl_system_effective_group_name @var{ARG} @dots{}
@defunx mbfl_system_effective_group_name_var @var{_RV} @var{ARG} @dots{}
Use the functions @func{mbfl_system_name} and @func{mbfl_system_name_var} to determine the effective
group name.
@end defun


@defun mbfl_system_real_user_name @var{ARG} @dots{}
@defunx mbfl_system_real_user_name_var @var{_RV} @var{ARG} @dots{}
Use the functions @func{mbfl_system_name} and @func{mbfl_system_name_var} to determine the real user
name.
@end defun


@defun mbfl_system_real_group_name @var{ARG} @dots{}
@defunx mbfl_system_real_group_name_var @var{_RV} @var{ARG} @dots{}
Use the functions @func{mbfl_system_name} and @func{mbfl_system_name_var} to determine the real
group name.
@end defun

@c page
@node semver
@chapter Semantic--version specifications


This module implements a parser for semantic--version string representations.  The basic usage is as
follows:

@example
mbfl_default_object_declare(SEMVER_SPEC)
mbfl_default_object_declare(SEMVER_PARSER)
mbfl_default_object_declare(PARSER_INPUT)
declare -i START_INDEX=0

mbfl_semver_parser_input_make    _(PARSER_INPUT) '1.2.3-alpha.1+x86-64' $START_INDEX
mbfl_semver_parser_make_default  _(SEMVER_PARSER)
mbfl_semver_parse _(SEMVER_SPEC) _(SEMVER_PARSER) _(PARSER_INPUT)

mbfl_declare_varref(MAJOR_NUMBER)
mbfl_declare_varref(BUILD_METADATA)

mbfl_semver_spec_major_number_var   _(MAJOR_NUMBER)   _(SEMVER_PARSER)
mbfl_semver_spec_build_metadata_var _(BUILD_METADATA) _(SEMVER_PARSER)

"$MAJOR_NUMBER"         @result{} 1
"$BUILD_METADATA"       @result{} x86-64
@end example

@menu
* semver conventions::          Naming and operations conventions.
* semver spec::                 @emph{Semantic Versioning} specification.
* semver classes::              Object classes representing semantic--version
                                handling.
* semver parser::               Parsing semantic version specifications.
* semver compar::               Comparing semantic version specifications.
* semver predicates::           String predicates.
@end menu

@c page
@node semver conventions
@section Naming and operations conventions


@menu
* semver conventions underscore::       The underscore syntax.
@end menu

@c page
@node semver conventions underscore
@subsection The underscore syntax


In this chapter we use the underscore syntax as defined in @ref{objects conventions underscore, The
underscore syntax}.

@c page
@node semver spec
@section @emph{Semantic Versioning} specification


The specification of @emph{Semantic Versioning} is publicly available at the site:

@center @url{https://semver.org/}

@noindent
under the terms of the @url{https://creativecommons.org/licenses/by/3.0/, Creative Commons --- CC BY
3.0}.  The @emph{Semantic Versioning} specification is authored by Tom Preston--Werner, inventor of
Gravatars and cofounder of GitHub.  @value{PACKAGE} implements a parser for version 2.0.0 of the
specification; it also adds specifications for ranges.  The full text of the specification is
included here, with small formatting changes.

Given a version number @samp{MAJOR.MINOR.PATCH}, increment the:

@enumerate
@item
@samp{MAJOR} version when you make incompatible @api{} changes.

@item
@samp{MINOR} version when you add functionality in a backwards--compatible manner.

@item
@samp{PATCH} version when you make backwards--compatible bug fixes.
@end enumerate

Additional labels for pre--release and build metadata are available as extensions to the
@samp{MAJOR.MINOR.PATCH} format.

@menu
* semver spec introduction::    Introduction.
* semver spec semver::          Semantic Versioning Specification (SemVer).
* semver spec why::             Why use semantic versioning?
* semver spec faq::             Frequently asked questions.
@end menu

@c page
@node semver spec introduction
@subsection Introduction


In the world of software management there exists a dreaded place called ``dependency hell''.  The
bigger your system grows and the more packages you integrate into your software, the more likely you
are to find yourself, one day, in this pit of despair.

In systems with many dependencies, releasing new package versions can quickly become a nightmare.
If the dependency specifications are too tight, you are in danger of version lock (the inability to
upgrade a package without having to release new versions of every dependent package).  If
dependencies are specified too loosely, you will inevitably be bitten by version promiscuity
(assuming compatibility with more future versions than is reasonable).  Dependency hell is where you
are when version lock and/or version promiscuity prevent you from easily and safely moving your
project forward.

As a solution to this problem, I propose a simple set of rules and requirements that dictate how
version numbers are assigned and incremented.  These rules are based on but not necessarily limited
to pre--existing widespread common practices in use in both closed and open--source software.  For
this system to work, you first need to declare a public @api{}.  This may consist of documentation
or be enforced by the code itself.  Regardless, it is important that this @api{} be clear and
precise.  Once you identify your public @api{}, you communicate changes to it with specific
increments to your version number.  Consider a version format of @samp{X.Y.Z}
(@samp{MAJOR.MINOR.PATCH}).  Bug fixes not affecting the @api{} increment the patch version,
backwards compatible @api{} additions/changes increment the minor version, and backwards
incompatible @api{} changes increment the major version.

I call this system @dfn{Semantic Versioning}.  Under this scheme, version numbers and the way they
change convey meaning about the underlying code and what has been modified from one version to the
next.

@c page
@node semver spec semver
@subsection Semantic Versioning Specification (SemVer)


The key words ``MUST'', ``MUST NOT'', ``REQUIRED'', ``SHALL'', ``SHALL NOT'', ``SHOULD'', ``SHOULD
NOT'', ``RECOMMENDED'', ``MAY'', and ``OPTIONAL'' in this document are to be interpreted as
described in @rfc{} 2119.

@enumerate
@item
Software using @emph{Semantic Versioning} MUST declare a public @api{}.  This @api{} could be
declared in the code itself or exist strictly in documentation.  However it is done, it should be
precise and comprehensive.

@item
A normal version number MUST take the form @samp{X.Y.Z} where @samp{X}, @samp{Y}, and @samp{Z} are
non--negative integers, and MUST NOT contain leading zeroes.  @samp{X} is the major version,
@samp{Y} is the minor version, and @samp{Z} is the patch version.  Each element MUST increase
numerically.  For instance: @samp{1.9.0 -> 1.10.0 -> 1.11.0}.

@item
Once a versioned package has been released, the contents of that version MUST NOT be modified.  Any
modifications MUST be released as a new version.

@item
Major version zero (@samp{0.y.z}) is for initial development.  Anything may change at any time.  The
public @api{} should not be considered stable.

@item
Version @samp{1.0.0} defines the public @api{}.  The way in which the version number is incremented
after this release is dependent on this public @api{} and how it changes.

@item
Patch version @samp{Z} (@samp{x.y.Z | x > 0}) MUST be incremented if only backwards compatible bug
fixes are introduced.  A bug fix is defined as an internal change that fixes incorrect behavior.

@item
Minor version @samp{Y} (@samp{x.Y.z | x > 0}) MUST be incremented if new, backwards compatible
functionality is introduced to the public @api{}.  It MUST be incremented if any public @api{}
functionality is marked as deprecated.  It MAY be incremented if substantial new functionality or
improvements are introduced within the private code.  It MAY include patch level changes.  Patch
version MUST be reset to @samp{0} when minor version is incremented.

@item
Major version @samp{X} (@samp{X.y.z | X > 0}) MUST be incremented if any backwards incompatible
changes are introduced to the public @api{}.  It MAY include minor and patch level changes.  Patch
and minor version MUST be reset to @samp{0} when major version is incremented.

@item
A pre--release version MAY be denoted by appending a hyphen and a series of dot separated
identifiers immediately following the patch version.  Identifiers MUST comprise only @ascii{}
alphanumerics and hyphen @samp{[0-9A-Za-z-]}.  Identifiers MUST NOT be empty.  Numeric identifiers
MUST NOT include leading zeroes.  Pre--release versions have a lower precedence than the associated
normal version.  A pre--release version indicates that the version is unstable and might not satisfy
the intended compatibility requirements as denoted by its associated normal version.  Examples:
@samp{1.0.0-alpha}, @samp{1.0.0-alpha.1}, @samp{1.0.0-0.3.7}, @samp{1.0.0-x.7.z.92}.

@item
Build metadata MAY be denoted by appending a plus sign and a series of dot separated identifiers
immediately following the patch or pre--release version.  Identifiers MUST comprise only @ascii{}
alphanumerics and hyphen @samp{[0-9A-Za-z-]}.  Identifiers MUST NOT be empty.  Build metadata SHOULD
be ignored when determining version precedence.  Thus two versions that differ only in the build
metadata, have the same precedence.  Examples: @samp{1.0.0-alpha+001}, @samp{1.0.0+20130313144700},
@samp{1.0.0-beta+exp.sha.5114f85}.

@item
Precedence refers to how versions are compared to each other when ordered.  Precedence MUST be
calculated by separating the version into major, minor, patch and pre-release identifiers in that
order (build metadata does not figure into precedence).  Precedence is determined by the first
difference when comparing each of these identifiers from left to right as follows: @samp{MAJOR},
@samp{MINOR}, and @samp{PATCH} versions are always compared numerically.  Example:

@example
1.0.0 < 2.0.0 < 2.1.0 < 2.1.1
@end example

When @samp{MAJOR}, @samp{MINOR}, and @samp{PATCH} are equal, a pre--release version has lower
precedence than a normal version.  Example:

@example
1.0.0-alpha < 1.0.0
@end example

Precedence for two pre--release versions with the same @samp{MAJOR}, @samp{MINOR}, and @samp{PATCH}
version MUST be determined by comparing each dot separated identifier from left to right until a
difference is found as follows: identifiers consisting of only digits are compared numerically and
identifiers with letters or hyphens are compared lexically in @ascii{} sort order.  Numeric
identifiers always have lower precedence than non--numeric identifiers.  A larger set of
pre--release fields has a higher precedence than a smaller set, if all of the preceding identifiers
are equal.  Example:

@example
1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-alpha.beta < 1.0.0-beta <
< 1.0.0-beta.2 < 1.0.0-beta.11 < 1.0.0-rc.1 < 1.0.0
@end example
@end enumerate

@c page
@node semver spec why
@subsection Why use semantic versioning?


This is not a new or revolutionary idea.  In fact, you probably do something close to this already.
The problem is that ``close'' isn't good enough.  Without compliance to some sort of formal
specification, version numbers are essentially useless for dependency management.  By giving a name
and clear definition to the above ideas, it becomes easy to communicate your intentions to the users
of your software.  Once these intentions are clear, flexible (but not too flexible) dependency
specifications can finally be made.

A simple example will demonstrate how @emph{Semantic Versioning} can make dependency hell a thing of
the past.  Consider a library called ``Firetruck''.  It requires a Semantically Versioned package
named ``Ladder''.  At the time that Firetruck is created, Ladder is at version @samp{3.1.0}.  Since
Firetruck uses some functionality that was first introduced in @samp{3.1.0}, you can safely specify
the Ladder dependency as greater than or equal to @samp{3.1.0} but less than @samp{4.0.0}.  Now,
when Ladder version @samp{3.1.1} and @samp{3.2.0} become available, you can release them to your
package management system and know that they will be compatible with existing dependent software.

As a responsible developer you will, of course, want to verify that any package upgrades function as
advertised.  The real world is a messy place; there's nothing we can do about that but be vigilant.
What you can do is let @emph{Semantic Versioning} provide you with a sane way to release and upgrade
packages without having to roll new versions of dependent packages, saving you time and hassle.

If all of this sounds desirable, all you need to do to start using @emph{Semantic Versioning} is to
declare that you are doing so and then follow the rules.  Link to this website from your README so
others know the rules and can benefit from them.

@c page
@node semver spec faq
@subsection Frequently asked questions


@enumerate
@item How should I deal with revisions in the @samp{0.y.z} initial development phase?

The simplest thing to do is start your initial development release at @samp{0.1.0} and then
increment the minor version for each subsequent release.

@c ------------------------------------------------------------------------

@item How do I know when to release @samp{1.0.0}?

If your software is being used in production, it should probably already be @samp{1.0.0}.  If you
have a stable @api{} on which users have come to depend, you should be @samp{1.0.0}.  If you're
worrying a lot about backwards compatibility, you should probably already be @samp{1.0.0}.

@c ------------------------------------------------------------------------

@item Doesn't this discourage rapid development and fast iteration?

Major version zero is all about rapid development.  If you're changing the @api{} every day you
should either still be in version @samp{0.y.z} or on a separate development branch working on the
next major version.

@c ------------------------------------------------------------------------

@item If even the tiniest backwards incompatible changes to the public @api{} require a major version bump, won't I end up at version @samp{42.0.0} very rapidly?

This is a question of responsible development and foresight.  Incompatible changes should not be
introduced lightly to software that has a lot of dependent code.  The cost that must be incurred to
upgrade can be significant.  Having to bump major versions to release incompatible changes means
you'll think through the impact of your changes, and evaluate the cost/benefit ratio involved.

@c ------------------------------------------------------------------------

@item Documenting the entire public @api{} is too much work!

It is your responsibility as a professional developer to properly document software that is intended
for use by others.  Managing software complexity is a hugely important part of keeping a project
efficient, and that's hard to do if nobody knows how to use your software, or what methods are safe
to call.  In the long run, @emph{Semantic Versioning}, and the insistence on a well defined public
@api{} can keep everyone and everything running smoothly.

@c ------------------------------------------------------------------------

@item What do I do if I accidentally release a backwards incompatible change as a minor version?

As soon as you realize that you've broken the @emph{Semantic Versioning} spec, fix the problem and
release a new minor version that corrects the problem and restores backwards compatibility.  Even
under this circumstance, it is unacceptable to modify versioned releases.  If it's appropriate,
document the offending version and inform your users of the problem so that they are aware of the
offending version.

@c ------------------------------------------------------------------------

@item What should I do if I update my own dependencies without changing the public @api{}?

That would be considered compatible since it does not affect the public @api{}.  Software that
explicitly depends on the same dependencies as your package should have their own dependency
specifications and the author will notice any conflicts.  Determining whether the change is a patch
level or minor level modification depends on whether you updated your dependencies in order to fix a
bug or introduce new functionality.  I would usually expect additional code for the latter instance,
in which case it's obviously a minor level increment.

@c ------------------------------------------------------------------------

@item What if I inadvertently alter the public @api{} in a way that is not compliant with the version number change (i.e. the code incorrectly introduces a major breaking change in a patch release)?

Use your best judgment.  If you have a huge audience that will be drastically impacted by changing
the behavior back to what the public @api{} intended, then it may be best to perform a major version
release, even though the fix could strictly be considered a patch release.  Remember, @emph{Semantic
Versioning} is all about conveying meaning by how the version number changes.  If these changes are
important to your users, use the version number to inform them.

@c ------------------------------------------------------------------------

@item How should I handle deprecating functionality?

Deprecating existing functionality is a normal part of software development and is often required to
make forward progress.  When you deprecate part of your public @api{}, you should do two things: (1)
update your documentation to let users know about the change, (2) issue a new minor release with the
deprecation in place.  Before you completely remove the functionality in a new major release there
should be at least one minor release that contains the deprecation so that users can smoothly
transition to the new @api{}.

@c ------------------------------------------------------------------------

@item Does @emph{Semantic Versioning} have a size limit on the version string?

No, but use good judgement.  A 255 character version string is probably overkill, for example.
Also, specific systems may impose their own limits on the size of the string.
@end enumerate

@c page
@node semver classes
@section Object classes representing semantic--version handling


The semantic--version specification facilities in this library use data structures as defined by the
objects module, @ref{objects, Object--oriented programming}.

@menu
* semver classes spec::         Object classes representing semantic--version
                                specifications.
* semver classes parser::       Object classes representing semantic--version
                                parsers.
* semver classes input::        Object classes representing semantic--version
                                parsers input strings.
@end menu

@c page
@node semver classes spec
@subsection Object classes representing semantic--version specifications


We can use objects of class @class{mbfl_semver_spec} to build semantic--version representations
from strings as follows:

@example
mbfl_default_object_declare(SEMVER_SPEC)
mbfl_declare_varref(MAJOR)

mbfl_semver_spec_make_from_string _(SEMVER_SPEC) "1.2.3-devel.0+x86-64"

mbfl_semver_spec_major_number_var _(MAJOR) _(SEMVER_SPEC)
"$MAJOR" @result{} 1
@end example

@noindent
and from components as follows:

@example
mbfl_default_object_declare(SEMVER_SPEC)
mbfl_declare_varref(STRREP)

mbfl_semver_spec_make_from_components _(SEMVER_SPEC) 1 2 3 devel.0 x86-64

mbfl_semver_spec_string_var _(STRREP) _(SEMVER_SPEC)
"$STRREP" @result{} "1.2.3-devel.0+x86-64"
@end example


@deftp {Class} mbfl_semver_spec
@deftpx {Superclass} mbfl_default_object
@deftpx {Metaclass} mbfl_default_class
Class of objects representing semantic--version specifications.  It is used both to build new string
representations of semantic--version specifications and to represent the result of parsing a
semantic--version specification string.

@cindex @var{SEMVER_SPEC} parameter
@cindex Parameter @var{SEMVER_SPEC}
@cindex Function parameter @var{SEMVER_SPEC}
When the data variable of an object of this class is used as parameter to function: in this
documentation that parameter is named @var{SEMVER_SPEC}.
@end deftp


@defop {Constructor} {mbfl_semver_spec_t} mbfl_semver_spec_make_from_string @var{SEMVER_SPEC} @var{INPUT_STRING}
Initialise a previously declared object of class @class{mbfl_semver_spec} using the string
representation @var{INPUT_STRING}.  The string might optionally contain the leading @samp{v}.  When
successful return true; otherwise return false.

If @var{SEMVER_SPEC} has already been initialised by a previous call to a constructor: the old
semantic--version specification is deleted.
@end defop


@defop {Constructor} {mbfl_semver_spec_t} mbfl_semver_spec_make_from_components @var{SEMVER_SPEC} @var{MAJOR} @var{MINOR} @var{PATCH_LEVEL}
@defopx {Constructor} {mbfl_semver_spec_t} mbfl_semver_spec_make_from_components @var{SEMVER_SPEC} @var{MAJOR} @var{MINOR} @var{PATCH_LEVEL} @var{PRERELEASE_VERSION} @var{BUILD_METADATA}
Initialise a previously declared object of class @class{mbfl_semver_spec} using the given
parameters.  When successful return true; otherwise return false.

The parameters @var{PRERELEASE_VERSION} and @var{BUILD_METADATA} are optional: when not given, the
corresponding component is set to the empty string.

If @var{SEMVER_SPEC} has already been initialised by a previous call to a constructor: the old
semantic--version specification is deleted.
@end defop


@defop {Predicate} {mbfl_semver_spec_t} mbfl_semver_spec_is_a @var{OBJ}
Return true if @var{OBJ} is the data variable of an object of class @class{mbfl_semver_spec};
otherwise return false.

@example
mbfl_default_object_declare(SEMVER_SPEC)

mbfl_semver_spec_make_from_string _(SEMVER_SPEC) "1.2.3-devel.0+x86-64"

mbfl_semver_spec_is_a _(SEMVER_SPEC)    @result{} 0
mbfl_semver_spec_is_a 'ciao'            @result{} 1
@end example
@end defop


@defop {Accessor} {mbfl_semver_spec_t} mbfl_semver_spec_major_number_var @var{_RV} @var{SEMVER_SPEC}
@defopx {Mutator} {mbfl_semver_spec_t} mbfl_semver_spec_major_number_set @var{SEMVER_SPEC} @var{MAJOR_NUMBER}
Accessor and mutator for the major number specification.  When successful return true; otherwise
return false.

@example
mbfl_default_object_declare(SEMVER_SPEC)
mbfl_declare_varref(MAJOR)

mbfl_semver_spec_make_from_string _(SEMVER_SPEC) "1.2.3-devel.0+x86-64"
mbfl_semver_spec_major_number_var _(MAJOR) _(SEMVER_SPEC)
"$MAJOR" @result{} 1
@end example
@end defop


@defop {Accessor} {mbfl_semver_spec_t} mbfl_semver_spec_minor_version_var @var{_RV} @var{SEMVER_SPEC}
@defopx {Mutator} {mbfl_semver_spec_t} mbfl_semver_spec_minor_version_set @var{SEMVER_SPEC} @var{MINOR_VERSION}
Accessor and mutator for the minor number specification.  When successful return true; otherwise
return false.

@example
mbfl_default_object_declare(SEMVER_SPEC)
mbfl_declare_varref(MINOR)

mbfl_semver_spec_make_from_string _(SEMVER_SPEC) "1.2.3-devel.0+x86-64"
mbfl_semver_spec_minor_number_var _(MINOR) _(SEMVER_SPEC)
"$MINOR" @result{} 2
@end example
@end defop


@defop {Accessor} {mbfl_semver_spec_t} mbfl_semver_spec_patch_level_var @var{_RV} @var{SEMVER_SPEC}
@defopx {Mutator} {mbfl_semver_spec_t} mbfl_semver_spec_patch_level_set @var{SEMVER_SPEC} @var{PATCH_LEVEL}
Accessor and mutator for the patch level specification.  When successful return true; otherwise
return false.

@example
mbfl_default_object_declare(SEMVER_SPEC)
mbfl_declare_varref(PATCH_LEVEL)

mbfl_semver_spec_make_from_string _(SEMVER_SPEC) "1.2.3-devel.0+x86-64"
mbfl_semver_spec_patch_level_var _(PATCH_LEVEL) _(SEMVER_SPEC)
"$PATCH_LEVEL" @result{} 3
@end example
@end defop


@defop {Accessor} {mbfl_semver_spec_t} mbfl_semver_spec_prerelease_version_var @var{_RV} @var{SEMVER_SPEC}
@defopx {Mutator} {mbfl_semver_spec_t} mbfl_semver_spec_prerelease_version_set @var{SEMVER_SPEC} @var{PRERELEASE_VERSION}
Accessor and mutator for the prerelease version specification; this value @strong{does not} contain
the leading hyphen character @samp{-}.  When successful return true; otherwise return false.

@example
mbfl_default_object_declare(SEMVER_SPEC)
mbfl_declare_varref(PRERELEASE_VERSION)

mbfl_semver_spec_make_from_string _(SEMVER_SPEC) "1.2.3-devel.0+x86-64"
mbfl_semver_spec_prerelease_version_var _(PRERELEASE_VERSION) _(SEMVER_SPEC)
"$PRERELEASE_VERSION" @result{} devel.0
@end example
@end defop


@defop {Accessor} {mbfl_semver_spec_t} mbfl_semver_spec_build_metadata_var @var{_RV} @var{SEMVER_SPEC}
@defopx {Mutator} {mbfl_semver_spec_t} mbfl_semver_spec_build_metadata_set @var{SEMVER_SPEC} @var{BUILD_METADATA}
Accessor and mutator for the build metadata; it @strong{does not} contain the leading plus character
@samp{+}.  When successful return true; otherwise return false.

@example
mbfl_default_object_declare(SEMVER_SPEC)
mbfl_declare_varref(BUILD_METADATA)

mbfl_semver_spec_make_from_string _(SEMVER_SPEC) "1.2.3-devel.0+x86-64"
mbfl_semver_spec_build_metadata_var _(BUILD_METADATA) _(SEMVER_SPEC)
"$BUILD_METADATA" @result{} x86-64
@end example
@end defop


@defop {Accessor} {mbfl_semver_spec_t} mbfl_semver_spec_string_var @var{_RV} @var{SEMVER_SPEC}
Accessor for the string representation of a semantic--version; the resulting string does not contain
the leading @samp{v} character.  When successful return true; otherwise return false.

@example
mbfl_default_object_declare(SEMVER_SPEC)
mbfl_declare_varref(STRING)

mbfl_semver_spec_make_from_string _(SEMVER_SPEC) "1.2.3-devel.0+x86-64"
mbfl_semver_spec_string_var _(STRING) _(SEMVER_SPEC)
"$STRING" @result{} 1.2.3-devel.0+x86-64
@end example
@end defop

@c page
@node semver classes parser
@subsection Object classes representing semantic--version parsers


Objects of class @class{mbfl_semver_parser} represent the configuration and state of the parser
used to decompose semantic--version specification string--representations into their components.

@example
mbfl_default_object_declare(SEMVER_PARSER)

mbfl_semver_parser_make_default _(SEMVER_PARSER)

mbfl_declare_varref(PLV)
mbfl_declare_varref(AUIBM)

mbfl_semver_parser_parse_leading_v_var                     _(PLV)   _(SEMVER_PARSER)
mbfl_semver_parser_accept_underscore_in_build_metadata_var _(AUIBM) _(SEMVER_PARSER)

"$PLV"          @result{} optional
"$AUIBM"        @result{} false
@end example


@deftp {Class} mbfl_semver_parser
@deftpx {Superclass} mbfl_default_object
@deftpx {Metaclass} mbfl_default_class
Class of objects representing parsers for semantic--version specification string-representations.

When the data variable of an object of this class is used as parameter to function: in this
documentation that parameter is named @var{SEMVER_PARSER}.
@end deftp


@defop {Constructor} {mbfl_semver_parser_t} mbfl_semver_parser_make_default @var{SEMVER_PARSER}
Initialise an already declared object of class @class{mbfl_semver_parser} with the default values
for the supported options.

The option @samp{parse_leading_v} is set to @samp{optional}.

The option @samp{accept_underscore_in_build_metadata} is set to @samp{false}.

@cindex @var{SEMVER_PARSER} parameter
@cindex Parameter @var{SEMVER_PARSER}
@cindex Function parameter @var{SEMVER_PARSER}
If @var{SEMVER_PARSER} has already been initialised by a previous call to a constructor: the old
options profile is deleted.
@end defop


@defop {Predicate} {mbfl_semver_parser_t} mbfl_semver_parser_is_a @var{OBJ}
Return true if @var{OBJ} is the data variable of an object of class @class{mbfl_semver_parser};
otherwise return false.
@end defop


@defop {Accessor} {mbfl_semver_parser_t} mbfl_semver_parser_parse_leading_v_var @var{_RV} @var{SEMVER_PARSER}
@defopx {Mutator} {mbfl_semver_parser_t} mbfl_semver_parser_parse_leading_v_set @var{SEMVER_PARSER} @var{OPTION_VALUE}
Accessor and mutator for the configuration option: accept a leading @samp{v} character in the
semantic--version specification to parse.  Possible values for @var{OPTION_VALUE} are:
@samp{mandatory}, @samp{missing}, @samp{optional}.  When successful return true; otherwise return
false.
@end defop


@defop {Accessor} {mbfl_semver_parser_t} mbfl_semver_parser_accept_underscore_in_build_metadata_var @var{_RV} @var{SEMVER_PARSER}
@defopx {Mutator} {mbfl_semver_parser_t} mbfl_semver_parser_accept_underscore_in_build_metadata_set @var{SEMVER_PARSER} @var{OPTION_VALUE}
Accessor and mutator for the configuration option: accept underscore characters @samp{_} in the
build metadata of the semantic--version specification to parse.  Possible values for
@var{OPTION_VALUE} are: @samp{true}, @samp{false}.  When successful return true; otherwise return
false.
@end defop


@defop {Accessor} {mbfl_semver_parser_t} mbfl_semver_parser_error_message_var @var{_RV} @var{SEMVER_PARSER}
@defopx {Mutator} {mbfl_semver_parser_t} mbfl_semver_parser_error_message_set @var{SEMVER_PARSER} @var{MESSAGE_STRING}
Accessor and mutator for the error message string: if @func{mbfl_semver_parse} returns failure, this
value is non--empty.  When successful return true; otherwise return false.
@end defop

@c page
@node semver classes input
@subsection Object classes representing semantic--version parsers input strings


Objects of class @class{mbfl_semver_parser_input} are used as ``cursors'' to traverse the
characters of a string while parsing semantic--version specification string-representations.  We
create objects of this class and then hand them as parameter to @func{mbfl_semver_parse}:

@example
mbfl_default_object_declare(PARSER_INPUT)
declare START_INDEX=0

mbfl_semver_parser_input_make _(PARSER_INPUT) "1.2.3-alpha.1" $START_INDEX
mbfl_semver_parse _(SEMVER_SPEC) _(SEMVER_PARSER) _(PARSER_INPUT)
@end example


@deftp {Class} mbfl_semver_parser_input
@deftpx {Superclass} mbfl_default_object
@deftpx {Metaclass} mbfl_default_class
Class of objects representing input strings to be used in parsing semantic--version specifications
string-representations.

@cindex @var{PARSER_INPUT} parameter
@cindex Parameter @var{PARSER_INPUT}
@cindex Function parameter @var{PARSER_INPUT}
When the data variable of an object of this class is used as parameter to function: in this
documentation that parameter is named @var{PARSER_INPUT}.
@end deftp


@defop {Constructor} {mbfl_semver_parser_input_t} mbfl_semver_parser_input_make @var{PARSER_INPUT} @var{INPUT_STRING} @var{START_INDEX}
Initialise an already declared object of class @class{mbfl_semver_parser_input} so that parsing of
@var{INPUT_STRING} will start at @var{START_INDEX}.  It must be:

@example
0 <= @var{STARTX_INDEX} <= mbfl_string_len(@var{INPUT_STRING})
@end example

If @var{PARSER_INPUT} has already been initialised by a previous call to a constructor: the old
state of the object is deleted.
@end defop


@defop {Predicate} {mbfl_semver_parser_input_t} mbfl_semver_parser_input_is_a @var{OBJ}
Return true if @var{OBJ} is the data variable of an object of class @class{mbfl_semver_parser};
otherwise return false.

@example
mbfl_default_object_declare(PARSER_INPUT)

mbfl_semver_parser_input_make _(PARSER_INPUT) "1.2.3-alpha.1" 0
mbfl_semver_parser_input_is_a _(PARSER_INPUT)   @result{} 0
mbfl_semver_parser_input_is_a 'ciao'            @result{} 1
@end example
@end defop


@defop {Accessor} {mbfl_semver_parser_input_t} mbfl_semver_parser_input_string_var @var{_RV} @var{PARSER_INPUT}
Accessor for the input string which is meant to contain a semantic--version specification.  When
successful return true; otherwise return false.

@example
mbfl_default_object_declare(PARSER_INPUT)
mbfl_declare_varref(STR)

mbfl_semver_parser_input_make _(PARSER_INPUT) "1.2.3-alpha.1" 0
mbfl_semver_parser_input_string_var _(STR) _(PARSER_INPUT)
"$STR"  @result{} 1.2.3-alpha.1
@end example
@end defop


@defop {Accessor} {mbfl_semver_parser_input_t} mbfl_semver_parser_start_index_var @var{_RV} @var{PARSER_INPUT}
Accessor for the index of the first character of the semantic--version specification in the input
string.  When successful return true; otherwise return false.

@example
mbfl_default_object_declare(PARSER_INPUT)
mbfl_declare_varref(IDX)

mbfl_semver_parser_input_make _(PARSER_INPUT) "frobnicator-1.2.3-alpha.1" 12
mbfl_semver_parser_input_start_index_var _(IDX) _(PARSER_INPUT)
"$IDX"  @result{} 12
@end example
@end defop


@defop {Accessor} {mbfl_semver_parser_input_t} mbfl_semver_parser_end_index_var @var{_RV} @var{PARSER_INPUT}
@defopx {Mutator} {mbfl_semver_parser_input_t} mbfl_semver_parser_end_index_set @var{PARSER_INPUT} @var{END_INDEX}
Accessor and mutator for index of the first character @strong{after} the end of the
semantic--version specification in the input string.  If the input string holds further text after
the semantic--version specification: we can start parsing it at this index.  This value is
meaningful only after a successful call to @func{mbfl_semver_parse} applied to @var{PARSER_INPUT}.
When successful return true; otherwise return false.

@example
mbfl_default_object_declare(PARSER_INPUT)
mbfl_declare_varref(IDX)

mbfl_semver_parser_input_make _(PARSER_INPUT) "frobnicator-1.2.3-alpha.1" 12
mbfl_semver_parse _(SEMVER_SPEC) _(SEMVER_PARSER) _(PARSER_INPUT)

mbfl_semver_parser_input_end_index_var _(IDX) _(PARSER_INPUT)
"$IDX"  @result{} 25
@end example
@end defop

@c page
@node semver parser
@section Parsing semantic version specifications


@defun mbfl_semver_parse @var{SEMVER_SPEC} @var{SEMVER_PARSER} @var{PARSER_INPUT}
Parse the semantic version specification in @var{PARSER_INPUT} using the configuration in
@var{SEMVER_PARSER} and store the result in @var{SEMVER_SPEC}.  When successful return true;
otherwise return false.

If an error occurs while parsing: an error message string is stored in @var{SEMVER_PARSER}.

In the following example we parse a correct semantic version specification; with prerelease version;
with build metadata.

@example
mbfl_default_object_declare(SEMVER_SPEC)
mbfl_default_object_declare(SEMVER_PARSER)
mbfl_default_object_declare(PARSER_INPUT)
declare -i START_INDEX=0

mbfl_semver_parser_input_make    _(PARSER_INPUT) '1.2.3-alpha.1+x86-64' $START_INDEX
mbfl_semver_parser_make_default  _(SEMVER_PARSER)
mbfl_semver_parse _(SEMVER_SPEC) _(SEMVER_PARSER) _(PARSER_INPUT)

mbfl_declare_varref(MAJOR_NUMBER)
mbfl_declare_varref(BUILD_METADATA)

mbfl_semver_spec_major_number_var   _(MAJOR_NUMBER)   _(SEMVER_PARSER)
mbfl_semver_spec_build_metadata_var _(BUILD_METADATA) _(SEMVER_PARSER)

"$MAJOR_NUMBER"         @result{} 1
"$BUILD_METADATA"       @result{} x86-64
@end example
@end defun


@defun mbfl_semver_split_prerelease_version @var{_RV} @var{PRERELEASE_VERSION_SPEC}
Split a @var{PRERELEASE_VERSION_SPEC} into its component identifiers and store them in the indexed
array whose name is @var{_RV}.  If successful return 0; otherwise return 1.

The string @var{PRERELEASE_VERSION_SPEC} must be a correct prerelease version specification, without
the leading hyphen character, like the one produced by calling @func{mbfl_semver_parse}.  If the
string has an incorrect format: the behaviour of this function is undefined.

In the following exmample we split a prerelease version specification:

@example
mbfl_declare_index_array_varref(RV)

mbfl_semver_split_prerelease_version mbfl_datavar(RV) 'alpha.12.beta.34.gamma.56'

$?                      @result{} 0
mbfl_slots_number(RV)   @result{} 6
mbfl_slot_qref(RV, 0)   @result{} alpha
mbfl_slot_qref(RV, 1)   @result{} 12
mbfl_slot_qref(RV, 2)   @result{} beta
mbfl_slot_qref(RV, 3)   @result{} 34
mbfl_slot_qref(RV, 4)   @result{} gamma
mbfl_slot_qref(RV, 5)   @result{} 56
@end example
@end defun

@c page
@node semver compar
@section Comparing semantic version specifications


@defun mbfl_semver_compare_var @var{_RV} @vari{STRING_REP} @varii{STRING_REP}
Store in the data variable whose name is @var{_RV} the result of comparing the semantic version
specifications @vari{STRING_REP} and @varii{STRING_REP}; when successful return 0, otherwise return
1.

The value stored in the result variable is the classic ternary comparison result:

@table @code
@item -1
if @vari{STRING_REP} < @varii{STRING_REP}.

@item 0
If @vari{STRING_REP} = @varii{STRING_REP}.

@item +1
If @vari{STRING_REP} > @varii{STRING_REP}.
@end table

Usage examples:

@example
@{
  mbfl_declare_varref(RV)
  mbfl_semver_compare_var mbfl_datavar(RV) '1.2.3' '1.2.3'
  $?            @result{} 0
  $RV           @result{} 0
@}

@{
  mbfl_declare_varref(RV)
  mbfl_semver_compare_var mbfl_datavar(RV) '1.2.3' '1.9.3'
  $?            @result{}  0
  $RV           @result{} -1
@}

@{
  mbfl_declare_varref(RV)
  mbfl_semver_compare_var mbfl_datavar(RV) '1.2.3-alpha.1' '1.2.3-alpha.0'
  $?            @result{}  0
  $RV           @result{} +1
@}
@end example
@end defun


@defun mbfl_semver_compare_components_var @var{_RV} @vari{SEMVER_SPEC} @varii{SEMVER_SPEC}
Like @func{mbfl_semver_compare_var} but compare already parsed semantic version specifications.
Examples:

@example
mbfl_default_object_declare(PARSER)

mbfl_default_object_declare(SPEC1)
mbfl_default_object_declare(INPUT1)

mbfl_default_object_declare(SPEC2)
mbfl_default_object_declare(INPUT2)

mbfl_semver_parser_make_default _(PARSER)

mbfl_semver_parser_input_make _(INPUT1) '1.2.3-alpha.3+x86-64' 0
mbfl_semver_parser_input_make _(INPUT2) '1.2.9-devel.2+x86-64' 0

mbfl_semver_parse _(SPEC1) _(PARSER) _(INPUT1)
mbfl_semver_parse _(SPEC2) _(PARSER) _(INPUT2)

mbfl_declare_varref(RV)

mbfl_semver_compare_components_var _(RV) _(SPEC1) _(SPEC2)

$?      @result{}  0
$RV     @result{} -1
@end example
@end defun

@c page
@node semver predicates
@section String predicates


The following predicate function accept as arguments simple strings representing components of
semantic--version specifications.


@defun mbfl_string_is_semver_major_number @var{STR}
Return true if @var{STR} is a valid representation of a major number specification; otherwise return
false.

@example
mbfl_string_is_semver_major_number '0'          @result{} 0
mbfl_string_is_semver_major_number '12'         @result{} 0

mbfl_string_is_semver_major_number '012'        @result{} 1
mbfl_string_is_semver_major_number 'ciao'       @result{} 1
mbfl_string_is_semver_major_number '1.2'        @result{} 1
mbfl_string_is_semver_major_number '1 2'        @result{} 1
@end example
@end defun


@defun mbfl_string_is_semver_minor_number @var{STR}
Return true if @var{STR} is a valid representation of a minor number specification; otherwise return
false.

@example
mbfl_string_is_semver_minor_number '0'          @result{} 0
mbfl_string_is_semver_minor_number '12'         @result{} 0

mbfl_string_is_semver_minor_number '012'        @result{} 1
mbfl_string_is_semver_minor_number 'ciao'       @result{} 1
mbfl_string_is_semver_minor_number '1.2'        @result{} 1
mbfl_string_is_semver_minor_number '1 2'        @result{} 1
@end example
@end defun


@defun mbfl_string_is_semver_patch_level @var{STR}
Return true if @var{STR} is a valid representation of a patch level specification; otherwise return
false.

@example
mbfl_string_is_semver_patch_level '0'           @result{} 0
mbfl_string_is_semver_patch_level '12'          @result{} 0

mbfl_string_is_semver_patch_level '012'         @result{} 1
mbfl_string_is_semver_patch_level 'ciao'        @result{} 1
mbfl_string_is_semver_patch_level '1.2'         @result{} 1
mbfl_string_is_semver_patch_level '1 2'         @result{} 1
@end example
@end defun


@defun mbfl_string_is_semver_prerelease_version @var{STR}
Return true if @var{STR} is a valid representation of a prerelease version specification, without
the leading dash @samp{-}; otherwise return false.

@example
mbfl_string_is_semver_prerelease_version '0'            @result{} 0
mbfl_string_is_semver_prerelease_version '123'          @result{} 0
mbfl_string_is_semver_prerelease_version 'ciao'         @result{} 0
mbfl_string_is_semver_prerelease_version 'ciao-mamma'   @result{} 0
mbfl_string_is_semver_prerelease_version '-'            @result{} 0
mbfl_string_is_semver_prerelease_version '-----'        @result{} 0

mbfl_string_is_semver_prerelease_version '010'          @result{} 1
mbfl_string_is_semver_prerelease_version 'ciao_mamma'   @result{} 1
mbfl_string_is_semver_prerelease_version '_'            @result{} 1
mbfl_string_is_semver_prerelease_version '____'         @result{} 1

mbfl_string_is_semver_prerelease_version 'ciao.0.mamma.1'       @result{} 0
mbfl_string_is_semver_prerelease_version '0.ciao.1.mamma'       @result{} 0
mbfl_string_is_semver_prerelease_version 'ciao.mamma.0.1'       @result{} 0
mbfl_string_is_semver_prerelease_version 'ciao.-----.0.1'       @result{} 0

mbfl_string_is_semver_prerelease_version 'ciao mamma.0.1'       @result{} 1
mbfl_string_is_semver_prerelease_version 'ciao,mamma.0.1'       @result{} 1
mbfl_string_is_semver_prerelease_version 'ciao mamma.0.1'       @result{} 1
mbfl_string_is_semver_prerelease_version 'ciao_mamma.0.1'       @result{} 1
mbfl_string_is_semver_prerelease_version 'ciao;mamma.0.1'       @result{} 1
mbfl_string_is_semver_prerelease_version 'ciao.01'              @result{} 1
@end example
@end defun


@defun mbfl_string_is_semver_build_metadata @var{STR}
Return true if @var{STR} is a valid representation of a build metadata specification, without the
leading plus @samp{+}; otherwise return false.

@example
mbfl_string_is_semver_build_metadata '0'        @result{} 0
mbfl_string_is_semver_build_metadata '123'      @result{} 0
mbfl_string_is_semver_build_metadata 'ciao'     @result{} 0
mbfl_string_is_semver_build_metadata '0123'     @result{} 0

mbfl_string_is_semver_build_metadata '01_23'    @result{} 1
mbfl_string_is_semver_build_metadata '01,23'    @result{} 1
mbfl_string_is_semver_build_metadata '01 23'    @result{} 1

mbfl_string_is_semver_build_metadata '0.1.2'            @result{} 0
mbfl_string_is_semver_build_metadata 'ciao.mamma.hey'   @result{} 0
mbfl_string_is_semver_build_metadata 'ciao.0.mamma.1'   @result{} 0
mbfl_string_is_semver_build_metadata '0.ciao.1.mamma'   @result{} 0
@end example
@end defun


@defun mbfl_string_is_semver_build_metadata_with_underscore @var{STR}
Return true if @var{STR} is a valid representation of a build metadata specification, without the
leading plus @samp{+}; otherwise return false.  Accept underscore characters @samp{_} as valid,
which is outside the specification.
@end defun

@c page
@node main
@chapter Main function


@mbfl{} declares a function to drive the execution of the script; its purpose is to make use of the
other modules to reduce the size of scripts depending on @mbfl{}.  All the code blocks in the
script, with the exception of global variables declaration, should be enclosed in functions.

@menu
* main variables::              Command line arguments variables.
* main function::               Driving script execution.
* main exit::                   Declaring exit codes.
* main misc::                   Other functions.
@end menu

@c page
@node main variables
@section Command line arguments variables


The following global variables are defined by default.


@defvar ARGV1
An array containing all the command line arguments.  When no command line arguments are present:
this array is empty.  The indexes in this array are zero--based.
@end defvar


@defvar ARGC1
A non--negative integer representing the number of values in @code{ARGV1}.  When no command line
arguments are present: this variable is set to zero.
@end defvar


@defvar ARG1ST
A non--negative integer representing the index in @code{ARGV1} of the next argument to be processed.
It is initialised to zero; the @code{actions} module increments it to reflect its consuming of
action arguments; the @code{getopts} module uses this value to locate the first argument to parse.
@end defvar


@defvar ARGV
An array containing all the non--action and non--option command line arguments.  When no such
arguments are present: this array is empty.  This variable is filled by the @code{getopts} module.
The indexes in this array are zero--based.

Remembering the Bash syntax for arrays, we can expand the array to all its items with:

@example
"$@{ARGV[@@]@}"
@end example
@end defvar


@defvar ARGC
A non--negative integer representing the number of values in @code{ARGV}.  When no arguments are
present: this variable is set to zero.
@end defvar

@c page
@node main function
@section Driving script execution


@findex script_after_parsing_options
@findex script_before_parsing_options


@defun mbfl_main
The invocation to this function must be the last line of code in the script.  It does the following:

@enumerate
@item
Register the value of the variable @code{script_PROGNAME} in the message module using the function
@func{mbfl_message_set_progname}.

@item
Validate the semantic version specification hard--coded in the @mbfl{} with the requirements of the
script.  If an error occurs in this step: terminate the script by calling
@func{exit_because_invalid_mbfl_version}, @ref{exit_because_invalid_mbfl_version}.

@enumerate a
@item
Check if a function named @func{script_check_mbfl_semantic_version} exists.  If it does not exist:
move on to the next step.  If it does exist: call it with @mbfl{}'s semantic version specification
string as single argument; if the function returns successfully: the version requirements are
considered satisfied; otherwise exit the script by calling @func{exit_because_invalid_mbfl_version}.

@item
Check if the service variable @env{script_REQUIRED_MBFL_VERSION} is defined to a non--empty value,
the value is expected to be a valid semantic version specification representing the minimum version
required by the script; @ref{script_REQUIRED_MBFL_VERSION, variables service}.

If an error occurs while parsing the semantic version specification in
@env{script_REQUIRED_MBFL_VERSION}: terminate the script by calling
@func{exit_because_invalid_mbfl_version}.

If @mbfl{}'s version is lesser than the one required by the script: terminate the script itself by
calling @func{exit_because_invalid_mbfl_version}; otherwise the version requirements are considered
satisfied.
@end enumerate

@item
Parse the command line arguments according to the command actions configuration; this step may
change the selection of: main function, ``before parsing options'' function, ``after parsing
options'' function; if no command actions are configured: nothing is done.

This function searches for a declared action set with name @code{MAIN}: if such set exists, it
expects the first command line argument to be an action identifier in the set.

@item
If it exists: invoke the function @func{script_before_parsing_options} or the one selected by
@func{mbfl_main_set_before_parsing_options}.

@item
Parse command line options with @func{mbfl_getopts_parse}.

@item
If it exists: invoke the function @func{script_after_parsing_options} or the one selected by
@func{mbfl_main_set_after_parsing_options}.

@item
Invoke the function whose name is stored in the global variable @code{mbfl_main_SCRIPT_FUNCTION}, if
it exists, with no arguments; if its return value is non--zero: exit the script with the same code.
The default value is @code{main}.

@item
Exit the script with the return code of the action function or zero.
@end enumerate
@end defun


@defun mbfl_main_set_main @var{FUNCNAME}
Select the main function storing @var{FUNCNAME} into @code{mbfl_main_SCRIPT_FUNCTION}.
@end defun


@defvar mbfl_main_SCRIPT_FUNCTION
Global variable that holds the name of the custom main script function.  The default name is
@code{main}.
@end defvar


@defun mbfl_main_set_before_parsing_options @var{FUNCNAME}
The name of the function to be called right before parsing command line options.  This value can be
customised by both the @mbfl{} and the user script.

The default function name is: @code{script_before_parsing_options}.
@end defun


@defun mbfl_main_set_after_parsing_options @var{FUNCNAME}
The name of the function to be called right after parsing command line options.  This value can be
customised by both the @mbfl{} and the user script.

The default function name is: @code{script_after_parsing_options}.
@end defun

@c page
@node main exit
@section Declaring exit codes


@defvar mbfl_main_pending_EXIT_CODE
Set by @func{mbfl_exit} to the exit code this script is using.

@strong{NOTE} Use of this variable is deprecated; it still exists for backwards compatibility.  We
should use @env{mbfl_PENDING_EXIT_CODE}, @ref{exit codes, Exit codes and return codes}.
@end defvar


@defun mbfl_main_is_exiting
Return true if the script is exiting.

@strong{NOTE} Use of this function is deprecated; it still exists for backwards compatibility.  We
should use @func{mbfl_script_is_exiting}, @ref{exit facilities, Facilities to exit a script}.
@end defun


@defun mbfl_main_declare_exit_code @var{CODE} @var{NAME}
Declare an exit code with value @var{CODE} and identifier @var{NAME}.

@strong{NOTE} Use of this function is deprecated; it still exists for backwards compatibility.  We
should use @func{mbfl_declare_exit_code}, @ref{exit codes, Exit codes and return codes}.
@end defun


@defun mbfl_main_create_exit_functions
@strong{NOTE} This function does nothing; it still exists for backwards compatibility.  See the
facilities described at @ref{exit codes, Exit codes and return codes}.
@end defun


@defun mbfl_main_print_exit_code @var{NAME}
Print the code associated to @var{NAME}.

@strong{NOTE} Use of this function is deprecated; it still exists for backwards compatibility.  We
should use @func{mbfl_print_exit_code}, @ref{exit codes, Exit codes and return codes}.
@end defun

@c page
@node main misc
@section Other functions


@defun mbfl_invoke_script_function @var{FUNCNAME}
If @var{FUNCNAME} is the name of an existing function: it is invoked with no arguments; the return
value is the one of the called function.  The existence test is performed with:

@example
type -t @var{FUNCNAME} = function
@end example

If the function does not exist: return by calling @code{return_because_invalid_function_name}.
@end defun


@defun mbfl_invoke_existent_script_function @var{FUNCNAME}
Like @func{mbfl_invoke_script_function}, but if the function does not exist: print an error message
to @stderr{} and exit by calling @func{exit_because_invalid_function_name}.
@end defun


@defun mbfl_main_print_usage_screen_long
Print the help screen, long version.  It @strong{includes} the predefined command line options.
@end defun


@defun mbfl_main_print_usage_screen_brief
Print the help screen, brief version.  It @strong{excludes} the predefined command line options.
@end defun

@c page
@node testing
@chapter Building test suites


@mbfl{} comes with a little library @value{LIBMBFLTESTSFILE} of functions that may be used to build
test suites; its aim is at building tests for Bash functions, commands and scripts@footnote{The
ideas at the base of this library are taken from the @code{tcltest} package distributed with the
@acronym{TCL} core; @acronym{TCL} stands for @emph{Tool Command Language} and it is a scripting
language originally written by John Ousterhout, see: @url{http://www.tcl.tk/}}.  The library tries
to do as much as possible using functions and aliases, not variables; this is an attempt to let the
user redefine functions to his taste.

@menu
* testing intro::               A way to organise a test suite.
* testing config::              Configuring the package.
* testing running::             Running tests.
* testing compare::             Validating results by comparing.
* testing output::              Validating results by output.
* testing messages::            Printing messages from test functions.
* testing files::               Handling files in tests.
@end menu

@c page
@node testing intro
@section A way to organise a test suite


A useful way to organise a test suite is to split it into a set of files: one for each module to be
tested.

The file @value{LIBMBFLTESTSFILE} must be sourced at the beginning of each test file.  This means
that the variables that you set may interfere with the ones in the library; this should not happen
because the test library prefixes variable names with @code{mbfl_} or @code{dotest_}, but one
exception is @env{TMPDIR}: do not set it in your script, use @func{dotest-echo-tmpdir} to access
that value.  @ref{testing files, Handling files in tests}.


@subsubheading A not so automated example

To understand how the library works lets examine a bare bones example.  The function @code{dotest}
should be invoked at the end of each module in the test suite; each module should define functions
starting with the same prefix.  A module should be stored in a file, and should look like the
following:

@example
# mymodule.test --

source @value{LIBMBFLTESTS}
source module.sh

function module-featureA-1.1 () @{ ... @}
function module-featureA-1.2 () @{ ... @}
function module-featureA-2.1 () @{ ... @}
function module-featureB-1.1 () @{ ... @}
function module-featureB-1.2 () @{ ... @}

dotest module-
dotest-final-report

### end of file
@end example

@noindent
the file should be executed with:

@example
$ bash mymodule.test
@end example

To test just "feature A":

@example
$ TESTMATCH=module-featureA bash mymodule.test
@end example

Remember that the @code{source} builtin will look for files in the
directories selected by the @env{PATH} environment variables, so we may
want to do:

@example
$ PATH=path/to/modules:$@{PATH@} TESTMATCH=module-featureA bash mymodule.test
@end example

It is better to put such stuff in a @file{Makefile}, with @gnu{} Make:

@example
srcdir        = ...
builddir      = ...
BASH_PROGRAM  = bash
MODULES       = moduleA moduleB

testdir       = $(srcdir)/tests
test_FILES    = $(foreach f,$(MODULES),$(testdir)/$(f).test)

test_ENV      = PATH=$(builddir):$(testdir):$(PATH) \
                TESTMATCH=$(TESTMATCH)
test_CMD      = $(test_ENV) $(BASH_PROGRAM)

.PHONY: test-modules

test-modules:
        @@$(foreach f,$(test_FILES),$(test_CMD) $(f);)
@end example

@c page
@node testing config
@section Configuring the package


@defun dotest-set-verbose
@defunx dotest-unset-verbose
Set or unset verbose execution.  If verbose mode is on: some commands output messages on stderr
describing what is going on.  Examples: files and directories creation/removal.
@end defun


@defun dotest-option-verbose
Return true if verbose mode is on, false otherwise.
@end defun


@defun dotest-set-test
@defunx dotest-unset-test
Set or unset test execution.  If test mode is on: external commands (like @command{rm} and
@command{mkdir}) are not executed, the command line is sent to stderr.  Test mode is meant to be
used to debug the test library functions.
@end defun


@defun dotest-option-test
Return true if test mode is on, false otherwise.
@end defun


@defun dotest-set-debug
@defunx dotest-unset-debug
Enable or disable printing debug messages.  If debug mode is on: the function @func{dotest-debug}
will print its message; otherwise it will print nothing.
@end defun


@defun dotest-option-debug
Return true if debug mode is on, false otherwise.
@end defun


@defun dotest-set-report-start
@defunx dotest-unset-report-start
Set or unset printing a message upon starting a function.
@end defun


@defun dotest-option-report-start
Return true if start function reporting is on; otherwise return false.
@end defun


@defun dotest-set-report-success
@defunx dotest-unset-report-success
Set or unset printing a message when a function execution succeeds.  Failed tests always cause a
message to be printed.
@end defun


@defun dotest-option-report-success
Return true if success function reporting is on; otherwise return false.
@end defun

@c page
@node testing running
@section Running test functions


@defun dotest-final-report
This function must be invoked as last command in the test file to report errors and correctly exit
the test script, in a way compatible with the requirements of @gnu{} Automake,
@automakeref{Scripts-based Testsuites, Scripts-based Testsuites}.
@end defun


@defun dotest @var{PATTERN}
Run all the functions matching @var{PATTERN}.  Usually @var{PATTERN} is the first part of the name
of the functions to be executed; the function names are selected with the following code:

@example
compgen -A function @var{PATTERN}
@end example

There's no constraint on function names, but they must be one--word names.

Before running a test function: the current process working directory is saved, and it is restored
after the execution is terminated.

The return value of the test functions is used as result of the test: true, the test succeeded;
false, the test failed.  Remembering that the return value of a function is the return value of its
last executed command, the functions @func{dotest-equal} and @func{dotest-output}, and of course the
Bash built--in @code{test}, might be used to return the correct value.
@end defun


Messages are printed before and after the execution of each function, according to the mode selected
with: @func{dotest-set-report-success}, @func{dotest-set-report-start}, @dots{} @ref{testing config,
Configuring the package}

The following environment variables will influence the behaviour of @func{dotest}.


@defvar TESTMATCH
Restrict the @var{PATTERN} argument to @func{dotest}.  First function names are matched against
@var{PATTERN}, then, the ones that match, are matched against @env{TESTMATCH}.
@end defvar


@defvar TESTSTART
If @code{yes}: It is equivalent to invoking @func{dotest-set-report-start}.  If @code{no}: It is
equivalent to invoking @func{dotest-unset-report-start}.
@end defvar


@defvar TESTSUCCESS
If @code{yes}: It is equivalent to invoking @func{dotest-set-report-success}.  If @code{no}: It is
equivalent to invoking @func{dotest-unset-report-success}.
@end defvar

@c page
@node testing compare
@section Validating results by comparing


@defun dotest-equal @var{EXPECTED} @var{GOT}
@defunx dotest-equal @var{EXPECTED} @var{GOT} @var{DESCRIPTION}
Compare the two parameters and return true if they are equal; return false otherwise.  In the latter
case print a message showing the expected value and the wrong one.  Must be used as last command in
a function, so that its return value is equal to that of the function.

The optional argument @var{DESCRIPTION} should be a short, one--line, string describing the expected
value; it is used in the output text describing the failed comparison.
@end defun


Example:

@example
function my-func () @{
    echo $(($1 + $2))
@}
function mytest-1.1 () @{
    dotest-equal 5 `my-func 2 3`
@}
dotest mytest-
@end example

@noindent
another example:

@example
function my-func () @{
    echo $(($1 + $2))
@}
function mytest-1.1 () @{
    dotest-equal 5 `my-func 2 3` && \
      dotest-equal 5 `my-func 1 4` && \
      dotest-equal 5 `my-func 3 2` && \
@}
dotest mytest-
@end example

@c page
@node testing output
@section Validating results by output


@defun dotest-output
@defunx dotest-output @var{STRING}
@defunx dotest-output @var{STRING} @var{DESCRIPTION}
Read all the available lines from stdin accumulating them into a local variable, separated by
@code{\n}; then compare the input with @var{STRING}, or the empty string if @var{STRING} is not
present, and return true if they are equal, false otherwise.

The optional argument @var{DESCRIPTION} should be a short, one--line, string describing the expected
value; it is used in the output text describing the failed comparison.
@end defun


Example of test for a function that echoes its three parameters:

@example
function my-lib-function () @{
    echo $1 $2 $3
@}
function mytest-1.1 () @{
    my-lib-function a b c | dotest-output "a b c"
@}
dotest mytest
@end example

Example of test for a function that is supposed to print nothing:

@example
function my-lib-function () @{
    test "$1" != "$2" && echo error
@}
function mytest-1.1 () @{
    my-lib-function a a | dotest-output
@}
dotest mytest
@end example

@c page
@node testing messages
@section Printing messages from test functions


@deffn Alias dotest-echo @var{STRING} [@var{ARG} @dots{}]
@deffnx Alias dotest-debug @var{STRING} [@var{ARG} @dots{}]
Print the parameters on @stderr{}.  @code{dotest-debug} prints some @code{*} to make the message
more visible.
@end deffn


@deffn Alias dotest-printf @var{TEMPLATE} [@var{ARG} @dots{}]
Format the @var{TEMPLATE} with the optional @var{ARG} values, then print the result on @stderr{}.
@end deffn

@c page
@node testing files
@section Handling files in tests


In this section are described functions to be used to create temporary
files; it is a common task to write scripts to manipulate files and
directories.  All the files should be created under a temporary
directory that must be removed after each test function is invoked; the
library automatically invokes @func{dotest-clean-files} when exiting
(using @code{trap}), but it is safer to invoke it at the end of each
function that creates files.


@menu
* testing files directories::   Directories.
* testing files files::         Files.
* testing files examples::      Examples.
@end menu

@c page
@node testing files directories
@subsection Directories


@defun dotest-cd @var{DIRECTORY}
Change the working directory.  This is just a wrapper for @command{cd};
if verbose mode is on: print a message.
@end defun


@defun dotest-mkdir @var{DIRECTORY}
@defunx dotest-mkdir @var{DIRECTORY} @var{PREFIX}
Create @var{DIRECTORY} under the temporary directory; @var{DIRECTORY}
must be a relative pathname (that is: it must not begin with a slash).

The optional @var{PREFIX} is a relative pathname that is prepended to
@var{DIRECTORY}: it is useful to prepend the name of a parent directory.

Print to stdout the full pathname of the directory.
@end defun


@subsubheading Temporary directory

@defun dotest-echo-tmpdir
Print the value of the temporary directory in which all the files and
directories will be created.  The value is prefixed with the value of
the environment variable @env{TMPDIR}, or @file{/tmp} if not set.
@end defun


@defun dotest-cd-tmpdir
Change the working directory to the temporary directory.
@end defun


@defun dotest-mktmpdir
Create the temporary directory.  @func{dotest-mkdir} creates the temporary directory automatically
by using the @option{--parents} option of @command{mkdir}.  This function is automatically invoked
by @func{dotest-mkfile} and @func{dotest-mkpathname}.
@end defun

@c page
@node testing files files
@subsection Files


@defun dotest-mkfile @var{PATHNAME}
@defunx dotest-mkfile @var{PATHNAME} @var{PREFIX}
Create an empty file.  The optional @var{PREFIX} is a relative pathname
that is prepended to @var{PATHNAME}: It is useful to prepend the name of
a parent directory.  Print to stdout the full pathname of the file.
@end defun


@defun dotest-clean-files
Remove the temporary directory and all its children.  Should be invoked
at the end of each function that creates temporary files or directories.

Return the value of the last command executed before the invocation,
that way it can be used right after @func{dotest-output} and
@func{dotest-equal} without loosing the return value of the function.
@end defun


@defun dotest-mkpathname @var{PATHNAME}
@defunx dotest-mkpathname @var{PATHNAME} @var{PREFIX}
Compose a pathname under the temporary testing directory.  The optional @var{PREFIX} is a relative
pathname that is prepended to @var{PATHNAME}: It is useful to prepend the name of a parent
directory.  Print to stdout the full pathname of the file.

This function invokes @func{dotest-mktmpdir}.
@end defun


@subsubheading Testing conditions


@defun dotest-assert-file-exists @var{FILE} @var{ERROR_MESSAGE}
Test that @var{FILE} exists: If true returns with code zero; else print
@var{ERROR_MESSAGE}, invoke @func{dotest-clean-files} and return with
code one.
@end defun


@defun dotest-assert-file-unexists @var{FILE} @var{ERROR_MESSAGE}
Test that @var{FILE} does not exist: If true return with code zero; else
print @var{ERROR_MESSAGE}, invoke @func{dotest-clean-files} and return
with code one.
@end defun

@c page
@node testing files examples
@subsection Examples


Examples of usage of @code{dotest-clean-files}:

@example
function mytest-1.1 () @{
    local dir=$(dotest-mkdir a/b)
    local result=

    ...
    result=...
    dotest-equal 123 $result
    dotest-clean-files
@}
function mytest-1.2 () @{
    local dir=$(dotest-mkfile file.ext)
    local result=

    ...
    result=...
    dotest-equal 123 $result
    dotest-clean-files
@}

dotest mytest-
dotest-final-report
@end example

@c page
@node linker
@appendix Searching and sourcing libraries at run--time


@cindex @value{LIBMBFLLINKERFILE}, utilities library
@cindex Library of utilities, @value{LIBMBFLLINKERFILE}
@cindex Utilities, the library @value{LIBMBFLLINKERFILE}


This section documents the library @value{LIBMBFLLINKERFILE}, the @dfn{linker library}; a library to
be embedded in a script to search and source other libraries at run--time.  The linker library is
standalone: it does not require @mbfl{}'s core library to be sourced first.

@menu
* linker embedding::            Embedding the linker library.
* linker sourcing::             Sourcing libraries at run--time.
* linker finding::              Finding libraries.
@end menu

@c page
@node linker embedding
@appendixsec Embedding the linker library


We can embed this library at preprocessing--time by adding the following line on the top of a source
file:

@example
mbfl_embed_library(/path/to/@value{LIBMBFLLINKERFILE})
@end example

@noindent
for details @ref{preprocessor loading, Libraries loading and embedding}.

If we use the @gnu{} Autotools to configure a package, we can add the following line to
@file{Makefile.am}:

@example
MBFL_LIBMBFL_LINKER     = @@MBFL_LIBMBFL_LINKER@@
@end example

@noindent
and use such variable to embed the linker library; @ref{overview autotools, Using the @gnu{}
Autotools}.  For example, in the @file{Makefile.am} we do:

@example
myscriptsdir            = $(bindir)
myscripts_SCRIPTS       = myscript.bash
myscripts_BSOURCES      = myscript.bash.m4
CLEANFILES              += $(myscripts_SCRIPTS)
EXTRA_DIST              += $(myscripts_BSOURCES)

AM_MBFLPP_FLAGS         = --add-bash --define=__LIBMBFL_LINKER__="$(MBFL_LIBMBFL_LINKER)"

%.bash : %.bash.m4
        $(MBFLPP) $(AM_MBFLPP_FLAGS) $(MBFLPPFLAGS) <$< >$@@
@end example

@noindent
and in the script we do:

@example
mbfl_embed_library(__LIBMBFL_LINKER__)
@end example

Also notice that the preprocessor option @option{--print-libmbfl-linker} will print the file
pathname of the installed library, @ref{--print-libmbfl-linker, Invoking the preprocessor}.  For
example:

@example
mbflpp.bash --print-libmbfl-linker
@print{} /usr/local/share/mbfl/libmbfl-linker.bash
@end example

@c page
@node linker sourcing
@appendixsec Sourcing libraries at run--time


To source a library at run--time, we have to first embed the linker library; @ref{linker embedding,
Embedding the linker library}.  The linker library visits the file systems searching for @mbfl{}
library files in a list of directories.

The linker library defines a default search path containing the following directories:

@example
/usr/local/share/mbfl
/usr/share/mbfl
/share/mbfl
@end example

We can define a search path, which takes precedence over the default one, by exporting the
environment variable @env{MBFL_LIBRARY_PATH}.  For example, we can put the following line in a
@file{~/.bash_profile} file:

@example
export MBFL_LIBRARY_PATH=/home/marco/share/mbfl
@end example

Once the search path is configured, we start a script with the following preprocessor macro uses:

@example
mbfl_embed_library(__LIBMBFL_LINKER__)
mbfl_linker_source_library_by_stem(core)
@end example

@noindent
the macro @func{mbfl_linker_source_library_by_stem} will search a library whose file name is built
from the ``stem'' @samp{core} as follows:

@example
printf -v FILENAME 'libmbfl-%s.bash' "$STEM"
@end example

@noindent
in this case the result is @file{libmbfl-core.bash}; if the library is found: it is loaded using
@func{mbfl_load_library}; if the library is not found: the script exits with
@func{exit_because_error_loading_library}.

We can insert as many uses of @func{mbfl_linker_source_library_by_stem} to load all the libraries we
need:

@example
mbfl_linker_source_library_by_stem(git)
mbfl_linker_source_library_by_stem(passwords)
mbfl_linker_source_library_by_stem(containers)
@end example

If a library with a specific stem has already been loaded: nothing happens.  In the following code:

@example
mbfl_linker_source_library_by_stem(containers)
mbfl_linker_source_library_by_stem(containers)
@end example

@noindent
the first use of @func{mbfl_linker_source_library_by_stem} will source the library, the second use
will do nothing.

@c page
@node linker finding
@appendixsec Finding libraries


@defvr {Environment Variable} MBFL_LIBRARY_PATH
A Unix--style colon separated list of directories to be searched, left--to--right, for @mbfl{}
libraries.
@end defvr


@deffn {Preprocessor Macro} mbfl_linker_source_library_by_stem (@var{STEM})
Expand into code that searches a library in the current search path and sources the corresponding
file.  If the library is not found: the script exits with @func{exit_because_error_loading_library}.

If the library has already been searched and found: the search path is @strong{not} visited again;
the already found pathname is used.

If the library has already been sourced: the source file is @strong{not} sourced again; nothing
happens.
@end deffn


@defun mbfl_linker_search_by_stem_var @var{PATHNAME_RV} @var{STEM}
Search a library in the current search path and store the resulting absolute file pathname in the
result variable @var{PATHNAME_RV}.  When successful return true, otherwise return false and leave
@var{PATHNAME_RV} untouched.

Searching is performed by @func{mbfl_linker_search_by_stem_in_search_path_var}.

First the library is searched in the custom search path defined by the environment variable
@env{MBFL_LIBRARY_PATH}.  Then the library is searched in @mbfl{}'s default search path:

@example
/usr/local/share/mbfl
/usr/share/mbfl
/share/mbfl
@end example
@end defun


@defun mbfl_linker_search_by_stem_in_search_path_var @var{PATHNAME_RV} @var{STEM} @var{SEARCH_PATH_ARRY}
Search a library in the search path defined by @var{SEARCH_PATH_ARRY} and store the resulting
absolute file pathname in the result variable @var{PATHNAME_RV}.  When successful return true,
otherwise return false and leave @var{PATHNAME_RV} untouched.

The parameter @var{STEM} must be an identifier which is used to build the library filename as
follows:

@example
printf -v FILENAME 'libmbfl-%s.bash' @var{STEM}
@end example

The parameter @var{SEARCH_PATH_ARRY} must be the name of an index array whose values are directories
in which to search for the library file.  The array is visited in increasing index order, starting
from index @samp{0}.

@example
mbfl_declare_varref(PATHNAME)
mbfl_declare_index_array_varref(SEARCH_PATH)

mbfl_slot_set(SEARCH_PATH, 0, '/home/marco/share/mbfl')
mbfl_slot_set(SEARCH_PATH, 1, '/opt/mbfl/4.0.0')

mbfl_linker_search_by_stem_in_search_path_var mbfl_datavar(PATHNAME) 'core' mbfl_datavar(SEARCH_PATH)
@end example
@end defun

@c page
@node libmbfl-utils
@appendix Utilities library


@cindex @value{LIBMBFLUTILSFILE}, utilities library
@cindex Library of utilities, @value{LIBMBFLUTILSFILE}
@cindex Utilities, the library @value{LIBMBFLUTILSFILE}


This section documents the library @value{LIBMBFLUTILSFILE}, a collection of utility modules.  We
can load this library at run--time with:

@example
mbfl_load_library(/path/to/@value{LIBMBFLUTILSFILE})
@end example

@noindent
for details @ref{preprocessor loading, Libraries loading and embedding}.  Notice that the
preprocessor option @option{--print-libmbfl-utils} will print the file pathname of the installed
library, @ref{--print-libmbfl-utils, Invoking the preprocessor}.

@menu
* libmbfl-utils files::         File system utilities.
@end menu

@c page
@node libmbfl-utils files
@appendixsec File system utilities


@menu
* libmbfl-utils files declare:: Declaring file and directory structures.
* libmbfl-utils files stat::    Acquiring attributes of files and directories.
* libmbfl-utils files install:: Installing and normalising files.
@end menu

@c page
@node libmbfl-utils files declare
@appendixsubsec Declaring file and directory structures


In many file system operations we need a description of a file or directory, both to select its
attributes and to report meaningful errors to the user of a script.  The following @api{} allows us
to store such informations into a Bash symbolic array, so that we can use the resulting compound
value as single parameter to function calls; @bashref{Arrays, Arrays}.  In this documentation such
arrays will be often referred to as ``data structures''.

We can declare a file structure as follows:

@example
mbfl_declare_assoc_array_varref(LOGFILE)

mbflutils_file_init_file_struct mbfl_datavar(LOGFILE) \
  '/var/log/software.log' 'root' 'root' '0640' 'log file for software'
@end example

@noindent
another example:

@example
function caller () @{
  mbfl_declare_assoc_array_varref(LOGFILE)

  callee mbfl_datavar(LOGFILE)
  ...
@}

function callee () @{
  mbfl_mandatory_nameref_parameter(LOGFILE, 1, log file data structure)

  mbflutils_file_init_file_struct mbfl_datavar(LOGFILE) \
    '/var/log/software.log' 'root' 'root' '0640' 'log file for software'
@}
@end example


@defun mbflutils_file_init_file_struct @var{ARRYNAME} @var{PATHNAME} @var{DESCRIPTION}
@defunx mbflutils_file_init_directory_struct @var{ARRYNAME} @var{PATHNAME} @var{DESCRIPTION}
@defunx mbflutils_file_init_file_struct @var{ARRYNAME} @var{PATHNAME} @var{DESCRIPTION} @var{OWNER} @var{GROUP} @var{MODE}
@defunx mbflutils_file_init_directory_struct @var{ARRYNAME} @var{PATHNAME} @var{DESCRIPTION} @var{OWNER} @var{GROUP} @var{MODE}
Initialise a symbolic array variable as representing the file system pathname and attributes of a
file or directory; such array variable is to be used later to install the file or directory, or
change its attributes as specified.

The arguments are:

@table @var
@item ARRYNAME
The name of the array variable, which should have been previously declared.

@item PATHNAME
Mandatory parameter.  A string representing the file system pathname of the file or directory; it is
stored in the symbolic array with key @code{PATHNAME}.

@item DESCRIPTION
Mandatory parameter.  A string representing the description of the file or directory; it is stored
in the symbolic array with key @code{DESCRIPTION}.  This description is used in verbose and error
messages by printing it with the Bash built--in @func{printf}, using the format specification
@samp{%b}, so some backslash sequences are expanded; @bashref{Bash Builtins, Bash Builtin Commands}.

@item OWNER
Optional parameter, defaults to the empty string.  A string representing the owner of the file or
directory; it is stored in the symbolic array with key @code{OWNER}.

@item GROUP
Optional parameter, defaults to the empty string.  A string representing the group of the file or
directory; it is stored in the symbolic array with key @code{GROUP}.

@item MODE
Optional parameter, defaults to the empty string.  A string representing the octal or symbolic mode
of the file or directory; it is stored in the symbolic array with key @code{MODE}.
@end table
@end defun

@c page
@node libmbfl-utils files stat
@appendixsubsec Acquiring attributes of files and directories


We usually want to acquire file system attributes from the file system itself, for example:

@example
mbfl_declare_assoc_array_varref(LOGFILE)

mbflutils_file_init_file_struct mbfl_datavar(LOGFILE) \
  '/var/log/software.log' 'log file for software'

mbflutils_file_stat mbfl_datavar(LOGFILE)

"mbfl_slot_ref(LOGFILE,OWNER)"  @result{} root
"mbfl_slot_ref(LOGFILE,GROUP)"  @result{} root
"mbfl_slot_ref(LOGFILE,MODE)"   @result{} 0640
@end example


@defun mbflutils_file_stat @var{ARRYNAME}
Acquire the attributes of an existent file system entry as specified in the symbolic array variable
whose name is @var{ARRYNAME}; the array must have been previously declared with one of the
@func{mbflutils_file_init_*_struct} functions.

The following keys are set, or reset, by this function reading the values from the file system:

@table @code
@item OWNER
A string representing the owner of the file system entry.

@item GROUP
A string representing the group of the file system entry.

@item MODE
A string representing the access permissions mode of the file system entry.
@end table
@end defun

@c page
@node libmbfl-utils files install
@appendixsubsec Installing and normalising files


@cindex Normalising file and directory access permissions.
@cindex Normalising file and directory owners
@cindex Normalising file and directory groups
@cindex @command{chmod}, normalising file and directory access permissions
@cindex @command{chown}, normalising file and directory owners
@cindex @command{chgrp}, normalising file and directory groups


It happens that a script must install files and directories, or normalise the attributes of already
existent files and directories; the @api{} described in this section serves this purpose.


@defun mbflutils_file_install_file @var{ARRYNAME} @var{OPT} @dots{}
@defunx mbflutils_file_install_directory @var{ARRYNAME} @var{OPT} @dots{}
Install a new file or directory according to the specification in the symbolic array variable whose
name is @var{ARRYNAME}; the array must have been previously declared with
@func{mbflutils_file_init_file_struct} or @func{mbflutils_file_init_directory_struct}.

When successful return by calling @func{return_success}, otherwise return by calling
@func{return_failure}.

If verbose execution is enabled: appropriate verbose messages are displayed on @stderr{} describing
the operation.  If an error occurs: an appropriate error message is displayed on @stderr{}
describing the cause of the error.

The installation is performed using the external program @command{install} from the package @gnu{}
Coreutils, @coreutilsref{install invocation, @command{install} copy files and set attributes}.
@command{install} is a preselected program, @ref{mbfl_PROGRAM_INSTALL, Preselected program
pathnames}.  The optional arguments @var{OPT} are placed on the command line of @command{install} in
option position.
@end defun


@defun mbflutils_file_normalise_file @var{ARRYNAME}
@defunx mbflutils_file_normalise_directory @var{ARRYNAME}
Change the attributes of an existent file or directory according to the specification in the
symbolic array variable whose name is @var{ARRYNAME}; the array must have been previously declared
with @func{mbflutils_file_init_file_struct} or @func{mbflutils_file_init_directory_struct}.

When successful return by calling @func{return_success}, otherwise return by calling
@func{return_failure}.

If verbose execution is enabled: appropriate verbose messages are displayed on @stderr{} describing
the operation.  If an error occurs: an appropriate error message is displayed on @stderr{}
describing the cause of the error.
@end defun

@c page
@node libmbfl-at
@appendix Interface to the external program @command{at}


@cindex @value{LIBMBFLATFILE}, library interface to @command{at}
@cindex Library interface to @command{at}, @value{LIBMBFLATFILE}
@cindex @command{at} command, library interface @value{LIBMBFLATFILE}


This section documents the interface to the @command{atd} daemon; the @command{at} service allows a
user to schedule commands to be executed at a later time, we may want to read the @command{at}(1)
manual page.  The interface is defined by the library @value{LIBMBFLATFILE}.

This interface is suitable for scripts that define a unique simple policy to schedule commands;
example: at each run they schedule a command in a fixed queue, to be executed at a fixed time in the
future.  This is good to implement the logic: if a condition does not happen before time @code{T},
then execute command @code{C}.

We can load this library at run--time with:

@example
mbfl_load_library(/path/to/@value{LIBMBFLATFILE})
@end example

@noindent
for details @ref{preprocessor loading, Libraries loading and embedding}.  Notice that the
preprocessor option @option{--print-libmbfl-at} will print the file pathname of the installed
library, @ref{--print-libmbfl-at, Invoking the preprocessor}.

@c ------------------------------------------------------------------------

@subsubheading Commands declaration


@defun mbfl_at_enable
Declare the intention to use the @command{at} interface.  @ref{program declaring, Declaring the
intention to use a program}.

The declared programs are: @command{at}, @command{atq}, @command{atrm}.
@end defun

@c ------------------------------------------------------------------------

@subsubheading Arguments validation


@defun mbfl_at_validate_queue_letter @var{LETTER}
Return true if @var{LETTER} is a valid queue identifier, else return false.
@end defun


@defun mbfl_at_validate_selected_queue
Return true if the currently selected queue identifier is valid, else print an error message and
return false.  A false return code means that an internal error has corrupted the module's state.
@end defun

@c ------------------------------------------------------------------------

@subsubheading Commands scheduling


@defun mbfl_at_select_queue @var{LETTER}
Select and register in an internal state a queue identifier; invoke
@func{mbfl_at_validate_queue_letter} to validate the selection.
@end defun


@defun mbfl_at_schedule @var{COMMAND} @var{TIME}
Schedule @var{COMMAND} in the currently selected queue; the script will be executed at @var{TIME}.

If no error occurs: print to stdout the identifier of the scheduled job; the identifier can be used
as argument to @func{mbfl_at_drop}.

@quotation
The @command{at} command outputs some text (in which the job is embedded) on its @stderr{}
channel, so this function redirects @stderr{} to @stdout{} to return the value; this
operation conflicts with the use of the ``show program'' feature of @func{mbfl_program_exec}.
@end quotation

@var{COMMAND} must be a string representing the invocation of an external executable program: it is
sent unchanged to the @command{at} command.  @var{TIME} is the argument to the @command{at} command,
see the manual page for its description.
@end defun


@defun mbfl_at_drop @var{IDENTIFIER}
Remove a job; the identifier of a job is unique in all the queues, so this function is not affected
by the currently selected queue.
@end defun


@defun mbfl_at_queue_clean
Remove all the jobs from the currently selected queue.
@end defun

@c ------------------------------------------------------------------------

@subsubheading Inspection


@defun mbfl_at_queue_print_identifiers
Print all the job identifiers in the currently selected queue.
@end defun


@defun mbfl_at_queue_print_jobs
Print all the job descriptions in the currently selected queue.
@end defun


@defun mbfl_at_queue_print_queues
Print the letters identifying queues with pending jobs.
@end defun


@defun mbfl_at_print_queue
Print the currently selected queue letter.
@end defun

@c page
@node libmbfl-arch
@appendix Archiving and compressing files


@cindex @value{LIBMBFLARCHFILE}, library interface archiving and compressing
@cindex Interface to archiving and compressing, library @value{LIBMBFLARCHFILE}
@cindex Library interface to archiving and compressing, @value{LIBMBFLARCHFILE}
@cindex Archiving and compressing, library @value{LIBMBFLARCHFILE}
@cindex Compressing and archiving, library @value{LIBMBFLARCHFILE}


This section documents the library @value{LIBMBFLARCHFILE}, an interface to the archiving and
compressing facilities implemented by the most common external programs.  We can load this library
at run--time with:

@example
mbfl_load_library(/path/to/@value{LIBMBFLARCHFILE})
@end example

@noindent
for details @ref{preprocessor loading, Libraries loading and embedding}.  Notice that the
preprocessor option @option{--print-libmbfl-arch} will print the file pathname of the installed
library, @ref{--print-libmbfl-arch, Invoking the preprocessor}.

@menu
* libmbfl-arch tar::            Manipulating tar archives.
* libmbfl-arch compress::       Compressing files.
@end menu

@c page
@node libmbfl-arch tar
@appendixsec Manipulating tar archives


@cindex @command{tar} archives
@cindex Creating tar archives
@cindex Archives, @command{tar}
@CindexCommand{tar}


Remember that when we execute a script with the @option{--test} option: the external commands are
not executed: a command line is echoed to stdout.  It is recommended to use this mode to fine tune
the command line options required by @command{tar}.


@defun mbfl_file_enable_tar
Declare the @command{tar} command.  @ref{program declaring, Declaring the intention to use a
program}
@end defun


@defun mbfl_exec_tar @var{ARG} @dots{}
@defunx mbfl_tar_exec @var{ARG}  @dots{}
Execute @command{tar} with whatever arguments are used.  Return the exit status of the @command{tar}
process.
@end defun


@defun mbfl_tar_create_to_stdout @var{DIRECTORY} @var{OPT} @dots{}
Create an archive and send it to stdout.  The root of the archive is the @var{DIRECTORY}.  Files are
selected with the @code{.} (dot) pattern.  The optional arguments @var{OPT} are placed on the
command line of @command{tar} in option position.  Return the exit status of the @command{tar}
process.
@end defun


@defun mbfl_tar_create_to_file @var{DIRECTORY} @var{ARCHIVE} @var{OPT} @dots{}
Create an archive named @var{ARCHIVE} holding the contents of @var{DIRECTORY}.  Before creating the
archive, the process changes the current directory to @var{DIRECTORY} and selects the files with the
@code{.} (dot) pattern.  The optional arguments @var{OPT} are placed on the command line of
@command{tar} in option position.  Return the exit status of the @command{tar} process.
@end defun


@defun mbfl_tar_archive_directory_to_file @var{DIRECTORY} @var{ARCHIVE} @var{OPT} @dots{}
Like @func{mbfl_tar_create_to_file} but archive all the contents of @var{DIRECTORY}, including the
directory itself (not its parents).  The optional arguments @var{OPT} are placed on the command line
of @command{tar} in option position.  Return the exit status of the @command{tar} process.
@end defun


@defun mbfl_tar_extract_from_stdin @var{DIRECTORY} @var{OPT} @dots{}
Read an archive from stdin and extract it under @var{DIRECTORY} (using the @option{--directory}
option of @command{tar}).  The optional arguments @var{OPT} are placed on the command line of
@command{tar} in option position.  Return the exit status of the @command{tar} process.
@end defun


@defun mbfl_tar_extract_from_file @var{DIRECTORY} @var{ARCHIVE} @var{OPT} @dots{}
Read an archive from a file and extract it under @var{DIRECTORY} (using the @option{--directory}
option of @command{tar}).  The optional arguments @var{OPT} are placed on the command line of
@command{tar} in option position.  Return the exit status of the @command{tar} process.
@end defun


@defun mbfl_tar_list @var{ARCHIVE} @var{OPT} @dots{}
Print to stdout the list of files in @var{ARCHIVE}.  The optional arguments @var{OPT} are placed on
the command line of @command{tar} in option position.  Return the exit status of the @command{tar}
process.
@end defun

@c page
@node libmbfl-arch compress
@appendixsec Compressing files


@cindex Files, compression
@cindex Compressing files
@CindexCommand{gzip}
@CindexCommand{bzip2}


This module has an internal state, stored in global variables.  The state holds informations about:

@itemize
@item
The selected compression external program (default: @command{gzip}).

@item
Whether the program should keep the original files or replace them with the (de)compressed version
(default: do not keep).

@item
Whether the output must be sent to standard output or a file (default: send to a file).
@end itemize

@c ------------------------------------------------------------

@subsubheading Initialisation

@defun mbfl_file_enable_compress
Declare the programs required to compress a file.  @ref{program declaring, Declaring the intention
to use a program}

The programs are: @command{gzip}, @command{bzip2}, @command{lzip}, @command{xz}.
@end defun

@c ------------------------------------------------------------

@subsubheading Configuration

The selection will affect all the future invocations of the compression/decompression functions.


@defun mbfl_file_compress_select_gzip
@defunx mbfl_file_compress_select_bzip
@defunx mbfl_file_compress_select_bzip2
@defunx mbfl_file_compress_select_lzip
@defunx mbfl_file_compress_select_xz
Select a compressor program.
@end defun


@defun mbfl_file_compress_keep
@defunx mbfl_file_compress_nokeep
Select whether the compress program should keep the original file or not.
@end defun


@defun mbfl_file_compress_select_stdout
@defunx mbfl_file_compress_select_nostdout
Select if the output must be sent to stdout or a file.  This takes precedence over the keep/no keep
configuration: if the output is sent to stdout the original file is kept.
@end defun

@c ------------------------------------------------------------

@subsubheading Actions

Additional arguments to the selected compressor may be appended to the invocation of the following
functions and are handed to the compressor unchanged.


@defun mbfl_file_compress @var{PATHNAME} @var{OPT} @dots{}
Compress @var{PATHNAME}, a file pathname, with the currently selected compressor program.
@end defun


@defun mbfl_file_decompress @var{PATHNAME} @var{OPT} @dots{}
Decompress @var{PATHNAME}, a file pathname, with the currently selected compressor program.
@end defun

@c page
@node passwords
@appendix Generating somewhat random passwords


@cindex @value{LIBMBFLPASSWORDSFILE}, library generating passwords
@cindex Library generating passwords, @value{LIBMBFLPASSWORDSFILE}


This section documents a library generating random passwords; the library file is
@value{LIBMBFLPASSWORDSFILE}.  We can load this library at run--time with:

@example
mbfl_load_library(/path/to/@value{LIBMBFLPASSWORDSFILE})
@end example

@noindent
for details @ref{preprocessor loading, Libraries loading and embedding}.  Notice that the
preprocessor option @option{--print-libmbfl-passwords} will print the file pathname of the installed
library, @ref{--print-libmbfl-passwords, Invoking the preprocessor}.

Usually we want to use the passwords--generating functions as follows:

@example
@{
    mbfl_declare_varref(PASSWD_STRING)
    mbfl_passwords_printable_ascii_noblank mbfl_datavar(PASSWD_STRING) 8
    echo "$PASSWORD_STRING"
@}
@print{} [&W4Yl*t
@end example

@c ------------------------------------------------------------------------

@macro MbflDefunPasswordFunc{STEM,STRINGFUNC}
@defun \STEM\ @var{LEN}
@defunx \STEM\_var @var{RV} @var{LEN}
Generate a password string; either print it to @stdout{} or store it in the result variable
@var{RV}.  The result string satisfies the string predicate @func{\STRINGFUNC\}.
@end defun

@end macro

@c ------------------------------------------------------------------------

@MbflDefunPasswordFunc{mbfl_passwords_digits, mbfl_string_is_digit}
@MbflDefunPasswordFunc{mbfl_passwords_ascii_symbols, mbfl_string_is_ascii_symbol}

@c ------------------------------------------------------------------------

@MbflDefunPasswordFunc{mbfl_passwords_lower_case_vowels, mbfl_string_is_lower_case_vowel}
@MbflDefunPasswordFunc{mbfl_passwords_lower_case_consonants, mbfl_string_is_lower_case_consonant}
@MbflDefunPasswordFunc{mbfl_passwords_lower_case_alphabet, mbfl_string_is_lower_case_alphabet}
@MbflDefunPasswordFunc{mbfl_passwords_lower_case_alnum, mbfl_string_is_lower_case_alnum}
@MbflDefunPasswordFunc{mbfl_passwords_lower_case_base16, mbfl_string_is_lower_case_base16}

@MbflDefunPasswordFunc{mbfl_passwords_upper_case_vowels, mbfl_string_is_upper_case_vowel}
@MbflDefunPasswordFunc{mbfl_passwords_upper_case_consonants, mbfl_string_is_upper_case_consonant}
@MbflDefunPasswordFunc{mbfl_passwords_upper_case_alphabet, mbfl_string_is_upper_case_alphabet}
@MbflDefunPasswordFunc{mbfl_passwords_upper_case_alnum, mbfl_string_is_upper_case_alnum}
@MbflDefunPasswordFunc{mbfl_passwords_upper_case_base16, mbfl_string_is_upper_case_base16}

@MbflDefunPasswordFunc{mbfl_passwords_mixed_case_vowels, mbfl_string_is_mixed_case_vowel}
@MbflDefunPasswordFunc{mbfl_passwords_mixed_case_consonants, mbfl_string_is_mixed_case_consonant}
@MbflDefunPasswordFunc{mbfl_passwords_mixed_case_alphabet, mbfl_string_is_mixed_case_alphabet}
@MbflDefunPasswordFunc{mbfl_passwords_mixed_case_alnum, mbfl_string_is_mixed_case_alnum}
@MbflDefunPasswordFunc{mbfl_passwords_mixed_case_base16, mbfl_string_is_mixed_case_base16}

@MbflDefunPasswordFunc{mbfl_passwords_base32, mbfl_string_is_base32}
@MbflDefunPasswordFunc{mbfl_passwords_base64, mbfl_string_is_base64}
@MbflDefunPasswordFunc{mbfl_passwords_printable_ascii_noblank, mbfl_string_is_printable_ascii_noblank}

@c page
@node git
@appendix Version control with @command{git}


@cindex @value{LIBMBFLGIT}, basic interface to @command{git}
@cindex Basic interface to @command{git}, @value{LIBMBFLGIT}
@cindex Version control with @command{git}
@cindex @command{git}, version control


This section documents a library interfacing with the external program @git{}; the library file is
@value{LIBMBFLGIT}.  We can load this library at run--time with:

@example
mbfl_load_library(/path/to/@value{LIBMBFLGIT})
@end example

@noindent
for details @ref{preprocessor loading, Libraries loading and embedding}.  Notice that the
preprocessor option @option{--print-libmbfl-git} will print the file pathname of the installed
library, @ref{--print-libmbfl-git, Invoking the preprocessor}.

@git{} is a very popular version control system; find details at:

@center @url{https://git-scm.com/}

@menu
* git conventions::             Conventions.
* git enable::                  Library initialisation.
* git config::                  Configuration management.
* git repository::              Repository management.
* git branch::                  Branches management.
* git program::                 Running the program.
@end menu

@c page
@node git conventions
@appendixsec Conventions

In this documentation we assume the underscore is defined as macro as described in @ref{objects
conventions underscore, The underscore syntax}.

@c page
@node git enable
@appendixsec Library initialisation


@defun mbfl_vc_git_enable
Declare the intention of using the external program @git{}.  We must call this function before using
the facilities of this library.
@end defun

@c page
@node git config
@appendixsec Configuration management


@deftp {Class} mbfl_vc_git_config_option
@deftpx {Superclass} mbfl_default_object
@deftpx {Metaclass} mbfl_default_class
Class of objects representing @git{} configuration options; its fields are:

@table @code
@item database
A string among: @samp{local}, @samp{global}, @samp{system}, @samp{worktree}, @samp{unspecified}; it
is initialised to @samp{unspecified}.  Notice that @samp{unspecified} is @strong{not} equivalent to
@samp{local}.

This value is used to establish which @git{} option to use among @option{--local},
@option{--global}, @option{--system}, @option{--worktree}; if the field value is @samp{unspecified}
non of these @git{} options is used.

@item key
The configuration value key.

@item default_value
A default value.  It is used as argument to @git{} option @option{--default}.

@item type
A string among: @samp{bool}, @samp{int}, @samp{bool-or-int}, @samp{path}, @samp{expiry-date},
@samp{colour}, @samp{no-type}; it is initialised to @samp{no-type}.  It is used to establish the
argument of the @git{} option @option{--type} or if @option{--no-type} must be used.

@item terminator
A string among: @samp{newline}, @samp{null}; it is initialised to @samp{newline}.  It is used to
establish whether to use @git{} option @option{--null}.
@end table

@cindex @var{CFGOPT}, function parameter, reference to object of class @class{mbfl_vc_git_config_option}
In this documentation function arguments that are references to objects of this class are named
@var{CFGOPT}.
@end deftp


@defop Constructor mbfl_vc_git_config_option  mbfl_vc_git_config_option_define @var{CFGOPT} @var{KEY}
@defopx Constructor mbfl_vc_git_config_option  mbfl_vc_git_config_option_define @var{CFGOPT} @var{KEY} @var{DEFAULT_VALUE}
Initialise a new instance of @class{mbfl_vc_git_config_option} representing a configuration option
with @var{KEY}.

The optional @var{DEFAULT_VALUE} represents the default value.

@example
mbfl_default_object_declare(CFGOPT)

mbfl_vc_git_config_option_define _(CFGOPT) 'marcomaggi.package-name' 'noname'
@end example
@end defop


@defop Accessor mbfl_vc_git_config_option mbfl_vc_git_config_option_value_var @var{CUR_VALUE} @var{CFGOPT}
@defopx Mutator mbfl_vc_git_config_option mbfl_vc_git_config_option_value_set @var{CFGOPT} @var{NEW_VALUE}
Accessor and mutator for the value of the configuration option.

@example
mbfl_default_object_declare(CFGOPT)
mbfl_declare_varref(PKGNAME)

mbfl_vc_git_config_option_define _(CFGOPT) 'marcomaggi.package-name' 'noname'

mbfl_vc_git_config_option_value_var _(PKGNAME) _(CFGOPT)
print '%s' "$PKGNAME"

mbfl_vc_git_config_option_value_set _(CFGOPT) 'my-great-package'
@end example
@end defop


@defop Accessor mbfl_vc_git_config_option mbfl_vc_git_config_option_database_var @var{CUR_VALUE} @var{CFGOPT}
@defopx Mutator mbfl_vc_git_config_option mbfl_vc_git_config_option_database_set @var{CFGOPT} @var{NEW_VALUE}
Accessor and mutator for the field @code{database} of @class{mbfl_vc_git_config_option}.
@end defop


@defop Accessor mbfl_vc_git_config_option mbfl_vc_git_config_option_key_var @var{CUR_VALUE} @var{CFGOPT}
@defopx Mutator mbfl_vc_git_config_option mbfl_vc_git_config_option_key_set @var{CFGOPT} @var{NEW_VALUE}
Accessor and mutator for the field @code{key} of @class{mbfl_vc_git_config_option}.
@end defop


@defop Accessor mbfl_vc_git_config_option mbfl_vc_git_config_option_default_value_var @var{CUR_VALUE} @var{CFGOPT}
@defopx Mutator mbfl_vc_git_config_option mbfl_vc_git_config_option_default_value_set @var{CFGOPT} @var{NEW_VALUE}
Accessor and mutator for the field @code{default_value} of @class{mbfl_vc_git_config_option}.
@end defop


@defop Accessor mbfl_vc_git_config_option mbfl_vc_git_config_option_type_var @var{CUR_VALUE} @var{CFGOPT}
@defopx Mutator mbfl_vc_git_config_option mbfl_vc_git_config_option_type_set @var{CFGOPT} @var{NEW_VALUE}
Accessor and mutator for the field @code{type} of @class{mbfl_vc_git_config_option}.
@end defop


@defop Accessor mbfl_vc_git_config_option mbfl_vc_git_config_option_terminator_var @var{CUR_VALUE} @var{CFGOPT}
@defopx Mutator mbfl_vc_git_config_option mbfl_vc_git_config_option_terminator_set @var{CFGOPT} @var{NEW_VALUE}
Accessor and mutator for the field @code{terminator} of @class{mbfl_vc_git_config_option}.
@end defop


@c page
@node git repository
@appendixsec Repository management


@defun mbfl_vc_git_repository_top_srcdir
@defunx mbfl_vc_git_repository_top_srcdir_var @var{_RV}
Search the file system from the process working directory upwards looking for a @file{.git}
directory.  When found, respectively: print it to @stdout{} (without appending a newline) or store
its full pathname into the result variable @var{_RV}, then return true.  When not found: return
false.

When the search is successful: the resulting pathname is cached internally; subsequent calls will
use the cached value.

@strong{NOTE} Calling the functions @func{mbfl_vc_git_enable} and @func{mbfl_change_directory}
resets the cached value to nothing.
@end defun

@c page
@node git branch
@appendixsec Branches management


@defun mbfl_vc_git_branch_current_name
@defunx mbfl_vc_git_branch_current_name_var @var{CURRENT_BRANCH_NAME_RV}
Print, or store in the result variable referenced by  @var{CURRENT_BRANCH_NAME_RV}, the name of the
current branch.

@example
mbfl_declare_varref(CURRENT_BRANCH_NAME)

mbfl_vc_git_branch_current_name_var mbfl_datavar(CURRENT_BRANCH_NAME)
printf '%s' "$CURRENT_BRANCH_NAME"
@end example
@end defun


@defun mbfl_vc_git_branch_list_all_var @var{BRANCHES_RV}
Acquire the list of all the branch names in the current repository and store them in the result
array variable @var{BRANCHES_RV} (zero--based indexes).

@example
mbfl_declare_index_array_varref(BRANCHES)

mbfl_vc_git_branch_list_all_var mbfl_datavar(BRANCHES_RV)
@end example
@end defun


@defun mbfl_vc_git_branch_list_local_var @var{BRANCHES_RV}
Acquire the list of the local branch names in the current repository and store them in the result
array variable @var{BRANCHES_RV} (zero--based indexes).

@example
mbfl_declare_index_array_varref(BRANCHES)

mbfl_vc_git_branch_list_local_var mbfl_datavar(BRANCHES_RV)
@end example
@end defun


@defun mbfl_vc_git_branch_list_remote_tracking_var @var{BRANCHES_RV}
Acquire the list of the remote tracking branch names in the current repository and store them in the
result array variable @var{BRANCHES_RV} (zero--based indexes).

@example
mbfl_declare_index_array_varref(BRANCHES)

mbfl_vc_git_branch_list_remote_tracking_var mbfl_datavar(BRANCHES_RV)
@end example
@end defun

@c page
@node git program
@appendixsec Running the program


@defun mbfl_vc_git_program @var{ARG} @dots{}
Run the program @git{} with the given arguments; return the exit status of executing @git{}.
@end defun

@c page
@node containers
@appendix Data containers library


@cindex @value{LIBMBFLCONTAINERS}, containers library
@cindex Containers library, @value{LIBMBFLCONTAINERS}


This section documents a data containers library; the library file is @value{LIBMBFLCONTAINERS}.  We
can load this library at run--time with:

@example
mbfl_load_library(/path/to/@value{LIBMBFLCONTAINERS})
@end example

@noindent
for details @ref{preprocessor loading, Libraries loading and embedding}.  Notice that the
preprocessor option @option{--print-libmbfl-containers} will print the file pathname of the
installed library, @ref{--print-libmbfl-containers, Invoking the preprocessor}.

@menu
* containers conventions::      Conventions.
* containers arrays::           Arrays.
* containers vectors::          Vectors.
* containers stacks::           Stacks.
@end menu

@c page
@node containers conventions
@appendixsec Conventions


@menu
* containers conventions underscore::   The underscore syntax.
@end menu

@c page
@node containers conventions underscore
@appendixsubsec The underscore syntax


In this chapter we use the underscore syntax as defined in @ref{objects conventions underscore, The
underscore syntax}.

@c page
@node containers arrays
@appendixsec Arrays


All the functions documented here operate on Bash indexed arrays, @bashref{Arrays, Arrays}.  All the
functions are ``unsafe'' and low--level: there is no parameters validation.  If we need validated
parameters we should use the vector container, @ref{containers vectors, Vectors}.

@menu
* containers arrays conventions::       Conventions.
* containers arrays makers::            Array constructors.
* containers arrays inspection::        Inspecting arrays.
* containers arrays selectors::         Selecting values from arrays.
* containers arrays compar::            Comparing values.
* containers arrays search::            Searching values.
* containers arrays insert::            Inserting values.
* containers arrays filter::            Filter values.
* containers arrays delete::            Removing and deleting values.
* containers arrays fold::              Folding values in indexed arrays.
* containers arrays foreach::           Iterating over values in indexed arrays.
* containers arrays map::               Mapping values in indexed arrays.
* containers arrays copy::              Copying values.
* containers arrays append::            Appending values to arrays.
* containers arrays sorting::           Sorting values into arrays.
* containers arrays set::               Set operations.
* containers arrays misc::              Miscellaneous array operations.
@end menu

@c page
@node containers arrays conventions
@appendixsubsec Conventions of the arrays @api{}


@menu
* containers arrays conventions iterations::    Supported iterations over arrays.
* containers arrays conventions parameters::    Naming conventions for function parameters.
@end menu

@c ------------------------------------------------------------------------

@macro ParameterSemanticsARRY{}
For the semantics of the parameter @var{ARRY} see @ref{@var{ARRY} parameter, Conventions of the
arrays @api{}}.
@end macro

@macro ParameterSemanticsARRYS{}
For the semantics of the parameter @var{ARRYS} see @ref{@var{ARRYS} parameter, Conventions of the
arrays @api{}}.
@end macro

@macro ParameterSemanticsOPERATOR{}
For the semantics of the parameter @var{OPERATOR} see @ref{@var{OPERATOR} parameter, Conventions of
the arrays @api{}}.
@end macro

@macro ParameterSemanticsPRED{}
For the semantics of the parameter @var{PRED} see @ref{@var{PRED} parameter, Conventions of the
arrays @api{}}.
@end macro

@macro ParameterSemanticsISEQUAL{}
For the semantics of the parameter @var{ISEQUAL} see @ref{@var{ISEQUAL} parameter, Conventions
of the arrays @api{}}.
@end macro

@macro ParameterSemanticsISLESS{}
For the semantics of the parameter @var{ISLESS} see @ref{@var{ISLESS} parameter, Conventions of the
arrays @api{}}.
@end macro

@macro ParameterSemanticsISGREATER{}
For the semantics of the parameter @var{ISGREATER} see @ref{@var{ISGREATER} parameter, Conventions
of the arrays @api{}}.
@end macro

@macro ParameterSemanticsCOMPAR{}
For the semantics of the parameter @var{COMPAR} see @ref{@var{COMPAR} parameter, Conventions of the
arrays @api{}}.
@end macro

@macro SemanticsLeftIteration{}
For the semantics of a ``left iteration'' see @ref{Arrays left iteration, Conventions of the arrays
@api{}}.
@end macro

@macro SemanticsRightIteration{}
For the semantics of a ``right iteration'' see @ref{Arrays right iteration, Conventions of the
arrays @api{}}.
@end macro

@macro SemanticsMultiIteration{}
For the semantics of a ``multi iteration'' see @ref{Arrays multi iteration, Conventions of the
arrays @api{}}.
@end macro

@macro SemanticsFoldIteration{}
For the semantics of a ``fold iteration'' see @ref{Arrays fold iteration, Conventions of the arrays
@api{}}.
@end macro

@macro SemanticsForeachIteration{}
For the semantics of a ``foreach iteration'' see @ref{Arrays foreach iteration, Conventions of the
arrays @api{}}.
@end macro

@macro SemanticsMapIteration{}
For the semantics of a ``map iteration'' see @ref{Arrays map iteration, Conventions of the arrays
@api{}}.
@end macro

@c page
@node containers arrays conventions iterations
@appendixsubsubsec Supported iterations over arrays


@value{LIBMBFLCONTAINERS} implements multiple variations of iterations over a single array or
multiple arrays.

@table @dfn
@item Left iteration
@anchor{Arrays left iteration}
@cindex Arrays left iteration
An operator is applied slot--by--slot to values from one or more arrays, left--to--right: first
values from slots @samp{0}, then values from slots @samp{1}, and so on.

@item Right iteration
@anchor{Arrays right iteration}
@cindex Arrays right iteration
An operator is applied slot--by--slot to values from one or more arrays, right--to--left: first
values from the ultimate slots, then values from the penultimate slots, and so on.

@item Multi iteration
@anchor{Arrays multi iteration}
@cindex Arrays multi iteration
An operator is applied slot--by--slot to values from the homologous slots of indexed arrays
themselves stored in an indexed array, which is usually named @var{ARRYS}.

@item Foreach iteration
@anchor{Arrays foreach iteration}
@cindex Arrays foreach iteration
An operator is applied slot--by--slot to every value from one or more source arrays; the purpose of
the application is to generate some side effects.

@item Map iteration
@anchor{Arrays map iteration}
@cindex Arrays map iteration
An operator is applied slot--by--slot to every value from one or more source arrays; the purpose of
the application is to compute values which are stored in a result array.

@item Fold iteration
@anchor{Arrays fold iteration}
@cindex Arrays fold iteration
An operator is applied slot--by--slot to every value from one or more source arrays in such a way
that a result value is ``accumulated''; the purpose of the application is to compute the accumulated
value.  The accumulator has an initial value, which is composed with values from the slots.
@end table

@c page
@node containers arrays conventions parameters
@appendixsubsubsec Naming conventions for function parameters


In the functions documentation some parameters have established meaning:

@table @var
@item ARRY
@anchor{@var{ARRY} parameter}
@cindex @var{ARRY} parameter
@cindex Parameter @var{ARRY}
@cindex Function parameter @var{ARRY}
Every parameter named @var{ARRY} represents the data variable of an indexed array; we should declare
arrays with @func{mbfl_declare_index_array_varref}, @ref{arrays nameref, Declaring arrays as data
variables}.

@example
mbfl_declare_index_array_varref(ARRY, (a b c))

array_func _(ARRY)
@end example

@item ARRYS
@anchor{@var{ARRYS} parameter}
@cindex @var{ARRYS} parameter
@cindex Parameter @var{ARRYS}
@cindex Function parameter @var{ARRYS}
Every parameter named @var{ARRYS} represents the data variable of an indexed array whose values are
themselves data variables of indexed arrays.  When such parameter is used in an iteration: unless
othewise stated, all the referenced indexed arrays @strong{must} have the same number of slots, all
starting with slot @samp{0}; otherwise the function's behaviour is undefined.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c))
mbfl_declare_index_array_varref(ARRY2, (d e f))
mbfl_declare_index_array_varref(ARRY3, (g h i))
mbfl_declare_index_array_varref(ARRYS, (_(ARRY1) _(ARRY2) _(ARRY3)))

multi_array_func _(ARRYS)
@end example

@item IDX
Every parameter named @var{IDX} represents a zero--based index into an indexed array; we should
declare indexes using @code{declare -i @var{IDX}}.

@item OPERATOR
@anchor{@var{OPERATOR} parameter}
@cindex @var{OPERATOR} parameter for arrays @api{}
@cindex Parameter @var{OPERATOR} for arrays @api{}
@cindex Function parameter @var{OPERATOR} for arrays @api{}
Every parameter named @var{OPERATOR} must be an ``applicable identifier'', bound to a function or
command or alias, accepting some number of parameters.  It is used in command lines like:

@example
@var{OPERATOR} @varo{PARAMETER} ...
@end example

Unless otherwise stated: if the return status of @var{OPERATOR} is false, the ongoing iteration is
stopped and its function returns with the same status of @var{OPERATOR}.

@item PRED
@anchor{@var{PRED} parameter}
@cindex @var{PRED} parameter for arrays @api{}
@cindex Parameter @var{PRED} for arrays @api{}
@cindex Function parameter @var{PRED} for arrays @api{}
Every parameter named @var{PRED} must be an ``applicable identifier'', bound to a function or
command or alias, accepting the following parameters:

@example
@var{PRED} @var{VALUE}
@end example

@noindent
where @var{VALUE} is a from an array; @var{PRED} is meant to test some condition against @var{VALUE}
and return true or false.

@item ISEQUAL
@anchor{@var{ISEQUAL} parameter}
@cindex @var{ISEQUAL} parameter for arrays @api{}
@cindex Parameter @var{ISEQUAL} for arrays @api{}
@cindex Function parameter @var{ISEQUAL} for arrays @api{}
Every parameter named @var{ISEQUAL} must be an ``applicable identifier'', bound to a function or
command or alias, accepting the following parameters:

@example
@var{ISEQUAL} @vari{VALUE} @varii{VALUE}
@end example

@noindent
where @vari{VALUE} and @varii{VALUE} are values from arrays; @var{ISEQUAL} must return true if
@vari{VALUE} and @varii{VALUE} are ``equal'' according to some definition of equality, otherwise it
must return false.  @var{ISEQUAL} is usually an optional parameter, when not given: @var{ISEQUAL}
defaults to @func{mbfl_string_equal}.

@item ISLESS
@anchor{@var{ISLESS} parameter}
@cindex @var{ISLESS} parameter for arrays @api{}
@cindex Parameter @var{ISLESS} for arrays @api{}
@cindex Function parameter @var{ISLESS} for arrays @api{}
Every parameter named @var{ISLESS} must be an ``applicable identifier'', bound to a function or
command or alias, accepting the following parameters:

@example
@var{ISLESS} @vari{VALUE} @varii{VALUE}
@end example

@noindent
where @vari{VALUE} and @varii{VALUE} are values from arrays; @var{ISLESS} must return true if
@vari{VALUE} is ``less than'' @varii{VALUE} according to some definition of ordering; otherwise it
must return false.  @var{ISLESS} is usually an optional parameter, when not given: @var{ISLESS}
defaults to @func{mbfl_string_less}.

@item ISGREATER
@anchor{@var{ISGREATER} parameter}
@cindex @var{ISGREATER} parameter for arrays @api{}
@cindex Parameter @var{ISGREATER} for arrays @api{}
@cindex Function parameter @var{ISGREATER} for arrays @api{}
Every parameter named @var{ISGREATER} must be an ``applicable identifier'', bound to a function or
command or alias, accepting the following parameters:

@example
@var{ISGREATER} @vari{VALUE} @varii{VALUE}
@end example

@noindent
where @vari{VALUE} and @varii{VALUE} are values from arrays; @var{ISGREATER} must return true if
@vari{VALUE} is ``greater than'' @varii{VALUE} according to some definition of ordering; otherwise
it must return false.  @var{ISGREATER} is usually an optional parameter, when not given:
@var{ISGREATER} defaults to @func{mbfl_string_greater}.

@item COMPAR
@anchor{@var{COMPAR} parameter}
@cindex @var{COMPAR} parameter for arrays @api{}
@cindex Parameter @var{COMPAR} for arrays @api{}
@cindex Function parameter @var{COMPAR} for arrays @api{}
Every parameter named @var{COMPAR} must be an ``applicable identifier'', bound to a function or
command or alias, accepting the following parameters:

@example
@var{COMPAR} @vari{VALUE} @varii{VALUE}
@end example

@noindent
where @vari{VALUE} and @varii{VALUE} are values from arrays; @var{COMPAR} must compare its
parameters and:

@itemize
@item
if @vari{VALUE} = @varii{VALUE} return 0;

@item
if @vari{VALUE} < @varii{VALUE} return 1;

@item
if @vari{VALUE} > @varii{VALUE} return 2;
@end itemize

@noindent
@var{COMPAR} is usually an optional parameter, when not given: @var{COMPAR} defaults to
@func{mbfl_string_compar}.
@end table

@c page
@node containers arrays makers
@appendixsubsec Array constructors


@defun mbfl_array_tabulate @var{ARRY} @var{NUM_OF_SLOTS}
@defunx mbfl_array_tabulate @var{ARRY} @var{NUM_OF_SLOTS} @var{INITIALISER}
Given the already declared index array @var{ARRY} fill the slots from index @samp{0} included to
index @var{NUM_OF_SLOTS} excluded.

When the parameter @var{INITIALISER} is not given: each slot's value is its index itself.

@example
mbfl_declare_index_array_varref(ARRY)

mbfl_array_tabulate _(ARRY) 5
mbfl_slots_qvalues(ARRY)        @result{} 0 1 2 3 4
@end example

When the parameter @var{INITIALISER} is given: each slot's value is generated with the command line:

@example
@var{INITIALISER} @var{RV} @var{IDX}
@end example

@noindent
where: @var{IDX} is the index of the slot to fill; @var{RV} is the result variable to be set to the
new slot's value.  If @var{INITIALISER} returns false: the function returns immediately with return
status equal to the return status of @var{INITIALISER}.

@example
function initialiser () @{
    mbfl_mandatory_nameref_parameter(RV, 1, result variable)
    mbfl_mandatory_parameter(IDX,        2, slot index)

    let RV=100*IDX
    return_success
@}

mbfl_declare_index_array_varref(ARRY)

mbfl_array_tabulate _(ARRY) 5 initialiser
mbfl_slots_qvalues(ARRY)        @result{} 0 100 200 300 400
@end example
@end defun


@defun mbfl_array_iota @var{ARRY} @var{NUM_OF_SLOTS}
@defunx mbfl_array_iota @var{ARRY} @var{NUM_OF_SLOTS} @var{START} @var{STEP}
Given the already declared index array @var{ARRY} fill the slots from index @samp{0} included to
index @var{NUM_OF_SLOTS} excluded.  The slots' values are computed with an equivalent of:

@example
mbfl_math_expr "$START+$STEP*$IDX"
@end example

@noindent
where the optional parameters @var{START} and @var{STEP} default to @samp{0} and @samp{1}.

@example
mbfl_declare_index_array_varref(ARRY)

mbfl_array_iota _(ARRY) 5
mbfl_slots_qvalues(ARRY)        @result{} 0 1 2 3 4

mbfl_array_iota _(ARRY) 5 10 5
mbfl_slots_qvalues(ARRY)        @result{} 10 15 20 25 30

mbfl_array_iota _(ARRY) 5 1.0 0.1
mbfl_slots_qvalues(ARRY)        @result{} 1 1.1 1.2 1.3 1.4
@end example
@end defun

@c page
@node containers arrays inspection
@appendixsubsec Inspecting arrays


@ParameterSemanticsARRY{}  @ParameterSemanticsARRYS{}


@defun mbfl_multi_array_equal_size_var @var{SIZE_RV} @var{ARRYS}
Return true if all the index arrays in @var{ARRYS} have the same number of slots; otherwise return
false.  If @var{ARRYS} is empty or contains a single array: return true.  When successful: store the
number of slots in the result variable @var{SIZE_RV}; otherwise leave @var{SIZE_RV} untouched.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d e))
mbfl_declare_index_array_varref(ARRY2, (A B C D E))
mbfl_declare_index_array_varref(ARRY3, (. . . . .))
mbfl_declare_index_array_varref(ARRYS, (_(ARRY1) _(ARRY2) _(ARRY3)))
mbfl_declare_integer_varref(SIZE)

mbfl_multi_array_equal_size_var _(SIZE) _(ARRYS)  @result{} 0
"$SIZE"                                           @result{} 5
@end example
@end defun


@defun mbfl_multi_array_minsize_var @var{SIZE_RV} @var{ARRYS}
Determine the minimum size of the arrays in @var{ARRYS} and store it in the result variable
@var{SIZE_RV}; the arrays in @var{ARRYS} can be of any size.  If @var{ARRYS} is empty: the minimum
size is zero.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d))
mbfl_declare_index_array_varref(ARRY2, (A B C D E))
mbfl_declare_index_array_varref(ARRY3, (. . .))
mbfl_declare_index_array_varref(ARRYS, (_(ARRY1) _(ARRY2) _(ARRY3)))
mbfl_declare_integer_varref(SIZE)

mbfl_multi_array_minsize_var _(SIZE) _(ARRYS)
"$SIZE" @result{} 3
@end example
@end defun


@defun mbfl_multi_array_homologous_slots_var @var{HOMOLOGOUS_VALUES_ARRY} @var{ARRYS} @var{IDX}
Store in the result variable @var{HOMOLOGOUS_VALUES_ARRY} the homologous slot values from
@var{ARRYS} at index @var{IDX}.  This function assumes @var{IDX} is a valid slot index for all the
index arrays in @var{ARRY}.

If @var{ARRYS} is empty: do nothing, leave @var{HOMOLOGOUS_VALUES_ARRY} untouched.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d e))
mbfl_declare_index_array_varref(ARRY2, (f g h i l))
mbfl_declare_index_array_varref(ARRY3, (m n o p q))
mbfl_declare_index_array_varref(ARRYS, (_(ARRY1) _(ARRY2) _(ARRY3)))

mbfl_declare_index_array_varref(HOMOLOGOUS_VALUES_ARRY)

mbfl_multi_array_homologous_slots_var _(HOMOLOGOUS_VALUES_ARRY) _(ARRYS) 2
mbfl_slot_ref(HOMOLOGOUS_VALUES_ARRY, 0)        @result{} c
mbfl_slot_ref(HOMOLOGOUS_VALUES_ARRY, 1)        @result{} h
mbfl_slot_ref(HOMOLOGOUS_VALUES_ARRY, 2)        @result{} o

mbfl_multi_array_homologous_slots_var _(HOMOLOGOUS_VALUES_ARRY) _(ARRYS) 4
mbfl_slot_ref(HOMOLOGOUS_VALUES_ARRY, 0)        @result{} e
mbfl_slot_ref(HOMOLOGOUS_VALUES_ARRY, 1)        @result{} l
mbfl_slot_ref(HOMOLOGOUS_VALUES_ARRY, 2)        @result{} q
@end example
@end defun

@c page
@node containers arrays selectors
@appendixsubsec Selecting values from arrays


@ParameterSemanticsARRY{}


@defun mbfl_array_left_take @var{DST_ARRY} @var{SRC_ARRY} @var{NUM_OF_SLOTS}
@defunx mbfl_array_right_take @var{DST_ARRY} @var{SRC_ARRY} @var{NUM_OF_SLOTS}
Take the leftmost or rightmost @var{NUM_OF_SLOTS} values from @var{SRC_ARRY} and store them in the
leftmost @var{NUM_OF_SLOTS} of @var{DST_ARRY}.

@example
mbfl_declare_index_array_varref(ARRY, (a b c d e f g h i))
mbfl_declare_index_array_varref(L_RESULT)
mbfl_declare_index_array_varref(R_RESULT)

mbfl_array_left_take  _(L_RESULT) _(ARRY) 3
mbfl_array_right_take _(R_RESULT) _(ARRY) 3

mbfl_slots_qvalues(L_RESULT)    @result{} a b c
mbfl_slots_qvalues(R_RESULT)    @result{} g h i
@end example
@end defun


@defun mbfl_array_left_drop @var{DST_ARRY} @var{SRC_ARRY} @var{NUM_OF_SLOTS}
@defunx mbfl_array_right_drop @var{DST_ARRY} @var{SRC_ARRY} @var{NUM_OF_SLOTS}
Drop the leftmost or rightmost @var{NUM_OF_SLOTS} values from @var{SRC_ARRY} and store the remaining
values in the leftmost @var{NUM_OF_SLOTS} of @var{DST_ARRY}.

@example
mbfl_declare_index_array_varref(ARRY, (a b c d e f g h i))
mbfl_declare_index_array_varref(L_RESULT)
mbfl_declare_index_array_varref(R_RESULT)

mbfl_array_left_drop  _(L_RESULT) _(ARRY) 3
mbfl_array_right_drop _(R_RESULT) _(ARRY) 3

mbfl_slots_qvalues(L_RESULT)    @result{} d e f g h i
mbfl_slots_qvalues(R_RESULT)    @result{} a b c d e f
@end example
@end defun


@defun mbfl_array_split_at @var{PREFIX_ARRY} @var{SUFFIX_ARRY} @var{ARRY} @var{IDX}
Copy values from @var{ARRY} to @var{PREFIX_ARRY} and @var{SUFFIX_ARRY}:

@itemize
@item
values from the range @samp{0} included, @var{IDX} excluded are copied to @var{PREFIX_ARRY};

@item
values from the range @samp{IDX} included, end are copied to @var{SUFFIX_ARRY}.
@end itemize

@example
mbfl_declare_index_array_varref(ARRY, (a b c d e f g h i))
mbfl_declare_index_array_varref(PREFIX)
mbfl_declare_index_array_varref(SUFFIX)

mbfl_array_split_at _(PREFIX) _(SUFFIX) _(ARRY) 4

mbfl_slots_qvalues(PREFIX)      @result{} a b c d
mbfl_slots_qvalues(SUFFIX)      @result{} e f g h i
@end example
@end defun

@c page
@node containers arrays compar
@appendixsubsec Comparing values


@menu
* containers arrays compar two::        Comparing two arrays.
* containers arrays compar multi::      Comparing multiple arrays.
* containers arrays compar misc::       Miscellaneous comparison functions.
@end menu

@c page
@node containers arrays compar two
@appendixsubsubsec Comparing two arrays


@ParameterSemanticsARRY{}
@ParameterSemanticsARRYS{}
@ParameterSemanticsISEQUAL{}
@ParameterSemanticsISLESS{}


@defun mbfl_array_equal @vari{ARRY} @vari{ARRY}
@defunx mbfl_array_equal @vari{ARRY} @vari{ARRY} @var{ISEQUAL}
Compare the arrays and return true if the elements are equal, slot by slot, according to
@var{ISEQUAL}; otherwise return false.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c))
mbfl_declare_index_array_varref(ARRY2, (8 9 0))

mbfl_array_equal _(ARRY1) _(ARRY1)
@result{} 0

mbfl_array_equal _(ARRY1) _(ARRY2)
@result{} 1
@end example
@end defun


@defun mbfl_array_less @vari{ARRY} @varii{ARRY}
@defunx mbfl_array_less @vari{ARRY} @varii{ARRY} @var{ISEQUAL} @var{ISLESS}
Compare @vari{ARRY} and @varii{ARRY}, slot by slot, left to right, and return true if @vari{ARRY} is
less than @varii{ARRY} lexicographically; otherwise return false.  Values are compared with
@var{ISEQUAL} and @var{ISLESS}.  It does not matter if @vari{ARRY} and @varii{ARRY} have the same
length or not.

@example
mbfl_declare_index_array_varref(ARRY1, (a b C d e))
mbfl_declare_index_array_varref(ARRY2, (a b c d e))

mbfl_array_less _(ARRY1) _(ARRY1)       @result{} 1
mbfl_array_less _(ARRY1) _(ARRY2)       @result{} 0
mbfl_array_less _(ARRY2) _(ARRY1)       @result{} 1
@end example
@end defun


@defun mbfl_array_greater @vari{ARRY} @varii{ARRY}
@defunx mbfl_array_greater @vari{ARRY} @varii{ARRY} @var{ISEQUAL} @var{ISLESS}
Compare @vari{ARRY} and @varii{ARRY}, slot by slot, left to right, and return true if @vari{ARRY} is
greater than @varii{ARRY} lexicographically; otherwise return false.  Values are compared with
@var{ISEQUAL} and @var{ISLESS}.  It does not matter if @vari{ARRY} and @varii{ARRY} have the same
length or not.

@example
mbfl_declare_index_array_varref(ARRY1, (a b C d e))
mbfl_declare_index_array_varref(ARRY2, (a b c d e))

mbfl_array_greater _(ARRY1) _(ARRY1)    @result{} 1
mbfl_array_greater _(ARRY1) _(ARRY2)    @result{} 1
mbfl_array_greater _(ARRY2) _(ARRY1)    @result{} 0
@end example
@end defun


@defun mbfl_array_leq @vari{ARRY} @varii{ARRY}
@defunx mbfl_array_leq @vari{ARRY} @varii{ARRY} @var{ISEQUAL} @var{ISLESS}
Compare @vari{ARRY} and @varii{ARRY}, slot by slot, left to right, and return true if @vari{ARRY} is
less than or equal to @varii{ARRY} lexicographically; otherwise return false.  Values are compared
with @var{ISEQUAL} and @var{ISLESS}.  It does not matter if @vari{ARRY} and @varii{ARRY} have the
same length or not.

@example
mbfl_declare_index_array_varref(ARRY1, (a b C d e))
mbfl_declare_index_array_varref(ARRY2, (a b c d e))

mbfl_array_leq _(ARRY1) _(ARRY1)        @result{} 0
mbfl_array_leq _(ARRY1) _(ARRY2)        @result{} 0
mbfl_array_leq _(ARRY2) _(ARRY1)        @result{} 1
@end example
@end defun


@defun mbfl_array_geq @vari{ARRY} @varii{ARRY}
@defunx mbfl_array_geq @vari{ARRY} @varii{ARRY} @var{ISEQUAL} @var{ISLESS}
Compare @vari{ARRY} and @varii{ARRY}, slot by slot, left to right, and return true if @vari{ARRY} is
greater than or equal to @varii{ARRY} lexicographically; otherwise return false.  Values are
compared with @var{ISEQUAL} and @var{ISLESS}.  It does not matter if @vari{ARRY} and @varii{ARRY}
have the same length or not.

@example
mbfl_declare_index_array_varref(ARRY1, (a b C d e))
mbfl_declare_index_array_varref(ARRY2, (a b c d e))

mbfl_array_geq _(ARRY1) _(ARRY1)        @result{} 0
mbfl_array_geq _(ARRY1) _(ARRY2)        @result{} 1
mbfl_array_geq _(ARRY2) _(ARRY1)        @result{} 0
@end example
@end defun


@defun mbfl_array_equal_prefix_length_var @var{LEN_RV} @vari{ARRY} @varii{ARRY}
@defunx mbfl_array_equal_prefix_length_var @var{LEN_RV} @vari{ARRY} @varii{ARRY} @var{ISEQUAL}
Compare @vari{ARRY} and @varii{ARRY}, slot by slot, left to right, and store in the result variable
@var{LEN_RV} the length of the prefix they have in common.  Values are compared with @var{ISEQUAL}.
It does not matter if @vari{ARRY} and @varii{ARRY} have the same length or not.

@example
mbfl_declare_index_array_varref(ARRY1, (a b 9 d e f g h i))
mbfl_declare_index_array_varref(ARRY2, (a b c d e))
mbfl_declare_varref(LEN)

mbfl_array_equal_prefix_length_var _(LEN) _(ARRY1) _(ARRY2)
$LEN    @result{} 2
@end example
@end defun


@defun mbfl_array_equal_suffix_length_var @var{LEN_RV} @vari{ARRY} @varii{ARRY}
@defunx mbfl_array_equal_suffix_length_var @var{LEN_RV} @vari{ARRY} @varii{ARRY} @var{ISEQUAL}
Compare @vari{ARRY} and @varii{ARRY}, slot by slot, right to left, and store in the result variable
@var{LEN_RV} the length of the suffix they have in common.  Values are compared with @var{ISEQUAL}.
It does not matter if @vari{ARRY} and @varii{ARRY} have the same length or not.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d e f g h i))
mbfl_declare_index_array_varref(ARRY2,         (e 9 g h i))
mbfl_declare_varref(LEN)

mbfl_array_equal_suffix_length_var _(LEN) _(ARRY1) _(ARRY2)
$LEN    @result{} 3
@end example
@end defun

@c page
@node containers arrays compar multi
@appendixsubsubsec Comparing multiple arrays


@ParameterSemanticsARRY{}
@ParameterSemanticsARRYS{}
@ParameterSemanticsISEQUAL{}
@ParameterSemanticsISLESS{}


@defun mbfl_multi_array_equal @var{ARRYS}
@defunx mbfl_multi_array_equal @var{ARRYS} @var{ISEQUAL}
Compare the index arrays in @var{ARRYS}, slot by slot, and return true if the values are equal
according to @var{ISEQUAL}; otherwise return false.

If @var{ARRYS} is empty: return true.  If @var{ARRYS} contains a single array: return true.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d e))
mbfl_declare_index_array_varref(ARRY2, (a b c d e))
mbfl_declare_index_array_varref(ARRY3, (a b c d e))
mbfl_declare_index_array_varref(ARRYS, (_(ARRY1) _(ARRY2) _(ARRY3)))

mbfl_multi_array_equal _(ARRYS)         @result{} 0
@end example
@end defun


@defun mbfl_multi_array_less @var{ARRYS}
@defunx mbfl_multi_array_less @var{ARRYS} @var{ISEQUAL} @var{ISLESS}
Compare the index arrays in @var{ARRYS}, slot by slot, left to right, and return true if the arrays
are sorted in strictly monotonic increasing lexicographic order according to @var{ISEQUAL} and
@var{isless}; otherwise return false.

If @var{ARRYS} is empty: return true.  If @var{ARRYS} contains a single array: return true.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c))
mbfl_declare_index_array_varref(ARRY2, (a b c d))
mbfl_declare_index_array_varref(ARRY3, (a b c d e))
mbfl_declare_index_array_varref(ARRYS, (_(ARRY1) _(ARRY2) _(ARRY3)))

mbfl_multi_array_less _(ARRYS)         @result{} 0
@end example
@end defun


@defun mbfl_multi_array_greater @var{ARRYS}
@defunx mbfl_multi_array_greater @var{ARRYS} @var{ISEQUAL} @var{ISLESS}
Compare the index arrays in @var{ARRYS}, slot by slot, left to right, and return true if the arrays
are sorted in strictly monotonic decreasing lexicographic order according to @var{ISEQUAL} and
@var{isless}; otherwise return false.

If @var{ARRYS} is empty: return true.  If @var{ARRYS} contains a single array: return true.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d e))
mbfl_declare_index_array_varref(ARRY2, (a b c d))
mbfl_declare_index_array_varref(ARRY3, (a b c))
mbfl_declare_index_array_varref(ARRYS, (_(ARRY1) _(ARRY2) _(ARRY3)))

mbfl_multi_array_greater _(ARRYS)       @result{} 0
@end example
@end defun


@defun mbfl_multi_array_leq @var{ARRYS}
@defunx mbfl_multi_array_leq @var{ARRYS} @var{ISEQUAL} @var{ISLESS}
Compare the index arrays in @var{ARRYS}, slot by slot, left to right, and return true if the arrays
are sorted in non--strict monotonic increasing lexicographic order according to @var{ISEQUAL} and
@var{isless}; otherwise return false.

If @var{ARRYS} is empty: return true.  If @var{ARRYS} contains a single array: return true.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c))
mbfl_declare_index_array_varref(ARRY2, (a b c d))
mbfl_declare_index_array_varref(ARRY3, (a b c d))
mbfl_declare_index_array_varref(ARRY4, (a b c d e))
mbfl_declare_index_array_varref(ARRYS, (_(ARRY1) _(ARRY2) _(ARRY3) _(ARRY4)))

mbfl_multi_array_leq _(ARRYS)           @result{} 0
@end example
@end defun


@defun mbfl_multi_array_geq @var{ARRYS}
@defunx mbfl_multi_array_geq @var{ARRYS} @var{ISEQUAL} @var{ISLESS}
Compare the index arrays in @var{ARRYS}, slot by slot, left to right, and return true if the arrays
are sorted in non--strict monotonic decreasing lexicographic order according to @var{ISEQUAL} and
@var{isless}; otherwise return false.

If @var{ARRYS} is empty: return true.  If @var{ARRYS} contains a single array: return true.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d e))
mbfl_declare_index_array_varref(ARRY2, (a b c d))
mbfl_declare_index_array_varref(ARRY3, (a b c d))
mbfl_declare_index_array_varref(ARRY4, (a b c))
mbfl_declare_index_array_varref(ARRYS, (_(ARRY1) _(ARRY2) _(ARRY3) _(ARRY4)))

mbfl_multi_array_geq _(ARRYS)           @result{} 0
@end example
@end defun

@c ------------------------------------------------------------------------

@defun mbfl_multi_array_equal_prefix_length_var @var{LEN_RV} @var{ARRYS}
@defunx mbfl_multi_array_equal_prefix_length_var @var{LEN_RV} @var{ARRYS} @var{ISEQUAL}
Store in the result variable @var{LEN_RV} the length of the common prefix of all the arrays in
@var{ARRYS}.  Values comparison is performed with @var{ISEQUAL}.

If @var{ARRYS} is empty: the length is zero.  If @var{ARRYS} contains a single array: the length is
the size of the array.  If @var{ARRYS} contains only empty arrays: the length is zero.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c))
mbfl_declare_index_array_varref(ARRY2, (a b))
mbfl_declare_index_array_varref(ARRY3, (a b c d))
mbfl_declare_index_array_varref(ARRYS, (_(ARRY1) _(ARRY2) _(ARRY3)))

mbfl_declare_integer_varref(LEN)

mbfl_multi_array_equal_prefix_length_var _(LEN) _(ARRYS)
$LEN    @result{} 2
@end example
@end defun


@defun mbfl_multi_array_equal_suffix_length_var @var{LEN_RV} @var{ARRYS}
@defunx mbfl_multi_array_equal_suffix_length_var @var{LEN_RV} @var{ARRYS} @var{ISEQUAL}
Store in the result variable @var{LEN_RV} the length of the common suffix of all the arrays in
@var{ARRYS}.  Values comparison is performed with @var{ISEQUAL}.

If @var{ARRYS} is empty: the length is zero.  If @var{ARRYS} contains a single array: the length is
the size of the array.  If @var{ARRYS} contains only empty arrays: the length is zero.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d e f))
mbfl_declare_index_array_varref(ARRY2,       (d e f))
mbfl_declare_index_array_varref(ARRY3,     (c d e f))
mbfl_declare_index_array_varref(ARRYS, (_(ARRY1) _(ARRY2) _(ARRY3)))

mbfl_declare_integer_varref(LEN)

mbfl_multi_array_equal_suffix_length_var _(LEN) _(ARRYS)
$LEN    @result{} 3
@end example
@end defun

@c page
@node containers arrays compar misc
@appendixsubsubsec Miscellaneous comparison functions


@ParameterSemanticsISEQUAL{}


@defun mbfl_array_equal_values @var{ARRY}
@defunx mbfl_array_equal_values @var{ARRY} @var{ISEQUAL}
Return true if all the values in @var{ARRY} are equal according to the comparison operator
@var{ISEQUAL}; otherwise return false.

@example
mbfl_declare_index_array_varref(ARRY, (0 0 0 0 0 0))

mbfl_array_equal_values _(ARRY)         @result{} 0
@end example
@end defun

@c page
@node containers arrays insert
@appendixsubsec Inserting values


@cindex Inserting values into an index array
@cindex Index arrays, inserting values
@cindex Arrays, inserting values


@ParameterSemanticsARRY{}


@defun mbfl_array_insert_slot_bang @var{ARRY} @var{IDX}
Open a slot in @var{ARRY} at @var{IDX} by shifting values to the right; this function mutates
@var{ARRY} itself.

@example
@{
  mbfl_declare_index_array_varref(ARRY, (a b c d e f g h i))

  mbfl_array_insert_slot_bang _(ARRY) 3
  mbfl_slot_set(ARRY, 3, 99)
  mbfl_slots_qvalues(ARRY)
@} @result{} a b c 99 d e f g h i

@{
  mbfl_declare_index_array_varref(ARRY, (a b c))

  mbfl_array_insert_slot_bang _(ARRY) 3
  mbfl_slot_set(ARRY, 3, 99)
  mbfl_slots_qvalues(ARRY)
@} @result{} a b c 99

@{
  mbfl_declare_index_array_varref(ARRY)

  mbfl_array_insert_slot_bang _(ARRY) 0
  mbfl_slot_set(ARRY, 0, 99)
  mbfl_slots_qvalues(ARRY)
@} @result{} 99
@end example
@end defun


@defun mbfl_array_insert_value_bang @var{ARRY} @var{IDX} @var{VALUE}
Open a slot in @var{ARRY} at @var{IDX} by shifting values to the right, then store @var{VALUE} in
the slot; this function mutates @var{ARRY} itself.

@example
@{
  mbfl_declare_index_array_varref(ARRY, (a b c d e f g h i))

  mbfl_array_insert_value_bang _(ARRY) 3 99
  mbfl_slots_qvalues(ARRY)
@} @result{} a b c 99 d e f g h i

@{
  mbfl_declare_index_array_varref(ARRY, (a b c))

  mbfl_array_insert_value_bang _(ARRY) 3 99
  mbfl_slots_qvalues(ARRY)
@} @result{} a b c 99

@{
  mbfl_declare_index_array_varref(ARRY)

  mbfl_array_insert_value_bang _(ARRY) 0 99
  mbfl_slots_qvalues(ARRY)
@} @result{} 99
@end example
@end defun


@defun mbfl_array_insert_multi_slot_bang @var{ARRY} @var{IDX} @var{NUM}
Open @var{NUM} slots in @var{ARRY} at @var{IDX} by shifting the values to the right; this function
mutates @var{ARRY} itself.

@example
mbfl_declare_index_array_varref(ARRY, (a b c d e f g h i))

mbfl_array_insert_multi_slot_bang _(ARRY) 3 4
mbfl_slot_set(ARRY, 3, 90)
mbfl_slot_set(ARRY, 4, 91)
mbfl_slot_set(ARRY, 5, 92)
mbfl_slot_set(ARRY, 6, 93)
mbfl_slots_qvalues(ARRY)        @result{} a b c 90 91 92 93 d e f g h i
@end example
@end defun


@defun mbfl_array_insert_multi_value_bang @vari{ARRY} @var{IDX} @varii{arry}
Open slots in @vari{ARRY} at @var{IDX} by shifting values to the right then insert in this range the
values from @varii{ARRY}; this function mutates @vari{ARRY} itself.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d e f g h i))
mbfl_declare_index_array_varref(ARRY2, (90 91 92 93))

mbfl_array_insert_multi_slot_bang _(ARRY1) 3 _(ARRY2)
mbfl_slots_qvalues(ARRY1)       @result{} a b c 90 91 92 93 d e f g h i
@end example
@end defun

@c page
@node containers arrays search
@appendixsubsec Searching values


@ParameterSemanticsARRY{}
@ParameterSemanticsISEQUAL{}
@ParameterSemanticsPRED{}


@defun mbfl_array_find_left_slot_containing_value_var @var{IDX_RV} @var{ARRY} @var{VALUE}
@defunx mbfl_array_find_left_slot_containing_value_var @var{IDX_RV} @var{ARRY} @var{VALUE} @var{ISEQUAL}
@defunx mbfl_array_find_right_slot_containing_value_var @var{IDX_RV} @var{ARRY} @var{VALUE}
@defunx mbfl_array_find_right_slot_containing_value_var @var{IDX_RV} @var{ARRY} @var{VALUE} @var{ISEQUAL}
Search @var{ARRY} for the leftmost/rightmost slot containing a value equal to @var{VALUE} according
to @var{ISEQUAL}.  When found: store slot's index in @var{IDX_RV} and return true; otherwise return
false.

@example
#                                      0 1 2  3 4 5 6  7 8 9
mbfl_declare_index_array_varref(ARRY, (a b c 99 d e f 99 g h))
mbfl_declare_integer_varref(IDX)

mbfl_array_find_left_slot_containing_value_var  _(IDX) _(ARRY) 99  @result{} 0
$IDX    @result{} 3

mbfl_array_find_right_slot_containing_value_var _(IDX) _(ARRY) 99  @result{} 0
$IDX    @result{} 7
@end example
@end defun


@defun mbfl_array_find_left_slot_containing_value @var{ARRY} @var{VALUE}
@defunx mbfl_array_find_left_slot_containing_value @var{ARRY} @var{VALUE} @var{ISEQUAL}
@defunx mbfl_array_find_right_slot_containing_value @var{ARRY} @var{VALUE}
@defunx mbfl_array_find_right_slot_containing_value @var{ARRY} @var{VALUE} @var{ISEQUAL}
Like the functions above, but do not retrieve slot's index.
@end defun


@defun mbfl_array_find_left_slot_satisfying_pred_var @var{IDX_RV} @var{ARRY} @var{PRED}
@defunx mbfl_array_find_right_slot_satisfying_pred_var @var{IDX_RV} @var{ARRY} @var{PRED}
Search @var{ARRY} for the leftmost/rightmost slot containing a value satisfying @var{PRED}.  When
found: store slot's index in @var{IDX_RV} and return true; otherwise return false.

@example
function pred () @{
    mbfl_mandatory_parameter(VALUE, 1, value)
    mbfl_string_equal "$VALUE" '99'
@}

#                                      0 1 2  3 4 5 6  7 8 9
mbfl_declare_index_array_varref(ARRY, (a b c 99 d e f 99 g h))
mbfl_declare_integer_varref(IDX)

mbfl_array_find_left_slot_satisfying_pred_var  _(IDX) _(ARRY) pred   @result{} 0
$IDX    @result{} 3

mbfl_array_find_right_slot_satisfying_pred_var _(IDX) _(ARRY) pred   @result{} 0
$IDX    @result{} 7
@end example
@end defun


@defun mbfl_array_find_left_slot_satisfying_pred @var{ARRY} @var{VALUE} @var{PRED}
@defunx mbfl_array_find_right_slot_satisfying_pred @var{ARRY} @var{VALUE} @var{PRED}
Like the functions above, but do not retrieve slot's index.
@end defun

@c page
@node containers arrays filter
@appendixsubsec Filter values


@ParameterSemanticsARRY{}
@ParameterSemanticsPRED{}
@ParameterSemanticsISEQUAL{}


@defun mbfl_array_filter @var{DST_ARRY} @var{PRED} @var{SRC_ARRY}
Copy values from @var{SRC_ARRY} to @var{DST_ARRY} including only those satisfying @var{PRED}.

@example
function pred () @{
    mbfl_mandatory_parameter(X, 1, value)
    mbfl_declare_varref(Y)

    mbfl_math_expr_var _(Y) "$X % 2"
    if (( 0 == Y ))
    then return_success
    else return_failure
    fi
@}

mbfl_declare_index_array_varref(ARRY, (0 1 2 3 4 5 6 7 8 9))
mbfl_declare_index_array_varref(RESULT)

mbfl_array_filter _(RESULT) 'pred' _(ARRY)
mbfl_slots_qvalues(RESULT)      @result{} 0 2 4 6 8
@end example
@end defun


@defun mbfl_array_partition @var{GOOD_ARRY} @var{BAD_ARRY} @var{PRED} @var{SRC_ARRY}
Copy values from @var{SRC_ARRY} to @var{GOOD_ARRY} and @var{BAD_ARRY}; those satisfying @var{PRED}
go into @var{GOOD_ARRY}, the others go into @var{BAD_ARRY}.

@example
function pred () @{
    mbfl_mandatory_parameter(X, 1, value)
    mbfl_declare_varref(Y)

    mbfl_math_expr_var _(Y) "$X % 2"
    if (( 0 == Y ))
    then return_success
    else return_failure
    fi
@}

mbfl_declare_index_array_varref(ARRY, (0 1 2 3 4 5 6 7 8 9))
mbfl_declare_index_array_varref(GOOD_ARRY)
mbfl_declare_index_array_varref(BAD_ARRY)

mbfl_array_partition _(GOOD_ARRY) _(BAD_ARRY) 'pred' _(ARRY)
mbfl_slots_qvalues(GOOD_ARRY)   @result{} 0 2 4 6 8
mbfl_slots_qvalues(BAD_ARRY)    @result{} 1 3 5 7 9
@end example
@end defun

@c page
@node containers arrays delete
@appendixsubsec Removing and deleting values


@ParameterSemanticsARRY{}
@ParameterSemanticsISEQUAL{}


@defun mbfl_array_remove @var{DST_ARRY} @var{SRC_ARRY} @var{IDX}
Copy values from @var{SRC_ARRY} to @var{DST_ARRY} skipping the value at index @var{IDX}.

@example
mbfl_declare_index_array_varref(ARRY, (a b c D e f g h i))
mbfl_declare_index_array_varref(RESULT)

mbfl_array_remove _(RESULT) _(ARRY) 3

mbfl_slots_qvalues(RESULT)      @result{} a b c e f g h i
@end example
@end defun


@defun mbfl_array_delete @var{DST_ARRY} @var{SRC_ARRY} @var{VALUE}
@defunx mbfl_array_delete @var{DST_ARRY} @var{SRC_ARRY} @var{VALUE} @var{ISEQUAL}
Copy values from @var{SRC_ARRY} to @var{DST_ARRY} skipping the values equal to @var{VALUE} according
to @var{ISEQUAL}.

@example
mbfl_declare_index_array_varref(ARRY, (a b D c D e D f D g D h i))
mbfl_declare_index_array_varref(RESULT)

mbfl_array_delete _(RESULT) _(ARRY) D

mbfl_slots_qvalues(RESULT)      @result{} a b c e f g h i
@end example
@end defun


@defun mbfl_array_delete_duplicates @var{DST_ARRY} @var{SRC_ARRY}
@defunx mbfl_array_delete_duplicates @var{DST_ARRY} @var{SRC_ARRY} @var{ISEQUAL}
Copy values from @var{SRC_ARRY} to @var{DST_ARRY} skipping all the duplicate values according to
@var{ISEQUAL}.  If a value is present multiple times: its leftmost occurrence is stored in
@var{DST_ARRY}, while all the others are discarded; this way the original unique--values
left--to--right order is preserved.

@example
mbfl_declare_index_array_varref(ARRY, (a b c D e D f D g D h i))
mbfl_declare_index_array_varref(RESULT)

mbfl_array_delete_duplicates _(RESULT) _(ARRY)

mbfl_slots_qvalues(RESULT)      @result{} a b c D e f g h i
@end example
@end defun

@c page
@node containers arrays fold
@appendixsubsec Folding values in indexed arrays


@SemanticsFoldIteration{}
@SemanticsMultiIteration{}
@SemanticsLeftIteration{}
@SemanticsRightIteration{}

@ParameterSemanticsOPERATOR{}
@ParameterSemanticsARRY{}
@ParameterSemanticsARRYS{}


@defun mbfl_array_left_fold @var{ACCUM} @var{OPERATOR} @var{ARRY}
@defunx mbfl_array_right_fold @var{ACCUM} @var{OPERATOR} @var{ARRY}
Iterate over @var{ARRY} and apply @var{OPERATOR} to @var{ACCUM} and a value from @var{ARRY}.
@var{OPERATOR} is used in a command line as follows:

@example
@var{OPERATOR} @var{ACCUM} @var{VALUE}
@end example

@noindent
@var{ACCUM} might be a data variable in which case @var{OPERATOR} might store a result in it.

@example
function operator () @{
    mbfl_mandatory_nameref_parameter(ACCUM, 1, accumulator)
    mbfl_mandatory_parameter(VALUE,         2, value from arry)
    ACCUM+=$VALUE
@}

mbfl_declare_index_array_varref(ARRY, (a b c d e))
mbfl_declare_varref(LACCUM, '0')
mbfl_declare_varref(RACCUM, '0')

mbfl_array_left_fold  _(LACCUM) operator _(ARRY)
"$LACCUM"  @result{} 0abcde

mbfl_array_right_fold _(RACCUM) operator _(ARRY)
"$RACCUM"  @result{} 0edcba
@end example
@end defun

@c ------------------------------------------------------------------------

@defun mbfl_multi_array_left_fold @var{ACCUM} @var{OPERATOR} @var{ARRYS}
@defunx mbfl_multi_array_right_fold @var{ACCUM} @var{OPERATOR} @var{ARRYS}
Iterate over @var{ARRYS} and apply @var{OPERATOR} to @var{ACCUM} and a tuple of values in homologous
slots from @var{ARRY}.  @var{OPERATOR} is used in a command line as follows:

@example
@var{OPERATOR} @var{ACCUM} @var{VALUES}
@end example

@noindent
@var{ACCUM} might be a data variable in which case @var{OPERATOR} might store a result in it;
@var{VALUES} is an index array holding @var{ARRYS}'s homologous slots' values.

@example
function operator () @{
    mbfl_mandatory_nameref_parameter(ACCUM,  1, accumulator)
    mbfl_mandatory_nameref_parameter(VALUES, 2, values from arrys)
    declare -i I
    declare STR

    for ((I=0; I < mbfl_slots_number(VALUES); ++I))
    do STR+=mbfl_slot_qref(VALUES, $I)
    done
    ACCUM+=" $STR"
@}

mbfl_declare_index_array_varref(ARRY1, (a b c d e))
mbfl_declare_index_array_varref(ARRY2, (A B C D E))
mbfl_declare_index_array_varref(ARRY3, (q w e r t))
mbfl_declare_index_array_varref(ARRYS, (_(ARRY1) _(ARRY2) _(ARRY3)))

mbfl_declare_varref(L_ACCUM, '0')
mbfl_declare_varref(R_ACCUM, '0')

mbfl_multi_array_left_fold  _(L_ACCUM) 'operator' _(ARRYS)
mbfl_multi_array_right_fold _(R_ACCUM) 'operator' _(ARRYS)

"$L_ACCUM"      @result{} '0 aAq bBw cCe dDr eEt'
"$R_ACCUM"      @result{} '0 eEt dDr cCe bBw aAq'
@end example
@end defun

@c page
@node containers arrays foreach
@appendixsubsec Iterating over values in indexed arrays


@SemanticsForeachIteration{}
@SemanticsMultiIteration{}
@SemanticsLeftIteration{}
@SemanticsRightIteration{}

@ParameterSemanticsOPERATOR{}
@ParameterSemanticsARRY{}
@ParameterSemanticsARRYS{}


@defun mbfl_array_left_foreach @var{OPERATOR} @var{ARRY}
@defunx mbfl_array_right_foreach @var{OPERATOR} @var{ARRY}
Apply @var{OPERATOR} to all the values from @var{ARRY} for the purpose of generating some side
effects.  @var{OPERATOR} is used in a command line as follows:

@example
@var{OPERATOR} @var{VALUE}
@end example

@noindent
where @var{VALUE} is a value from the array.

@example
mbfl_declare_index_array_varref(ARRY, (a b c))

mbfl_array_left_foreach echo _(ARRY)
@print{} a
@print{} b
@print{} c
@end example
@end defun

@c ------------------------------------------------------------------------

@defun mbfl_array_multi_left_foreach @var{OPERATOR} @var{ARRYS}
@defunx mbfl_array_multi_right_foreach @var{OPERATOR} @var{ARRYS}
Apply the @var{OPERATOR} to every tuple of values in homologous slots from @var{ARRYS} for the
purpose of generating some side effect.  @var{OPERATOR} is used in a command line as follows:

@example
@var{OPERATOR} @var{HOMOLOGOUS_VALUES}
@end example

@noindent
where @var{HOMOLOGOUS_VALUES} is an indexed array containing values from the homologous slots of
@var{ARRYS}.

@example
function OPERATOR () @{
    mbfl_mandatory_nameref_parameter(ITEMS, 1, reference to index array of homologous values)
    declare -i I VALUE=0

    for ((I=0; I < mbfl_slots_number(ITEMS); ++I))
    do let VALUE+=mbfl_slot_ref(ITEMS, $I)
    done
    echo "$VALUE"
@}

mbfl_declare_index_array_varref(ARRY1, (1   2   3   4))
mbfl_declare_index_array_varref(ARRY2, (10  20  30  40))
mbfl_declare_index_array_varref(ARRY3, (100 200 300 400))
mbfl_declare_index_array_varref(ARRYS, (_(ARRY1) _(ARRY2) _(ARRY3)))

mbfl_array_multi_left_foreach OPERATOR _(ARRYS)
@print{} 111
@print{} 222
@print{} 333
@print{} 444
@end example
@end defun

@c page
@node containers arrays map
@appendixsubsec Mapping values in indexed arrays


@SemanticsMapIteration{}
@SemanticsMultiIteration{}
@SemanticsLeftIteration{}
@SemanticsRightIteration{}

@ParameterSemanticsOPERATOR{}
@ParameterSemanticsARRY{}
@ParameterSemanticsARRYS{}


@defun mbfl_array_left_map @var{DST_ARRY} @var{OPERATOR} @var{SRC_ARRY}
@defunx mbfl_array_right_map @var{DST_ARRY} @var{OPERATOR} @var{SRC_ARRY}
Apply @var{OPERATOR} to all the values from @var{SRC_ARRY} for the purpose of generating a value to
be stored in the homologous slot of @var{DST_ARRY}.  @var{OPERATOR} is used in a command line as
follows:

@example
@var{OPERATOR} @var{RV} @var{VALUE}
@end example

@noindent
where: @var{VALUE} is a value from @var{ARRY}; @var{RV} is the variable in which to store the result
of @var{OPERATOR}'s application.  The function @func{mbfl_string_toupper_var} is a valid example of
@var{OPERATOR}.

@example
mbfl_declare_index_array_varref(DST)
mbfl_declare_index_array_varref(SRC, (a b c))

mbfl_array_left_map mbfl_string_toupper_var _(DST) _(SRC)

mbfl_slots_qvalues(DST) @result{} A B C
@end example
@end defun


@defun mbfl_multi_array_left_map @var{DST_ARRY} @var{OPERATOR} @var{SRC_ARRYS}
@defunx mbfl_multi_array_right_map @var{DST_ARRY} @var{OPERATOR} @var{SRC_ARRYS}
Apply the @var{OPERATOR} to every tuple of values in homologous slots from @var{SRC_ARRYS} for the
purpose of generating result values that are stored in the homologous slot of @var{DST_ARRY}.
@var{OPERATOR} is used in a command line as follows:

@example
@var{OPERATOR} @var{RV} @var{VALUES}
@end example

@noindent
where: @var{VALUES} is an index array holding the homologous values from @var{SRC_ARRYS}; @var{RV}
is the variable in which to store the result of @var{OPERATOR}'s application.

@example
function operator () @{
    mbfl_mandatory_nameref_parameter(RV,     1, reference to result variable)
    mbfl_mandatory_nameref_parameter(VALUES, 2, reference to index array of values)
    declare -i I VALUE=0

    for ((I=0; I < mbfl_slots_number(VALUES); ++I))
    do let VALUE+=mbfl_slot_qref(VALUES, $I)
    done
    RV+=$VALUE
@}

mbfl_declare_index_array_varref(ARRY1, (1   2   3   4))
mbfl_declare_index_array_varref(ARRY2, (10  20  30  40))
mbfl_declare_index_array_varref(ARRY3, (100 200 300 400))
mbfl_declare_index_array_varref(ARRYS, (_(ARRY1) _(ARRY2) _(ARRY3)))

mbfl_multi_array_left_map  _(L_RESULT) 'operator' _(ARRYS)
mbfl_multi_array_right_map _(R_RESULT) 'operator' _(ARRYS)

mbfl_slots_qvalues(L_RESULT)    @result{} 111 222 333 444
mbfl_slots_qvalues(R_RESULT)    @result{} 111 222 333 444
@end example
@end defun

@c page
@node containers arrays copy
@appendixsubsec Copying values


@ParameterSemanticsARRY{}


@defun mbfl_array_range_copy @var{DST_ARRY} @var{DST_IDX} @var{SRC_ARRY} @var{SRC_IDX} @var{NUMBER_OF_SLOTS}
Copy @var{NUMBER_OF_SLOTS} slots from @var{SRC_ARRY} starting at @var{SRC_IDX} to @var{DST_ARRY}
starting at @var{DST_IDX}.

@example
mbfl_declare_index_array_varref(DST, (. . . .))
mbfl_declare_index_array_varref(SRC, (a b c d))
#                                     0 1 2 3

mbfl_array_range_copy _(DST) 1 _(SRC) 2 2

mbfl_slots_qvalues(DST) @result{} . c d .
@end example
@end defun

@c page
@node containers arrays append
@appendixsubsec Appending values to arrays


@ParameterSemanticsARRY{}
@ParameterSemanticsARRYS{}


@defun mbfl_array_append @var{DST_ARRY} @var{SRC_ARRY}
Append the values from @var{SRC_ARRY} to @var{DST_ARRY}.

@example
mbfl_declare_index_array_varref(DST_ARRY, (a b c d e))
mbfl_declare_index_array_varref(SRC_ARRY, (A B C D E))

mbfl_array_append _(DST_ARRY) _(SRC_ARRY)
mbfl_slots_qvalues(DST_ARRY)    @result{} a b c d e A B C D E
@end example
@end defun


@defun mbfl_multi_array_append @var{DST_ARRY} @var{SRC_ARRYS}
Append the values from @var{SRC_ARRYS} to @var{DST_ARRY}.  The indexed arrays in @var{SRC_ARRYS} can
be of any size.

@example
mbfl_declare_index_array_varref(DST_ARRY,  (a b c d e))
mbfl_declare_index_array_varref(SRC_ARRY1, (A B C))
mbfl_declare_index_array_varref(SRC_ARRY2, (D E))
mbfl_declare_index_array_varref(SRC_ARRY3, (F G H I))
mbfl_declare_index_array_varref(SRC_ARRYS, (_(SRC_ARRY1) _(SRC_ARRY2) _(SRC_ARRY3)))

mbfl_multi_array_append _(DST_ARRY) _(SRC_ARRYS)
mbfl_slots_qvalues(DST_ARRY)    @result{} a b c d e A B C D E F G H I
@end example
@end defun

@c page
@node containers arrays sorting
@appendixsubsec Sorting values into arrays


@ParameterSemanticsARRY{}
@ParameterSemanticsISEQUAL{}
@ParameterSemanticsISLESS{}


@defun mbfl_array_is_sorted @var{ARRY}
@defunx mbfl_array_is_sorted @var{ARRY} @var{ISLESS}
@defunx mbfl_array_is_sorted_less @var{ARRY}
@defunx mbfl_array_is_sorted_less @var{ARRY} @var{ISLESS}
Return true if the values in @var{ARRY} are sorted left--to--right in strict increasing order
according to @var{ISLESS}; otherwise return false.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d))
mbfl_declare_index_array_varref(ARRY2, (a C D d))
mbfl_declare_index_array_varref(ARRY3, (a b b c))

mbfl_array_is_sorted _(ARRY1)    @result{} 0
mbfl_array_is_sorted _(ARRY2)    @result{} 1
mbfl_array_is_sorted _(ARRY3)    @result{} 1
@end example
@end defun


@defun mbfl_array_is_sorted_greater @var{ARRY}
@defunx mbfl_array_is_sorted_greater @var{ARRY} @var{ISLESS}
Return true if the values in @var{ARRY} are sorted left--to--right in strict decreasing order
according to @var{ISLESS}; otherwise return false.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d))
mbfl_declare_index_array_varref(ARRY2, (d c b a))
mbfl_declare_index_array_varref(ARRY3, (c b b a))

mbfl_array_is_sorted_greater _(ARRY1)   @result{} 1
mbfl_array_is_sorted_greater _(ARRY2)   @result{} 0
mbfl_array_is_sorted_greater _(ARRY3)   @result{} 1
@end example
@end defun


@defun mbfl_array_is_sorted_leq @var{ARRY}
@defunx mbfl_array_is_sorted_leq @var{ARRY} @var{ISEQUAL} @var{ISLESS}
Return true if the values in @var{ARRY} are sorted left--to--right in non--strict increasing order
according to @var{ISEQUAL} and @var{ISLESS}; otherwise return false.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d))
mbfl_declare_index_array_varref(ARRY2, (d c b a))
mbfl_declare_index_array_varref(ARRY3, (a b b c))

mbfl_array_is_sorted_leq _(ARRY1)       @result{} 0
mbfl_array_is_sorted_leq _(ARRY2)       @result{} 1
mbfl_array_is_sorted_leq _(ARRY3)       @result{} 0
@end example
@end defun


@defun mbfl_array_is_sorted_geq @var{ARRY}
@defunx mbfl_array_is_sorted_geq @var{ARRY} @var{ISEQUAL} @var{ISLESS}
Return true if the values in @var{ARRY} are sorted left--to--right in non--strict decreasing order
according to @var{ISEQUAL} and @var{ISLESS}; otherwise return false.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d))
mbfl_declare_index_array_varref(ARRY2, (d c b a))
mbfl_declare_index_array_varref(ARRY3, (c b b a))

mbfl_array_is_sorted_geq _(ARRY1)       @result{} 1
mbfl_array_is_sorted_geq _(ARRY2)       @result{} 0
mbfl_array_is_sorted_geq _(ARRY3)       @result{} 0
@end example
@end defun


@defun mbfl_array_quicksort_bang @var{ARRY}
@defunx mbfl_array_quicksort_bang @var{ARRY} @var{ISLESS}
Apply the quicksort 2--partition algorithm to sort the values in @var{ARRY}; this function mutates
@var{ARRY} itself.  Comparison between values is performed with @var{ISLESS}.

@example
mbfl_declare_index_array_varref(ARRY1, (e b d a c))

mbfl_array_quicksort_bang _(ARRY1)
mbfl_slots_qvalues(ARRY1)        @result{} a b c d e

mbfl_declare_index_array_varref(ARRY2, (55 33 88 99 22 11 44 77 66))

mbfl_array_quicksort_bang _(ARRY2) mbfl_integer_less
mbfl_slots_qvalues(ARRY2)        @result{} 11 22 33 44 55 66 77 88 99
@end example
@end defun


@defun mbfl_array_quicksort3_bang @var{ARRY}
@defunx mbfl_array_quicksort3_bang @var{ARRY} @var{ISLESS} @var{ISEQUAL}
Apply the quicksort 3--partition algorithm to sort the values in @var{ARRY}; this function mutates
@var{ARRY} itself.  Comparison between values is performed with @var{ISLESS} and @var{ISEQUAL}.

@example
mbfl_declare_index_array_varref(ARRY1, (e b d a c))

mbfl_array_quicksort3_bang _(ARRY1)
mbfl_slots_qvalues(ARRY1)        @result{} a b c d e

mbfl_declare_index_array_varref(ARRY2, (55 33 88 99 22 11 44 77 66))

mbfl_array_quicksort3_bang _(ARRY2) mbfl_integer_less mbfl_integer_equal
mbfl_slots_qvalues(ARRY2)        @result{} 11 22 33 44 55 66 77 88 99
@end example
@end defun


@defun mbfl_array_insertsort_bang @var{ARRY} @var{NEW_VALUE}
@defunx mbfl_array_insertsort_bang @var{ARRY} @var{NEW_VALUE} @var{ISLESS}
Insert @var{NEW_VALUE} in an already sorted @var{ARRY} so that the resulting array is still sorted;
this function mutates @var{ARRY} itself.  If @var{ARRY} is not sorted: the behaviour of this
function is undefined.  Comparison between values is performed with @var{ISLESS}.

@example
mbfl_declare_index_array_varref(ARRY, (A B C E F G))

mbfl_array_insertsort_bang _(ARRY) D
mbfl_slots_qvalues(ARRY)        @result{} A B C D E F G
@end example

If @var{NEW_VALUE} equals values already in the array: it is inserted after the values already
there.

@example
function isless () @{
    mbfl_mandatory_parameter(VALUE1, 1, first value)
    mbfl_mandatory_parameter(VALUE2, 2, second value)

    mbfl_string_less mbfl_string_idx(VALUE1, 0) mbfl_string_idx(VALUE2, 0)
@}

mbfl_declare_index_array_varref(ARRY, (A B C DA DB E F G))

mbfl_array_insertsort_bang _(ARRY) D0 isless
mbfl_slots_qvalues(ARRY)        @result{} A B C DA DB D0 E F G
@end example
@end defun

@c page
@node containers arrays set
@appendixsubsec Set operations


The following functions implements operations on sets, @strong{not} multisets; this means we must
make sure that there are no duplicates in the arrays.  Also there is no need to sort arrays: while
it is more efficient to keep sets sorted, when possible, these functions do not require that.

@ParameterSemanticsARRY{}
@ParameterSemanticsARRYS{}
@ParameterSemanticsISEQUAL{}


@defun mbfl_array_set_union @var{UNION_ARRY} @vari{ARRY} @varii{ARRY}
@defunx mbfl_array_set_union @var{UNION_ARRY} @vari{ARRY} @varii{ARRY} @var{ISEQUAL}
Copy values from @vari{ARRY} and @varii{ARRY} to @var{UNION_ARRY}; use @var{ISEQUAL} to include only
unique values.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d e))
mbfl_declare_index_array_varref(ARRY2,     (c d e f g h i))
mbfl_declare_index_array_varref(UNION)

mbfl_array_set_union _(UNION) _(ARRY1) _(ARRY2)
mbfl_slots_qvalues(UNION)               @result{} a b c d e f g h i
@end example
@end defun


@defun mbfl_array_set_intersection @var{INTERSECTION_ARRY} @vari{ARRY} @varii{ARRY}
@defunx mbfl_array_set_intersection @var{INTERSECTION_ARRY} @vari{ARRY} @varii{ARRY} @var{ISEQUAL}
Copy values from @vari{ARRY} and @varii{ARRY} to @var{INTERSECTION_ARRY}; use @var{ISEQUAL} to
include only values present in both @vari{ARRY} and @varii{ARRY}.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d e))
mbfl_declare_index_array_varref(ARRY2,     (c d e f g h i))
mbfl_declare_index_array_varref(INTERSECTION)

mbfl_array_set_intersection _(INTERSECTION) _(ARRY1) _(ARRY2)
mbfl_slots_qvalues(INTERSECTION)        @result{} c d e
@end example
@end defun


@defun mbfl_array_set_xor @var{XOR_ARRY} @vari{ARRY} @varii{ARRY}
@defunx mbfl_array_set_xor @var{XOR_ARRY} @vari{ARRY} @varii{ARRY} @var{ISEQUAL}
Copy values from @vari{ARRY} and @varii{ARRY} to @var{XOR_ARRY}; use @var{ISEQUAL} to include
only values exclusively present in either @vari{ARRY} or @varii{ARRY}.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d e))
mbfl_declare_index_array_varref(ARRY2,     (c d e f g h i))
mbfl_declare_index_array_varref(XOR)

mbfl_array_set_xor _(XOR) _(ARRY1) _(ARRY2)
mbfl_slots_qvalues(XOR)                 @result{} a b f g h i
@end example
@end defun


@defun mbfl_array_set_difference @var{DIFFERENCE_ARRY} @vari{ARRY} @varii{ARRY}
@defunx mbfl_array_set_difference @var{DIFFERENCE_ARRY} @vari{ARRY} @varii{ARRY} @var{ISEQUAL}
Copy values from @vari{ARRY} to @var{DIFFERENCE_ARRY}; use @var{ISEQUAL} to include only values
exclusively present in @vari{ARRY} and not in @varii{ARRY}.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d e))
mbfl_declare_index_array_varref(ARRY2,     (c d e f g h i))
mbfl_declare_index_array_varref(DIFFERENCE)

mbfl_array_set_difference _(DIFFERENCE) _(ARRY1) _(ARRY2)
mbfl_slots_qvalues(DIFFERENCE)          @result{} a b
@end example
@end defun

@c page
@node containers arrays misc
@appendixsubsec Miscellaneous array operations


@ParameterSemanticsARRY{}


@defun mbfl_array_reverse @var{DST_ARRY} @var{SRC_ARRY}
Copy values from @var{SRC_ARRY} to @var{DST_ARRY} in reverse order.

@example
mbfl_declare_index_array_varref(DST_ARRY)
mbfl_declare_index_array_varref(SRC_ARRY, (a b c d e))

mbfl_array_reverse _(DST_ARRY) _(SRC_ARRY)
mbfl_slots_qvalues(DST_ARRY)    @result{} e d c b a
@end example
@end defun


@defun mbfl_array_reverse_bang @var{ARRY}
Reverse the order of the values in @var{ARRY}; this mutates @var{ARRY} itself.

@example
mbfl_declare_index_array_varref(ARRY, (a b c d e))

mbfl_array_reverse_bang _(ARRY)
mbfl_slots_qvalues(ARRY)    @result{} e d c b a
@end example
@end defun


@defun mbfl_array_swap_bang @var{ARRY} @vari{IDX} @varii{IDX}
Swap the values at indexes @vari{IDX} and @varii{IDX} in the slots of @var{ARRY}.  This function
mutates @var{ARRY} itself.

@example
mbfl_declare_index_array_varref(ARRY, (a b c D e F g h i))

mbfl_array_swap_bang _(ARRY) 3 5
mbfl_slots_qvalues(ARRY)        @result{} a b c F e D g h i
@end example
@end defun


@defun mbfl_array_zip @var{DST_ARRY} @vari{ARRY} @varii{ARRY}
Zip values from @vari{ARRY} and @varii{ARRY} into @var{DST_ARRY}.  @vari{ARRY} and @varii{ARRY} must
have the same size.

@example
mbfl_declare_index_array_varref(ARRY1, (a b c d e))
mbfl_declare_index_array_varref(ARRY2, (A B C D E))
mbfl_declare_index_array_varref(DST_ARRY)

mbfl_array_zip _(DST_ARRY) _(ARRY1) _(ARRY2)
mbfl_slots_qvalues(DST_ARRY)    @result{} a A b B c C d D e E
@end example
@end defun


@defun mbfl_array_reset_bang @var{ARRY}
Reset to the empty string all the values in @var{ARRY}.
@end defun

@c page
@node containers vectors
@appendixsec Vectors

@c page
@node containers stacks
@appendixsec Stacks


The library @value{LIBMBFLCONTAINERS} implements the traditional stack container with basic
operations.  Stacks are wrappers for Bash indexed arrays, @bashref{Arrays, Arrays}.


@deftp {Class} mbfl_stack
@deftpx {Superclass} mbfl_default_object
@deftpx {Metaclass} mbfl_default_class
Class of objects representing stacks.

@cindex @var{STK} parameter
@cindex Parameter @var{STK}
@cindex Function parameter @var{STK}
In this documentation: whenever a parameter to function is the data variable of an object of this
class, the parameter is named @var{STK}.
@end deftp


@defop {Constructor} {mbfl_stack_t} mbfl_stack_make @var{STK}
Build a new object of class @class{mbfl_stack} and store it in the already declared variable
@var{STK}.  Some resources are allocated, so when we do not need @var{STK} anymore: we must apply a
destructor to it.
@end defop


@defop {Destructor} {mbfl_stack_t} mbfl_stack_unmake @var{STK}
Destroy an object of class @class{mbfl_stack}, releasing its resources.  The variable @var{STK}
itself is @strong{not} unset.

@example
mbfl_location_enter
@{
    mbfl_default_object_declare(STK)
    mbfl_location_handler "mbfl_undeclare_varref(_(STK))"

    mbfl_stack_make _(STK)
    mbfl_location_handler "mbfl_stack_unmake _(STK)"

    mbfl_stack_push _(STK) 123
@}
mbfl_location_leave
@end example
@end defop


@defop {Predicate} {mbfl_stack_t} mbfl_stack_is_a @var{OBJ}
Return true if @var{OBJ} is an object of class @class{mbfl_stack}; otherwise return false.
@end defop


@defun mbfl_stack_size_var @var{SIZE_RV} @var{STK}
Retrieve the current number of elements on the stack @var{STK} and store it in the variable
@var{SIZE_RV}.

@example
mbfl_default_object_declare(STK)
mbfl_declare_varref(SIZE)

mbfl_stack_make _(STK)
mbfl_stack_push _(STK) 1
mbfl_stack_push _(STK) 2

mbfl_stack_size_var _(SIZE) _(STK)
$SIZE   @result{} 2
@end example
@end defun


@defun mbfl_stack_push @var{STK} @var{ITEM} @dots{}
Push all the optional parameters @var{ITEM} on the stack @var{STK}.

@example
mbfl_default_object_declare(STK)

mbfl_stack_make _(STK)
mbfl_stack_push _(STK) 1 2
mbfl_stack_push _(STK) 3
@end example
@end defun


@defun mbfl_stack_top_var @var{OBJ_RV} @var{STK}
Retrieve the top element from the stack @var{STK} and store it in the variable @var{OBJ_RV}.

@example
mbfl_default_object_declare(STK)
mbfl_declare_varref(OBJ)

mbfl_stack_make _(STK)
mbfl_stack_push _(STK) 1
mbfl_stack_push _(STK) 2

mbfl_stack_top_var _(OBJ) _(STK)
"$OBJ"  @result{} 2
@end example
@end defun


@defun mbfl_stack_pop_var @var{OBJ_RV} @var{STK}
Retrieve and remove the top element from the stack @var{STK} and store it in the variable
@var{OBJ_RV}.

@example
mbfl_default_object_declare(STK)
mbfl_declare_varref(OBJ)

mbfl_stack_make _(STK)
mbfl_stack_push _(STK) 1
mbfl_stack_push _(STK) 2

mbfl_stack_pop_var _(OBJ) _(STK)
"$OBJ"  @result{} 2

mbfl_stack_pop_var _(OBJ) _(STK)
"$OBJ"  @result{} 1
@end example
@end defun


@defun mbfl_stack_copy @var{DST_STK} @var{SRC_STK}
Copy the elements from @var{SRC_STK} to @var{DST_STK} by directly copying them from the underlying
arrays.  The old contents of @var{DST_STK} are overwritten.

@example
mbfl_default_object_declare(STK1)
mbfl_default_object_declare(STK2)

mbfl_stack_make _(STK1)
mbfl_stack_make _(STK2)

mbfl_stack_push  _(STK1) 'uno' 'due' 'tre'
mbfl_stack_copy  _(STK2) _(STK1)
mbfl_stack_equal _(STK2) _(STK1)
@result{} 0
@end example
@end defun


@defun mbfl_stack_equal @vari{STK} @varii{STK}
@defunx mbfl_stack_equal @vari{STK} @varii{STK} @var{ISEQUAL}
Compare the elements from @vari{STK} and @varii{STK} using the function @var{ISEQUAL}: return true if
the elements are equal; return false otherwise.

The optional argument @var{ISEQUAL} must be an identifier, bound to a shell function or command,
accepting the parameters:

@example
@var{ISEQUAL} @vari{ELEMENT} @varii{ELEMENT}
@end example

@noindent
when not given, it defaults to @func{mbfl_string_equal}.
@end defun


@defun mbfl_stack_dump @var{STK}
@defunx mbfl_stack_dump @var{STK} @var{LABEL}
Print to @stderr{} the elements of the array underlying @var{STK}, using the function
@func{mbfl_array_dump}.
@end defun

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include lgpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


@xref{Top,bash,@gnu{} Bash,@gnu{} Bash}.


The documentation of @value{PACKAGE} is available online:

@center @value{DOCUMENTATION_URL}

@noindent
the latest release of this package can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

Lots of interesting stuff at the following site:

@center @url{http://www.bash-hackers.org/wiki/}

In the design of this library, a lot of ideas were recycled from the ``Revised^6 Report on the
Algorithmic Language Scheme'':

@center @url{https://www.r6rs.org/}

@noindent
this is especially true for the object--oriented programming modules, the exceptional--condition
objects, the exception handlers.

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@c @node type index
@c @appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
