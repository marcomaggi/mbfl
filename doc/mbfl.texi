\input texinfo.tex
@c %**start of header
@setfilename mbfl.info
@settitle Marco's Bash Functions Library
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Marco's Bash Functions Library

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    @mbfl{}

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           mbfl

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{mrc.mgg@@gmail.com}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2003-2005, 2009-2010, 2012-2015, 2017-2018, 2020

@c ------------------------------------------------------------------------

@set REQUIRED_BASH_VERSION      4.3

@set GITHUB_URL                 @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set BITBUCKET_URL              @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DOWNLOAD_URL               @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}/downloads}
@set DOCUMENTATION_URL          @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{VERSION} of @value{PACKAGE}, a library of functions for the
@gnu{} Bash shell.  It requires Bash at least version @value{REQUIRED_BASH_VERSION}.  The package is
distributed under the terms of the @gnu{} Lesser General Public License (@lgpl{}).

The latest release can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} Lesser
General Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* mbfl: (mbfl).                 @value{TITLE}.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* preprocessor::                Using the script preprocessor.
* service variables::           Required user defined variables.
* base::                        Some base functions.
* shell::                       Shell facilities.
* encoding::                    Encoding and decoding strings.
* file::                        Manipulating files and pathnames.
* fd::                          Handling file descriptors.
* actions::                     Selecting actions to perform.
* getopts::                     Parsing command line options.
* message::                     Printing messages to the console.
* program::                     Using external programs.
* interfaces::                  Interfaces to external programs.
* signal::                      Catching signals.
* strings::                     Manipulating strings.
* dialog::                      Interacting with the user.
* times::                       Times and dates.
* variables::                   Manipulating variables.
* arrays::                      Manipulating arrays.
* system::                      Interfacing with the system.
* atexit::                      Running scripts at exit-time.
* locations::                   Running location handlers.
* semver::                      Semantic version specifications
* main::                        Main function.
* testing::                     Building test suites.

Appendices

* sendmail::                    Examples for sending email.
* Package License::             GNU Lesser General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
@c * type index::                  An entry for each type.

@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}, a library of functions for the
@gnu{} Bash shell.  This package is an attempt to make @gnu{} Bash a viable solution for medium
sized scripts; it needs at least Bash version @value{REQUIRED_BASH_VERSION}.  A set of modules
implementing common operations and a script template are offered by this package and the author has
used them with success in implementing non--small scripts.

The philosophy of @mbfl{} is to do the work as much as possible without external commands.  For
example: string manipulation is done using the special variable substitution provided by Bash, and
no use is done of utilities like @command{sed}, @command{grep} and @command{ed}.

The library is better used starting from the template scripts in the @file{examples/} subdirectory
of the distribution, especially @file{template.sh} and @file{template-actions.sh}.  This is because,
with @mbfl{}, some choices are made to reduce the application--dependent part of the script to the
smallest dimension; if we follow another schema, @mbfl{} modules may be inadequate.  This is
especially true for the options parsing module.

Starting with version 3: this package installs files under directories @strong{without} the version
part.  If we desire to install multiple versions of the package: we should install under
@file{/opt/mbfl/$(VERSION)}, by using the appropriate command line option at configuration time:

@example
$ ./configure \
      --prefix=/opt/mbfl/3.0.0 \
      --libdir=/opt/mbfl/3.0.0/lib64
@end example

@menu
* overview quick::              Quick run--time loading.
* overview reliable::           Reliable run--time loading.
* overview direct::             Direct inclusion.
* overview interactive::        Using the library interactively.
* overview rv::                 Result variables.
* overview notes::              Miscellaneous notes.
@end menu

@c page
@node overview quick
@section Quick run--time loading


The easiest way to use the library is to include at run--time the library file @file{libmbfl.sh} in
the script.  To do it, we install the package on the system and use this code in the scripts:

@example
source "$@{MBFL_LIBRARY:=$(type -p mbfl-config &>/dev/null \
   && mbfl-config)@}"
@end example

@noindent
after the service variables have been declared.  @ref{service variables, Required user defined
variables}.

This code will read the full pathname of the library from the environment variable
@env{MBFL_LIBRARY}; if this variable is not set: the script @command{mbfl-config} is invoked with no
arguments to acquire the pathname.  @command{mbfl-config} is installed by the package in the
@code{$(bindir)} directory, which we must include in the @env{PATH} environment variable.

@c page
@node overview reliable
@section Reliable run--time loading


A more reliable way to load the library is:

@smallexample
@verbatiminclude loader.sh
@end smallexample

@noindent
where the value of @code{mbfl_HARDCODED} can be the pathname of a known location in which to find
the library.  This code:

@enumerate
@item
Looks for the pathname in the @env{MBFL_LIBRARY} variable, to allow us to explicitly select the file
from the command line; example:

@example
$ MBFL_LIBRARY=/path/to/libmbfl.sh script.sh
@end example

@item
Looks in some known directory; for example a subdirectory of a software package that we have
distributed.

@item
As a last resort tries to evaluate the @command{mbfl-config} script to pick up a library installed
on the system.
@end enumerate

We see that the output of the @command{source} command is discarded: this is because we assume that:

@itemize
@item
If an error occurs evaluating the library a lot of error messages may fill the screen, confusing the
user; we just want a single error message pointing the finger of blame.

@item
An error in the evaluation of the library code can be replicated because the evaluation does not
heavily depend on the environment, so we can track down library errors later.
@end itemize

This code is included in the @mbfl{} distribution in the @file{src/lib/loader.sh} file; we can also
automatically include it in a script with the preprocessor macro @code{mbfl_library_loader}.

@c page
@node overview direct
@section Direct inclusion


Another solution is to directly include the library in the script; this is easy if we preprocess our
scripts with @gnu{} @mfour{}.  We only need to put the following in the script:

@example
m4_include(libmbfl.sh)
@end example

@noindent
then preprocess the script with:

@example
$ m4 --prefix-builtins --include=/path/to/library \
         script.sh.m4 >script.sh
@end example

@noindent
easy to do in a @file{Makefile}.  The installation directory pathname of the library
(@file{/path/to/library} in the example) is the output of @code{mbfl-config --libpath}.

It is also interesting to process the script with the following rule of @gnu{} Make: assuming that
the source scripts are in the @file{src/modules} directory of the source tree:

@example
vpath	%.sh.m4		$(srcdir)/src/modules

M4      = ...
M4FLAGS = --prefix-builtins --include=/path/to/library

%.sh: %.sh.m4
        $(M4) $(M4FLAGS) $(<) | \
        grep --invert-match -e '^#' -e '^$$' | \
        sed -e "s/^ \\+//" >$(@@)
@end example

@noindent
this will remove all the comments and blank lines, decreasing the size of the script significantly
if one makes use of verbose comments; note that this will wipe out the @code{#!/bin/bash} first
line, too.

Usually we want the script to begin with @code{#!/bin/bash} followed by a comment describing the
license terms.  We can do it by preparing a script like the following:

@example
#!/bin/bash
# ... license ...

m4_include(realscript.sh)

### end of file
@end example

@noindent
and processing it with the following makefile rule:

@example
M4      = ...
M4FLAGS = --prefix-builtins --include=/path/to/library

script.sh: script.sh.m4 realscript.sh
        $(M4) $(M4FLAGS) $(<) >$(@@)
@end example

@noindent
@file{realscript.sh} can be processed as explained above.

At this point, though, it is better to use the @mbfl{} preprocessor.  @ref{preprocessor, Using the
script preprocessor}.

@c page
@node overview interactive
@section Using the library interactively


It is possible, but not recommended, to source the library in an interactive shell, though some
modules must be disabled.  The purpose of interactive loading is only to test and debug the
functions by hand.

To do this execute the following code in the shell before sourcing the library:

@example
mbfl_INTERACTIVE=yes
@end example

@noindent
without exporting the variable.  The ``dangerous'' blocks of code in the library are surrounded by:

@example
if test "$mbfl_INTERACTIVE" != 'yes'
then
    ...
fi
@end example

@noindent
so they are not executed.  Disabled modules are: main, actions, getopts, signal; ``disabled'' does
not mean that the functions are not there: only the global variable declarations are excluded; this
is a little dirty, but, at present, it should work.

@c page
@node overview rv
@section Result variables


Some functions have a @code{_var} variant; for example, two functions exists to extract the filename
extension:

@example
mbfl_file_extension
mbfl_file_extension_var
@end example

@noindent
the first variant will print the result to stdout, while the @code{_var} variant will store the
result in a ``result variable'' whose name is handed to it as first argument; this mechanism is
built using the @code{local -n} feature of Bash.  Example:

@example
mbfl_file_extension /path/to/file.ext
@print{} ext

local _RV
mbfl_file_extension_var _RV /path/to/file.ext
"$_RV"  @result{} ext
@end example

The @code{_var} variants are often a bit faster because the output variant is often a wrapper for
the @code{_var} variant.

@c ------------------------------------------------------------------------

@subsubheading Dangers of result variables

@strong{We must be careful when using this feature!}  Let's consider this script:

@example
function main () @{
    local -i X=0
    mbfl_func X
    echo X=$X >&2
@}
function mbfl_func () @{
    local -n Y=$@{1:?@}
    Y=1
@}

main
@end example

@noindent
everything is fine: the script will print @code{X=1} because the call to @code{mbfl_func} will
mutate the variable @code{X} in its execution environment, and such variable happens to be defined
in the scope of @code{main}.

Now let's consider this script:

@example
function main () @{
    local -i X=0
    mbfl_func X
    echo X=$X >&2
@}
function mbfl_func () @{
    local -n Y=$@{1:?@}
    local X
    Y=1
@}

main
@end example

@noindent
it will print @code{X=0} because @code{mbfl_func} accesses the variable @code{X} in its execution
environment, and such variable is defined by @code{mbfl_func} itself; the local definition of
@code{X} shadows the upper level definition.

There is no true escape from this problem!  There is no definitive way to avoid ``fishing'' a local
variable in a lower function from an upper function.  @mbfl{} attempts to mitigate the problem by
prefixing its variables with @code{mbfl_} when a function uses reference variables.  We should also
prefix our ``result variables'', for example with a leading or trailing underscore: @mbfl{} never
uses such a prefix or suffix.

So we should write the script as follows:

@example
function main () @{
    local -i _X=0
    mbfl_func _X
    echo _X=$_X >&2
@}
function mbfl_func () @{
    local -n mbfl_Y=$@{1:?@}
    local mbfl_X
    mbfl_Y=1
@}

main
@end example

@c ------------------------------------------------------------------------

@subsubheading Using the preprocessor


@mbfl{}'s preprocessor has facilities to help us create variables with unique names that we can
safely use as argument to functions, @ref{preprocessor, Using the script preprocessor}.

With these facilities, the first example should be written as:

@example
mbfl_local_varref(RV)

mbfl_file_extension_var mbfl_datavar(RV) /path/to/file.ext
"$RV"  @result{} ext
@end example

@noindent
and the demo script as:

@example
function main () @{
    mbfl_local_varref(X, 0, -i)
    mbfl_func mbfl_datavar(X)
    echo X=$X >&2
@}
function mbfl_func () @{
    local -n Y=$@{1:?@}
    Y=1
@}

main
@end example

Using such preprocessor facilities consumes some computation time; they should be used when we do
not care about execution time and when such time is significantly less than running a subshell.
Otherwise we should just run the functions in a subshell:

@example
RESULT=$(mbfl_file_extension /path/to/file.ext)

"$RESULT" @result{} ext
@end example

@c page
@node overview notes
@section Notes


When using @mbfl{} we want to be aware of the following:

@itemize
@item
When in doubt about some functions work: we should take a look at the source code.  When doing this
we must remember that: there is no word splitting when performing variable assignment; so there is
no need to use double quotes in the following cases:

@example
alpha=$beta
alpha=$@{beta:1:3@}
alpha=$@{beta:-$gamma@}
alpha=$@{#beta@}
@end example

There is also no word splitting when evaluating the @var{WORD} in the @code{case} statement; so
there is no need to use double quotes in the following case:

@example
case $WORD in
  ...
esac
@end example

@item
Some functions take a variable name as argument and store in the referenced variable some value; to
avoid name collision: select a name that starts with @code{p_}.  It is guaranteed that @mbfl{} never
uses variables with name starting with such a prefix.

@item
The @code{read} built in does word splitting on the text it reads, even when there is a single
output variable.  We can verify it with:

@example
printf '\tciao\n' | @{
    read line
    echo line was "'$line'"
@}
@print{} line was 'ciao'
@end example

@noindent
we see that the initial tabulation character has been stripped, because it is a character in the
default value of @code{IFS}.  Word splitting does not happen when we set @code{IFS} to the empty
string:

@example
printf '\tciao\n' | @{
    IFS= read line
    echo line was "'$line'"
@}
@print{} line was '        ciao'
@end example

To avoid the mutation of text read with @code{read}, @mbfl{} always sets @code{IFS} to the empty
string in the environment in which @code{read} is evaluated.  This happens in functions like
@func{mbfl_read_maybe_null} and @func{mbfl_dialog_ask_password}; notice, though, that these
functions @strong{do not} mutate the @code{IFS} value in the environment of the caller.
@end itemize

@c page
@node preprocessor
@chapter Using the script preprocessor


The @mbfl{} script preprocessor is a command line program named @command{mbflpp.sh}; it is itself a
Bash script that makes use of the @mbfl{} library.  It can remove comments, blank lines, blank
characters at the beginning of lines, and it can expand macros.

The macro preprocessing is done with the @gnu{} @mfour{} program, using a library of macros called
@file{preprocessor.m4} which is installed on the system with the @mbfl{} package.

The use of the preprocessor is fully optional: every feature of the @mbfl{} library can be used
without the preprocessor.

@menu
* preprocessor invoking::       Invoking the preprocessor.
* preprocessor quoting::        Quotes and quoted macro names.
* preprocessor defines::        Predefined symbols.
* preprocessor library::        Loading or including the library.
* preprocessor parameters::     Function parameters handling.
* preprocessor arguments::      Script arguments handling.
* preprocessor nameref::        Variable name references.
* preprocessor strings::        Manipulating strings with macros.
* preprocessor variables::      Manipulating variables with macros.
* preprocessor arrays::         Manipulating arrays with macros.
@end menu

@c page
@node preprocessor invoking
@section Invoking the preprocessor


The basic synopsis is:

@smallexample
mbflpp.sh [options] <INFILE >OUTFILE
mbflpp.sh [options] --outfile=OUTFILE [--] INFILE1 INFILE2 ...
@end smallexample

@noindent
all the @code{INFILE} pathnames are interpreted as files to concatenate in the specified order.

All the @mbfl{} built in command line options are available, additionally the following options are
supported.

@table @code
@item --preserve-comments
Do not filter out comments.

@item --add-bash
Add @code{#!$BASH} at the beginning of the output, where @code{BASH} is the built--in variable of
Bash, @bashref{Bash Variables, BASH}.

@item --bash-program=BASH
Select the absolute file pathname of the Bash executable to use when the @option{--add-bash} is
used.  It defaults to the Bash used to run the preprocessor script itself.

@item -DNAME[=VALUE]
@itemx --define=NAME[=VALUE]
Define a new symbol (@mfour{} syntax).  This is equivalent to the @option{--define} option of
@mfour{}.

@item -IVALUE
@itemx --include=VALUE
Add a search path for files.  @code{VALUE} must be a directory pathname and it is handed to @mfour{}
to search for macro files.  We can use this option multiple times.

@item --library=VALUE
Include an @mfour{} library.  @code{VALUE} must be the name of an @mfour{} macro file which is
evaluated before the input files.

@item -oVALUE
@itemx --output=VALUE
Select an output file, @code{-} for stdout.

@item -e
@itemx --eval
Send the result of preprocessing to @bash{}, rather than print it.

@item --no-prepro
Do not load the installed preprocessor's macros library.  If we use this option: we are meant to use
the option @option{--library} to load a replacement macros library from a known location.
@end table

@c page
@node preprocessor quoting
@section Quotes and quoted macro names


The @mfour{} preprocessor is invoked by @command{mbflpp.sh} with the @option{--prefix-builtins}
option; so all the @mfour{} built in macros and directives are available prefixed with @code{m4_}.

The quoting for the preprocessor is changed with:

@example
m4_changequote(`[[[', `]]]')
@end example

@c page
@node preprocessor defines
@section Predefined symbols


The preprocessor predefines the following symbols.


@deffn {Preprocessor Macro} __PACKAGE_VERSION__
Expands into the version number of this package.
@end deffn


@deffn {Preprocessor Macro} __PACKAGE_DATADIR__
Expands into the absolute pathname of the directory under which the @value{PACKAGE} library is
installed.  For example:

@example
/usr/local/share/mbfl
@end example
@end deffn


@deffn {Preprocessor Macro} __MBFL_LIBRARY__
Expands into the absolute pathname of the @value{PACKAGE} library file.  For example:

@example
/usr/local/share/mbfl/libmbfl.sh
@end example
@end deffn

@c page
@node preprocessor library
@section Loading or including the library


We can include in scripts the code needed to source the library at run--time or the whole library
itself.


@deffn {Preprocessor Macro} mbfl_embed_library
Expands into the contents of the library file.  The selected library is the one used by the
preprocessor script @command{mbflpp.sh} itself.  The resulting output script does not need to load
the library at runtime; let's say it is ``statically linked''.
@end deffn


@deffn {Preprocessor Macro} mbfl_library_loader (@var{hardcoded_pathname})
Expand to a block of code that reliably loads the @value{PACKAGE} library.  The optional argument
@var{hardcoded_pathname} must be the absolute pathname to a file containing the library itself.
@ref{overview reliable} for details.
@end deffn

@c page
@node preprocessor parameters
@section Function parameters handling


@deffn {Preprocessor Macro} mbfl_mandatory_parameter @var{varname} @var{number} @var{description}
Define a variable local to a shell function holding an argument to the function.  @var{varname} is
the name of the variable; @var{number} is the positional parameter number; @var{description} is a
description of the argument.

Example, the following:

@example
mbfl_mandatory_parameter(PATHNAME, 2, file pathname)
@end example

@noindent
is expanded to:

@smallexample
local PATHNAME=$@{2:?"missing file pathname parameter to '$FUNCNAME'"@}
@end smallexample

Another example the following function:

@example
function message () @{
  mbfl_mandatory_parameter(PROGNAME, 1, program name)
  mbfl_mandatory_parameter(STRING,   2, message string)

  printf '%s: %s\n' "$PROGNAME" "$STRING"
@}
@end example

@noindent
is expanded to:

@smallexample
function message () @{
  local PROGNAME=$@{1:?"missing program name parameter to '$FUNCNAME'"@}
  local STRING=$@{2:?"missing message string parameter to '$FUNCNAME'"@}

  printf '%s: %s\n' "$PROGNAME" "$STRING"
@}
@end smallexample

@noindent
and so it is a function with two mandatory parameters.
@end deffn


@anchor{mbfl_mandatory_nameref_parameter}
@deffn {Preprocessor Macro} mbfl_mandatory_nameref_parameter @var{name} @var{number} @var{description}
Similar to @func{mbfl_mandatory_parameter} but use the @code{-n} attribute when declaring the
variable.  This makes the new variable a NAMEREF for the given variable name; @bashref{Shell
Parameters, Shell Parameters}.

A use of this macro roughly expands into:

@example
local mbfl_a_variable_@var{NAME}=$@{@var{NUMBER}:?@}
local -n @var{NAME}=$mbfl_a_variable_@var{NAME}
@end example

@noindent
where the @emph{proxy variable} @var{NAME} is defined as an alias of the @emph{data variable}, whose
name is stored in the numeric parameter; the additional @emph{name variable}
@code{mbfl_a_variable_@var{NAME}} holds the name of the @emph{data variable}.  We can use the macro
@func{mbfl_datavar} to retrieve the name of the data variable.
@end deffn


@deffn {Preprocessor Macro} mbfl_mandatory_integer_parameter @var{varname} @var{number} @var{description}
Like @func{mbfl_mandatory_parameter} but use the @code{-i} attribute when declaring the variable.
This assigns the integer attribute to the variable; @bashref{Bash Builtins, Bash Builtins}.
@end deffn


@deffn {Preprocessor Macro} mbfl_optional_parameter @var{varname} @var{number}
@deffnx {Preprocessor Macro} mbfl_optional_parameter @var{varname} @var{number} @var{default_value}
Define a variable local to a shell function holding an argument to the
function.

The argument @var{varname} is the name of the variable.  The argument @var{number} is the positional
parameter number.  The argument @var{default_value} is the initialisation value for the variable if
the argument is not used; when @var{default_value} is not present: the variable is left empty.

Example, the following:

@example
mbfl_optional_parameter(COUNT, 2, 123)
@end example

@noindent
is expanded to:

@smallexample
local COUNT=$@{2:-123@}"
@end smallexample

@noindent
and the following:

@example
mbfl_optional_parameter(COUNT, 2)
@end example

@noindent
is expanded to:

@smallexample
local COUNT=$@{2:-@}"
@end smallexample
@end deffn


@deffn {Preprocessor Macro} mbfl_optional_integer_parameter @var{varname} @var{number}
@deffnx {Preprocessor Macro} mbfl_optional_integer_parameter @var{varname} @var{number} @var{default_value}
Like @func{mbfl_optional_parameter} but use the @code{-i} attribute when declaring the variable;
this assigns the integer attribute to the variable; @bashref{Bash Builtins, Bash Builtins}.

@strong{NOTE} When the default value is missing: Bash automatically sets the variable to zero!
@end deffn

@c page
@node preprocessor arguments
@section Script arguments handling


@deffn {Preprocessor Macro} mbfl_command_line_argument @var{varname} @var{argindex}
Define a variable local to a shell function holding an argument to the script.  @var{varname} is the
variable name, @var{argindex} is the argument index in the @code{ARGV} array.

Example, the following:

@example
mbfl_command_line_argument(PATHNAME,3)
@end example

@noindent
is expanded to:

@example
local PATHNAME=$@{ARGV[3]@}
@end example
@end deffn


@deffn {Preprocessor Macro} mbfl_extract_command_line_argument @var{varname} @var{argindex}
Expand into an equivalent of:

@example
mbfl_command_line_argument(@var{varname}, @var{argindex})
mbfl_variable_unset(@var{varname}[@var{argindex}])
@end example

We use this macro to access a non--option command line argument and to remove it from the array
@env{ARGV}, so that it will no longer be included in expansions like:

@example
$@{ARGV[@@]@}
@end example
@end deffn

@c page
@node preprocessor nameref
@section Variable name references


The preprocessor implements facilities to declare variables with unique names and use them as target
for variables with the NAMEREF attribute.

The basic usage pattern is to declare a variable in a caller function with the preprocessor
directive @func{mbfl_local_varref} and to access a such variable from a callee function using the
preprocessor directive @func{mbfl_mandatory_nameref_parameter} as follows:

@example
function caller () @{
    mbfl_local_varref(VAR)

    callee mbfl_datavar(VAR)
    echo $VAR
@}

function callee () @{
    mbfl_mandatory_nameref_parameter(VAR, 1, variable reference)

    VAR=123
@}
@end example

@noindent
mutating the variable @samp{VAR} in @func{callee} will mutate the variable @var{VAR} in
@func{caller}.  For details on declaring the variable @ref{mbfl_local_varref, Full NAMEREF
declarations}.  For details on accessing the variable @ref{mbfl_mandatory_nameref_parameter,
Preprocessor parameters}.

@menu
* preprocessor nameref intro::    Introduction to the NAMEREF mechanism.
* preprocessor nameref access::   Variables accessors.
* preprocessor nameref full::     Full NAMEREF declarations.
* preprocessor nameref partial::  Partial NAMEREF declarations.
* preprocessor nameref special::  Special NAMEREF declarations.
* preprocessor nameref unset::    Unsetting NAMEREF declarations.
@end menu

@c page
@node preprocessor nameref intro
@subsection Introduction to the NAMEREF mechanism


With these facilities we can use the @code{_var} variants of @mbfl{} functions as follows:

@example
mbfl_local_varref(RV)

mbfl_file_extension_var mbfl_datavar(RV) /path/to/file.ext
"$RV"  @result{} ext
@end example

@noindent
without risking a variable name collision and without using the standard output of callee functions
to acquire a result.  In this example, the use of @func{mbfl_local_varref} expands into:

@example
local mbfl_a_variable_RV
mbfl_variable_alloc mbfl_a_variable_RV
local $mbfl_a_variable_RV
local -n RV=$mbfl_a_variable_RV
@end example

@noindent
a local @dfn{name variable} @code{mbfl_a_variable_RV} is declared and filled with a unique @dfn{data
variable} name by @func{mbfl_variable_alloc}; then the @dfn{data variable} is declared as local;
finally a @dfn{proxy variable} @code{RV} is defined as alias for the @dfn{data variable}.

Given a @dfn{proxy variable} name defined this way: we can retrieve its @dfn{name variable} name
with the macro @func{mbfl_namevar}; we can retrieve its @dfn{data variable} name with the macro
@func{mbfl_datavar}.

Other macros declare variables similarly, using the same scheme of 3 variable declarations: name
variable, data variable, proxy variable.

@c page
@node preprocessor nameref access
@subsection Variables accessors


@deffn {Preprocessor Macro} mbfl_namevar (@var{NAME})
The argument @var{NAME} must be the name of a proxy variable.  Uses of this macro expand into:

@example
mbfl_a_variable_@var{NAME}
@end example

Given the name of a @emph{proxy variable}: expand into the name of the @emph{name variable}.
@end deffn


@deffn {Preprocessor Macro} mbfl_datavar (@var{NAME})
The argument @var{NAME} must be the name of a proxy variable.  Uses of this macro expand into:

@example
$mbfl_a_variable_@var{NAME}
@end example

Given the name of a @emph{proxy variable}: expand into code that, executed at run--time, returns the
name of the @emph{data variable}.
@end deffn

@c page
@node preprocessor nameref full
@subsection Full NAMEREF declarations


When defining array variables we must use the specific macros, rather than the ones below;
@ref{preprocessor nameref special, Special NAMEREF declarations}.


@anchor{mbfl_local_varref}
@deffn {Preprocessor Macro} mbfl_local_varref (@var{NAME}, @var{INIT_VALUE}, @var{LOCAL_OPTIONS})
Expands into:

@example
local mbfl_a_variable_@var{NAME}
mbfl_variable_alloc mbfl_a_variable_@var{NAME}
local @var{LOCAL_OPTIONS} $mbfl_a_variable_@var{NAME}
local -n @var{NAME}=$mbfl_a_variable_@var{NAME}
@end example

@noindent
and when @var{INIT_VALUE} is @strong{not} empty, it finishes with:

@example
@var{NAME}=@var{INIT_VALUE}
@end example

A local @dfn{name variable} @code{mbfl_a_variable_@var{NAME}} is declared and filled with a unique
@dfn{data variable} name by @func{mbfl_variable_alloc}; then the @dfn{data variable} is declared as
local; finally a @dfn{proxy variable} @code{NAME} is defined as alias for the @dfn{data variable}.

The data variable is given the @var{LOCAL_OPTIONS}.

All the declared variables can be unset using @func{mbfl_unset_varref}; for details
@ref{mbfl_unset_varref, Unsetting NAMEREF declarations}.
@end deffn


@deffn {Preprocessor Macro} mbfl_global_varref (@var{NAME}, @var{INIT_VALUE}, @var{DECLARE_OPTIONS})
Expands into:

@example
local mbfl_a_variable_@var{NAME}
mbfl_variable_alloc mbfl_a_variable_@var{NAME}
declare -g @var{DECLARE_OPTIONS} $mbfl_a_variable_@var{NAME}
local -n @var{NAME}=$mbfl_a_variable_@var{NAME}
@end example

@noindent
and when @var{INIT_VALUE} is @strong{not} empty, it finishes with:

@example
@var{NAME}=@var{INIT_VALUE}
@end example

A local @dfn{name variable} @code{mbfl_a_variable_@var{NAME}} is declared and filled with a unique
@dfn{data variable} name by @func{mbfl_variable_alloc}; then the @dfn{data variable} is declared as
global; finally a @dfn{proxy variable} @code{NAME} is defined as alias for the @dfn{data variable}.

The data variable is given the @var{DECLARE_OPTIONS}.

All the declared variables can be unset using @func{mbfl_unset_varref}; for details
@ref{mbfl_unset_varref, Unsetting NAMEREF declarations}.
@end deffn


When we have finished using a global varref set of variables, we must unset the global @emph{data
variable}; we can do it as follows:

@example
function main () @{
    mbfl_global_varref(VAR)

    mbfl_location_enter
    @{
        mbfl_location_handler "mbfl_variable_unset(mbfl_datavar(VAR))"

        # Do something here with VAR.
        ...
    @}
    mbfl_location_leave
@}
@end example

@c page
@node preprocessor nameref partial
@subsection Partial NAMEREF declarations


@deffn {Preprocessor Macro} mbfl_local_nameref (@var{NAME}, @var{DATA_VARNAME_EXPR})
It expands into:

@example
local mbfl_a_variable_@var{NAME}=@var{DATA_VARNAME_EXPR}
local -n @var{NAME}=$mbfl_a_variable_@var{NAME}
@end example

Declare a proxy variable @var{NAME} aliasing the data variable whose value is the result of
evaluating @var{DATA_VARNAME_EXPR}.

We can use this macro as follows:

@example
function main () @{
    local VARNAME
    worker VARNAME
    mbfl_local_nameref(VAR, $VARNAME)
    ...
@}

function worker () @{
    mbfl_mandatory_nameref_parameter(RV, 1)
    mbfl_global_varref(VAR, 123)
    RV=mbfl_datavar(VAR)
@}

main
@end example
@end deffn

@c page
@node preprocessor nameref special
@subsection Special NAMEREF declarations


@deffn {Preprocessor Macro} mbfl_local_index_array_varref (@var{NAME}, @var{INIT_VALUE}, @var{LOCAL_OPTIONS})
Like @func{mbfl_local_varref} but always include the @code{-a} option to the @command{local}
definition of the data variable.  This makes the data variable an indexed array.
@end deffn


@deffn {Preprocessor Macro} mbfl_local_assoc_array_varref (@var{NAME}, @var{INIT_VALUE}, @var{LOCAL_OPTIONS})
Like @func{mbfl_local_varref} but always include the @code{-A} option to the @command{local}
definition of the data variable.  This makes the data variable an associative array.
@end deffn


@deffn {Preprocessor Macro} mbfl_global_index_array_varref (@var{NAME}, @var{INIT_VALUE}, @var{DECLARE_OPTIONS})
Like @func{mbfl_global_varref} but always include the @code{-a} option to the @command{declare}
definition of the data variable.  This makes the data variable an indexed array.
@end deffn


@deffn {Preprocessor Macro} mbfl_global_assoc_array_varref (@var{NAME}, @var{INIT_VALUE}, @var{DECLARE_OPTIONS})
Like @func{mbfl_global_varref} but always include the @code{-A} option to the @command{declare}
definition of the data variable.  This makes the data variable an associative array.
@end deffn

@c page
@node preprocessor nameref unset
@subsection Unsetting NAMEREF declarations


@anchor{mbfl_unset_varref}
@deffn {Preprocessor Macro} mbfl_unset_varref (@var{NAME})
The argument @var{NAME} must be the first argument to a previous call to
@func{mbfl_local_varref} or @func{mbfl_global_varref}.  Expand into:

@example
unset -v $mbfl_a_variable_@var{NAME}
unset -v mbfl_a_variable_@var{NAME}
unset -v -n @var{NAME}
unset -v @var{NAME}
@end example

Unset all the @emph{proxy variable} @var{NAME} and all the variables associated to it.
@end deffn

@c page
@node preprocessor strings
@section Manipulating strings with macros


@deffn {Preprocessor Macros} mbfl_string_len (@var{VAR})
Expands into the expression:

@example
$@{#@var{VAR}@}
@end example

@noindent
which evaluates to the number of characters in the string in the variable @var{VAR}.
@end deffn


@deffn {Preprocessor Macros} mbfl_string_idx (@var{VAR}, @var{EXPR})
Expands into the expression:

@example
$@{@var{VAR}:@var{EXPR}:1@}
@end example

@noindent
which evaluates to the character at index @var{EXPR} in the string in the variable @var{VAR}.
@end deffn

@c page
@node preprocessor variables
@section Manipulating variables with macros


@deffn {Preprocessor Macro} mbfl_variable_unset (@var{VAR})
@deffnx {Preprocessor Macro} mbfl_unset_variable (@var{VAR})
These macros are synonyms.  Expand into a command that unsets the variable @var{VAR}:

@example
unset -v @var{VAR}
@end example
@end deffn

@c page
@node preprocessor arrays
@section Manipulating arrays with macros


@deffn {Preprocessor Macros} mbfl_slot_ref (@var{VAR}, @var{KEY})
Expands into the expression:

@example
$@{@var{VAR}[@var{KEY}]@}
@end example

@noindent
which evaluates to the value of the slot @var{KEY} in the array variable @var{VAR}.  This macro
works with both indexed and associative arrays.
@end deffn


@deffn {Preprocessor Macros} mbfl_slot_set (@var{VAR}, @var{KEY}, @var{EXPR})
Expands into the expression:

@example
@var{VAR}[@var{KEY}]=@var{EXPR}
@end example

@noindent
which stores the value of @var{EXPR} in the slot @var{KEY} of the array variable @var{VAR}.  This
macro works with both indexed and associative arrays.
@end deffn

@c page
@node service variables
@chapter Required user defined variables


The following variables are expected to be defined before the @mbfl{}
code is evaluated.  They are used by @mbfl{} to compute values for its
own variables.


@anchor{script_REQUIRED_MBFL_VERSION}
@defvar script_REQUIRED_MBFL_VERSION
The minimum, full, semantic version specification of the @mbfl{} library needed by this script,
optionally prefixed with a @code{v} character; @ref{semver, Semantic version specifications}.  We
can use this variable both to validate the required version at runtime or merely as a comment on the
requirements of the script.  We can request the main module to compare the version hard--coded in
the @mbfl{} with the one required by the script, as specified by this variable; @ref{main, Main
function}.
@end defvar


@anchor{script_PROGNAME}
@defvar script_PROGNAME
The name of the script.  It is used, for example, in error and verbose messages.
@end defvar


@anchor{script_AUTHOR}
@defvar script_AUTHOR
The name of the script author(s).  It is used in copyright statements.
@end defvar


@anchor{script_COPYRIGHT_YEARS}
@defvar script_COPYRIGHT_YEARS
A comma separated list of years of copyright.  It is used in copyright
statements.
@end defvar


@anchor{script_VERSION}
@defvar script_VERSION
The version number of the script.  It is used in copyright statements
and it can be directly queried using the command line options
@option{--version} and @option{--version-only}.
@end defvar


@anchor{script_LICENSE}
@defvar script_LICENSE
The identifier of the license under which the script is released.  Accepted values are: @code{GPL}
or @code{GPL2}, @code{GPL3}, @code{LGPL} or @code{LGPL2}, @code{LGPL3}, @code{BSD}, @code{liberal}.
It is used to select the appropriate value to be displayed when the user of the script selects the
@code{--license} option.  @ref{getopts options, Predefined options}
@end defvar


@anchor{script_USAGE}
@defvar script_USAGE
Must be a string, of one or more lines, describing the synopsis of the
program.  It is usually something like:

@example
script_USAGE="usage: $@{script_PROGNAME@} [options] ..."
@end example

@noindent
if the script accepts either input from the stdin channel and input from
a selected file, it is useful to present both cases:

@example
script_USAGE="usage: $@{script_PROGNAME@} [options] <INPUT-FILE
usage: $@{script_PROGNAME@} [options] INPUT-FILE"
@end example

If the script defines multiple actions: it is better to define a
synopsis description for every supported action, by setting this
variable in the action--specific ``before parsing options'' function.
@ref{actions} for details.
@end defvar


@anchor{script_DESCRIPTION}
@defvar script_DESCRIPTION
One line string providing a brief description of the program.  It is used
in the help screen (the one echoed when the @option{--help} option is
used) right after the content of @code{script_USAGE}.

If the script defines multiple actions: it is better to define a usage
description for every supported action, by setting this variable in the
action--specific ``before parsing options'' function.  @ref{actions} for
details.
@end defvar


@anchor{script_EXAMPLES}
@defvar script_EXAMPLES
One or more lines of text to be displayed at the end of the help screen,
after the options description.  It should contain examples of common
invocations for the script.

If the script defines multiple actions: it is better to define a set of
examples description for every supported action, by setting this
variable in the action--specific ``before parsing options'' function.
@ref{actions} for details.
@end defvar


All the text in these variables is used as argument to the @code{printf}
built--in command; in particular: @code{script_DESCRIPTION} and
@code{script_EXAMPLES} are used as first argument to @code{printf}, so
the escape sequences (in particular @code{\t} and @code{\n}) are
expanded.

@c ------------------------------------------------------------

@subsubheading Examples

The following example shows how to declare the variables.

@example
script_REQUIRED_MBFL_VERSION=v3.0.0-devel.4
script_PROGNAME=myscript.sh
script_AUTHOR='Marco Maggi and Marco Maggi'
script_COPYRIGHT_YEARS='2002, 2003, 2004'
script_VERSION=1.0
script_LICENSE=GPL3
script_USAGE="usage: $script_PROGNAME [options] ..."
script_DESCRIPTION='Does this and that.'
script_EXAMPLES='Examples:

\tmyscript.sh --do-something arg arg ...
\tmyscript.sh --do-other arg arg ...'
@end example

Notice that @code{script_DESCRIPTION} and @code{script_EXAMPLES}
@strong{do not} end with a newline character.

@c page
@node base
@chapter Some base functions



@defun mbfl_set_maybe @var{name} @var{value}
Set a variable named @var{name} to @var{value}, but only if @var{name}
is not the empty string; if @var{value} is the empty string: the old
value of @var{name} is left untouched.
@end defun


@defun mbfl_read_maybe_null @var{varname}
Read a line from its stdin and store it in a variable named
@var{varname}.  If @func{mbfl_option_null} returns true: the null
character is used as terminator, as in:

@example
IFS= read -d $'\x00'
@end example
@end defun

@c page
@node shell
@chapter Shell facilities


@menu
* shell introspection::         Introspection facilities.
@end menu

@c page
@node shell introspection
@section Introspection facilities


@defun mbfl_shell_is_function @var{NAME}
Return successfully if @var{NAME} is an identifier representing a defined function name; otherwise
return unsuccessfully.
@end defun

@c page
@node encoding
@chapter Encoding and decoding strings


The purpose of this module is to let an external process invoke a Bash script with @emph{damned}
command line arguments: strings including blanks or strange characters that may trigger quoting
rules.  This problem can arise when using scripting languages with some sort of @code{eval} command.

The solution is to encode the argument string in hexadecimal or octal format strings, so that all
the damned characters are converted to ``good'' ones.  The Bash script can convert them back.

@quotation
@strong{NOTE} Internally Bash represents strings as C language style @asciiz{} arrays, so it is
impossible to correctly handle null bytes in a Bash variable: the string will get truncated at the
null byte.
@end quotation


@defun mbfl_encode_hex @var{ascii_string}
@defunx mbfl_encode_hex_var @var{_RV} @var{ascii_string}
Encode a hex string and outputs it on @stdout{}.

@DocVarVariant{}
@end defun


@defun mbfl_decode_hex @var{hex_string}
@defunx mbfl_decode_hex_var @var{_RV} @var{hex_string}
Decode a hex string and outputs it on @stdout{}.

@DocVarVariant{}
@end defun


@defun mbfl_decode_oct @var{oct_string}
@defunx mbfl_decode_oct_var @var{_RV} @var{oct_string}
Decode a oct string and outputs it on @stdout{}.

@DocVarVariant{}
@end defun


Example:

@example
mbfl_decode_hex 414243
@print{} ABC
@end example

@c page
@node file
@chapter Manipulating files and pathnames


@menu
* file names::                  Manipulating file names.
* file commands::               Manipulating files with external
                                commands.
* file testing::                Testing file existence and the like.
* file read and write::         Reading and writing files with
                                privileges.
* file misc::                   Miscellaneous commands.
@end menu

@c page
@node file names
@section File names


@menu
* file names parts::            Splitting a file name into its
                                components.
* file names path::             Absolute and relative pathnames.
* file names system::           Finding pathnames on the system.
@end menu


@c page
@node file names parts
@subsection Splitting a file name into its components


@defun mbfl_file_extension @var{pathname}
@defunx mbfl_file_extension_var @var{_RV} @var{pathname}
Extract the extension from a file name.  Starting from the end of the string @var{pathname}: search
the last dot character in the argument string and echo to stdout the range of characters from the
dot to the end, not including the dot.  If a slash character or the beginning of the string is found
first: echoes to stdout the empty string.

@DocVarVariant{}

@example
mbfl_file_extension /path/to/file.ext   @print{} ext
mbfl_file_extension /path/to/file.      @print{} <no output>
mbfl_file_extension /path/to/file       @print{} <no output>
mbfl_file_extension /path/to/.file.ext  @print{} ext
mbfl_file_extension /path/to/.dotfile   @print{} <no output>
mbfl_file_extension .dotfile            @print{} <no output>

local _RV
mbfl_file_extension_var _RV /path/to/file.ext
"$_RV"  @result{} ext
@end example
@end defun


@defun mbfl_file_dirname @var{pathname}
@defunx mbfl_file_dirname_var @var{_RV} @var{pathname}
Extract the directory part from a fully qualified file name.  Search the last slash character in the
input string and echo to stdout the range of characters from the first to the slash, not including
the slash.

If no slash is found: echo a single dot (the current directory).

If the input string begins with @code{/} or @code{//} with no slash characters after the first ones:
echo a single slash.

@DocVarVariant{}

@example
mbfl_file_dirname /path/to/file.ext     @print{} /path/to
mbfl_file_dirname file.ext              @print{} .
mbfl_file_dirname /file.ext             @print{} /
mbfl_file_dirname //file.ext            @print{} /
mbfl_file_dirname /path/to///file.ext   @print{} /path/to
mbfl_file_dirname //////file.ext        @print{} /
mbfl_file_dirname a/b                   @print{} a
mbfl_file_dirname a                     @print{} .
mbfl_file_dirname ../a                  @print{} ..
mbfl_file_dirname ./a                   @print{} .
mbfl_file_dirname ../abcd               @print{} ..
mbfl_file_dirname ./abcd                @print{} .
mbfl_file_dirname ../abcd/efgh          @print{} ../abcd
mbfl_file_dirname ./abcd/efgh           @print{} ./abcd

local _RV
mbfl_file_dirname_var _RV /path/to/file.ext
"$_RV" @result{} /path/to
@end example
@end defun


@defun mbfl_file_rootname @var{pathname}
@defunx mbfl_file_rootname_var @var{_RV} @var{pathname}
Extract the root portion of a file pathname: everything excluding the last component's extension and
the extension's dot separator.  Search the last dot character in the argument string and echo to
stdout the range of characters from the beginning to the dot, not including the dot.  If a slash is
the last character: skip it; then if a slash character is found first, or no dot is found, or the
dot is the first character: echo the full @var{pathname}.

@DocVarVariant{}

@example
mbfl_file_rootname file.ext              @print{} file
mbfl_file_rootname /path/to/file.ext     @print{} /path/to/file
mbfl_file_rootname /path/to/file..ext    @print{} /path/to/file.
mbfl_file_rootname /path/to/file.ext/    @print{} /path/to/file
mbfl_file_rootname /path/to/file.ext///  @print{} /path/to/file
mbfl_file_rootname /path/to/file         @print{} /path/to/file
mbfl_file_rootname /path/to.to/file      @print{} /path/to.to/file
mbfl_file_rootname .dotfile              @print{} .dotfile
mbfl_file_rootname /path/to/.dotfile     @print{} /path/to/.dotfile
mbfl_file_rootname a                     @print{} a
mbfl_file_rootname /                     @print{} /
mbfl_file_rootname .                     @print{} .
mbfl_file_rootname ..                    @print{} ..

local _RV
mbfl_file_rootname_var /path/to/file.ext
"$_RV" @result{} /path/to/file
@end example
@end defun


@defun mbfl_file_tail @var{pathname}
@defunx mbfl_file_tail_var @var{_RV} @var{pathname}
Extract the file portion from a fully qualified pathname.  Search the last slash character in the
input string and echo to stdout the range of characters from the slash to the end, not including the
slash.  If no slash is found: echo the whole string.

@DocVarVariant{}

@example
mbfl_file_tail /path/to/file.ext  @print{} file.ext
mbfl_file_tail /path/to/          @print{} <no output>
mbfl_file_tail file.ext           @print{} file.ext

local _RV
mbfl_file_tail_var _RV /path/to/file.ext
"$_RV" @result{} file.ext
@end example
@end defun


@defun mbfl_file_split @var{pathname}
Separate a file name into its components.  One or more contiguous occurrences of the slash character
is used as separator.  The components are stored in an array named @code{SPLITPATH}, that may be
declared @code{local} in the scope of the caller; the base index is zero.  The number of elements in
the array is stored in a variable named @code{SPLITCOUNT}.  Return true.

@example
local -a SPLITPATH
local -i SPLITCOUNT

mbfl_file_split /path/to/file.ext
"$@{SPLITPATH[0]@}"       @result{} path
"$@{SPLITPATH[1]@}"       @result{} to
"$@{SPLITPATH[2]@}"       @result{} file.ext
$SPLITCOUNT             @result{} 3
@end example
@end defun


@defun mbfl_file_strip_trailing_slash @var{pathname}
@defunx mbfl_file_strip_trailing_slash_var @var{_RV} @var{pathname}
Remove all the trailing slashes from @var{pathname} and print the result on stdout.  If
@var{pathname} consists only of slashes: print a single dot.

@DocVarVariant{}

@example
mbfl_file_strip_trailing_slash '/path/to/file.ext'
@print{} /path/to/file.ext

mbfl_file_strip_trailing_slash '/path/to/dir.ext/'
@print{} /path/to/dir.ext

mbfl_file_strip_trailing_slash '/path/to/dir.ext///'
@print{} /path/to/dir.ext

mbfl_file_strip_trailing_slash '/'      @print{} .
mbfl_file_strip_trailing_slash '///'    @print{} .
mbfl_file_strip_trailing_slash 'file'   @print{} file

local _RV
mbfl_file_strip_trailing_slash_var _RV '/path/to/dir.ext/'
"$_RV" @result{} /path/to/dir.ext
@end example
@end defun


@defun mbfl_file_strip_leading_slash @var{pathname}
@defunx mbfl_file_strip_leading_slash_var @var{_RV} @var{pathname}
Remove all the leading slashes from @var{pathname} and print the result on stdout.  If
@var{pathname} consists only of slashes: print a single dot.

@DocVarVariant{}

@example
mbfl_file_strip_leading_slash '/path/to/file.ext'
@print{} path/to/file.ext

mbfl_file_strip_leading_slash '/path/to/dir.ext/'
@print{} path/to/dir.ext/

mbfl_file_strip_leading_slash '///path/to/dir.ext'
@print{} path/to/dir.ext

mbfl_file_strip_leading_slash '/'       @print{} .
mbfl_file_strip_leading_slash '///'     @print{} .
mbfl_file_strip_leading_slash 'file'    @print{} file
@end example
@end defun


@defun mbfl_file_normalise @var{pathname}
@defunx mbfl_file_normalise @var{pathname} @var{prefix}
@defunx mbfl_file_normalise_var @var{_RV} @var{pathname}
@defunx mbfl_file_normalise_var @var{_RV} @var{pathname} @var{prefix}
Normalise a file name: remove all the occurrences of @code{.} and @code{..}.

If @var{pathname} is relative (according to @func{mbfl_file_is_absolute}) and @var{prefix} is not
present or it is the empty string: the current process working directory is prepended to
@var{pathname}.

If @var{prefix} is present and non empty, and @var{pathname} is relative (according to
@func{mbfl_file_is_absolute}): @var{prefix} is prepended to @var{pathname} and normalised, too.

Echo to stdout the normalised file name.  Return true.

@DocVarVariant{}
@end defun

@c page
@node file names path
@subsection Absolute and relative pathnames


@defun mbfl_file_subpathname @var{pathname} @var{basedir}
@defunx mbfl_file_subpathname_var @var{_RV} @var{pathname} @var{basedir}
If @var{pathname} is a subdirectory or file under @var{basedir}: print to stdout the subpathname
portion.  Example:

@example
mbfl_file_subpathname /a/b/c /a
-> ./b/c
@end example

Both @var{pathname} and @var{basedir} must be full (normalised) pathnames for this function to work.
If @var{pathname} is recognised as subpathname of @var{basedir}: the return code is zero; else the
return code is one.

@DocVarVariant{}

@example
mbfl_file_subpathname /a /a       @print{} ./
mbfl_file_subpathname /a/b/c /a/  @print{} ./b/c
mbfl_file_subpathname /a/b/c /a   @print{} ./b/c

mbfl_file_subpathname /a/b/c /d   @error{} no match

local _RV
mbfl_file_subpathname_var _RV /a/b/c /a
"$_RV" @result{} ./b/c
@end example
@end defun

@c ------------------------------------------------------------------------

@defun mbfl_file_is_absolute @var{pathname}
Return true if the first character in @var{pathname} is a slash (@code{/}); else return false.
@end defun


@defun mbfl_file_is_absolute_dirname @var{pathname}
Return true if @var{pathname} is a directory according to @func{mbfl_file_is_directory} and an
absolute pathname according to @func{mbfl_file_is_absolute}.
@end defun


@defun mbfl_file_is_absolute_filename @var{pathname}
Return true if @var{pathname} is a file according to @func{mbfl_file_is_file} and an absolute
pathname according to @func{mbfl_file_is_absolute}.
@end defun

@c ------------------------------------------------------------------------

@defun mbfl_file_is_relative @var{pathname}
Return true if the first character in @var{pathname} is @strong{not} a slash (@code{/}); else return
false.
@end defun


@defun mbfl_file_is_relative_dirname @var{pathname}
Return true if @var{pathname} is a directory according to @func{mbfl_file_is_directory} and an
relative pathname according to @func{mbfl_file_is_relative}.
@end defun


@defun mbfl_file_is_relative_filename @var{pathname}
Return true if @var{pathname} is a file according to @func{mbfl_file_is_file} and an relative
pathname according to @func{mbfl_file_is_relative}.
@end defun

@c page
@node file names system
@subsection Finding pathnames on the system


@defun mbfl_file_find_tmpdir
@defunx mbfl_file_find_tmpdir @var{PATHNAME}
@defunx mbfl_file_find_tmpdir_var @var{_RV}
@defunx mbfl_file_find_tmpdir_var @var{_RV} @var{PATHNAME}
Find a value for a temporary directory according to the following rules:

@enumerate
@item
If @var{PATHNAME} is not used: it defaults to the current value of @code{mbfl_option_TMPDIR}.

@item
If @var{PATHNAME} is not null and it is a directory and it is writable: it is accepted as value.

@item
If @var{PATHNAME} is invalid: the value @file{/tmp/$USER}, where @env{USER} is the environment
variable, is tried.

@item
Finally the value @file{/tmp} is tried.
@end enumerate

Echo the accepted value to stdout.  Return true if a value is found, false otherwise.

@DocVarVariant{}
@end defun

@c page
@node file commands
@section File Commands


@menu
* file commands listing::       Listing directory entries.
* file commands stat::          Inspecting files and directories.
* file commands mkdir::         Creating directories.
* file commands copy::          Copying files.
* file commands move::          Moving files.
* file commands removing::      Removing files and directories.
* file commands symlink::       Creating symbolic links.
* file commands realpath::      Normalising pathnames.
* file commands tar::           Manipulating tar archives.
* file commands perms::         Set/get file permissions.
* file commands owner::         Setting file owner and group.
* file commands compress::      Compressing files.
@end menu

@c page
@node file commands listing
@subsection Listing directory entries


@cindex Files, listing
@cindex Files, owner
@cindex Files, group
@cindex Files, size
@cindex Listing files
@cindex Owner of files
@cindex Group of files
@cindex Size of files
@cindex Getting owner of files
@cindex Getting group of files
@cindex Getting size of files
@CindexCommand{ls}
@CindexCommand{readlink}
@CindexCommand{chmod}
@CindexCommand{chown}


@defun mbfl_file_enable_listing
Declare the commands required to retrieve informations about files and
directories.  @ref{program declaring, Declaring the intention to use a
program}

The programs are: @command{ls}, @command{readlink}.
@end defun


@defun mbfl_file_listing @var{pathname} @dots{}
Execute @command{ls} with @var{pathname} as argument.  If other arguments are present: they are
places, as they are, on the command line of @command{ls}.
@end defun


@defun mbfl_file_long_listing @var{pathname}
Execute @command{ls} with @var{pathname} as argument and the flag
@code{-l}.
@end defun


@defun mbfl_file_normalise_link @var{pathname}
Make use of the @command{readlink} to normalise the pathname of a
symbolic link (remember that a symbolic link references a file, never a
directory).  Echo to stdout the normalised pathname.

The command line of @command{readlink} is:

@example
readlink -fn "$@var{pathname}"
@end example
@end defun


@defun mbfl_file_read_link @var{pathname}
Make use of @command{readlink} to acquire the original pathname
referenced by @var{pathname}, then print it.
@end defun


@defun mbfl_exec_readlink @var{PATHNAME} [@var{opt} @dots{}]
Raw executor for @command{readlink}.  The mandatory argument @var{PATHNAME} must be the pathname of
a directory entry.  The optional arguments are added, as options, to the command line of
@command{readlink}.
@end defun

@c page
@node file commands stat
@subsection Inspecting files and directories


The @gnu{} Coreutils package comes with a command line program @command{stat} which implements
advanced inspection of file and directory status.  @xref{stat invocation, stat, Report file or file
system status, coreutils}.


@defun mbfl_file_enable_stat
Declare the intention to use the program @command{stat}.
@end defun


@defun mbfl_file_stat @var{pathname} [@var{opt} @dots{}]
@defunx mbfl_file_stat_var @var{_RV} @var{pathname} [@var{opt} @dots{}]
Execute @command{stat} with @var{pathname} as first argument and @var{arg} as other arguments.

@example
mbfl_file_enable_stat

mbfl_file_stat /bin/ls --format='%F'
@result{} 0
@print{} regular

mbfl_file_stat /bin --format='%F'
@result{} 0
@print{} directory
@end example

@DocVarVariant{}
@end defun


@defun mbfl_file_get_size @var{pathname}
@defunx mbfl_file_get_size_var @var{_RV} @var{pathname}
Print the size of the file in bytes.

@DocVarVariant{}
@end defun

@c page
@node file commands mkdir
@subsection Creating directories


@cindex Creating directories
@cindex Directories, creating
@CindexCommand{mkdir}


@defun mbfl_file_enable_make_directory
Declare the commands required to create directories.  @ref{program
declaring, Declaring the intention to use a program}

The programs are: @command{mkdir}.
@end defun


@defun mbfl_file_make_directory @var{pathname}
@defunx mbfl_file_make_directory @var{pathname} @var{permissions}
Create a directory named @var{pathname}; all the non--existent parents are
created, too.  If @var{permissions} is present: it is the specification
of directory permissions in octal mode.

This function does not test if the directory already exists: the command
is always executed.
@end defun


@defun mbfl_file_make_if_not_directory @var{pathname}
@defunx mbfl_file_make_if_not_directory @var{pathname} @var{permissions}
Wrapper for @func{mbfl_file_make_directory} that creates the
directory if it does not exist.

If a @command{sudo} user was requested: this function resets the request
even if no command has been executed.
@end defun

@c page
@node file commands copy
@subsection Copying files


@cindex Copying files
@cindex Files, copying
@CindexCommand{cp}


At present, copying of directories is not supported; we have to create
the directory and then copy files into it.


@defun mbfl_file_enable_copy
Declare the commands required to copy files and directories.
@ref{program declaring, Declaring the intention to use a program}

The programs are: @command{cp}.
@end defun


@defun mbfl_file_copy @var{source} @var{target} ?@dots{}?
Copy the @var{source}, a file pathname, to @var{target}, a file
pathname.  Additional arguments are handed to the command unchanged.

If @var{source} does not exist, or if it is not a file, an error is
generated and the return value is 1.  If @var{target} exists an error is
generated and the return value is 1.
@end defun


@defun mbfl_file_copy_to_directory @var{source} @var{target} ?@dots{}?
Copy the @var{source}, a file pathname, into the directory @var{target}.
Additional arguments are handed to the command unchanged.

If @var{source} does not exist, or if it is not a file, an error is
generated and the return value is 1.  If @var{target} does not exist or
it is not a directory: an error message is generated and the return
value is 1.
@end defun

@c page
@node file commands move
@subsection Moving files


@cindex Moving files
@cindex Files, moving
@CindexCommand{mv}


@defun mbfl_file_enable_move
Declare the commands required to move files and directories.
@ref{program declaring, Declaring the intention to use a program}

The programs are: @command{mv}.
@end defun


@defun mbfl_file_move @var{source} @var{target} ?@dots{}?
Move the @var{source}, a file or directory, to @var{target}, a pathname.
Additional arguments are handed to the command unchanged.

If @var{source} does not exist, or if it is not readable, an error is
generated and the return value is 1.  If @var{target} exists an error is
generated and the return value is 1.
@end defun


@defun mbfl_file_move_to_directory @var{source} @var{target} ?@dots{}?
Move the @var{source}, a file or directory, into the directory
@var{target}.  Additional arguments are handed to the command unchanged.

If @var{source} does not exist, or if it is not readable, an error
message is generated and the return value is 1.  If @var{target} does
not exist or it is not a directory: an error is generated and the return
value is 1.
@end defun

@c page
@node file commands removing
@subsection Removing files and directories


@cindex Removing files
@cindex Files, removing
@CindexCommand{rm}
@CindexCommand{rmdir}


Files removal is forced: the @code{--force} option to @command{rm} is
always used.  It is responsibility of the caller to validate the
operation before invoking these functions.

Some functions test the existence of the pathname before attempting to
remove it: this is done only if test execution is disabled; if test
execution is enabled the command line is echoed to stderr to make it
easier to debug scripts.


@defun mbfl_file_enable_remove
Declare the commands required to remove files and directories.
@ref{program declaring, Declaring the intention to use a program}

The programs are: @command{rm}, @command{rmdir}.
@end defun


@defun mbfl_file_remove @var{pathname}
Remove @var{pathname}, no matter if it is a file or directory.  If it is
a directory: descend the sub-levels removing all of them.  If an error
occurs return 1.
@end defun


@defun mbfl_file_remove_file @var{pathname}
Remove the file or symbolic link selected by @var{pathname}.  If the
file does not exist or it is not a file or an error occurs: return 1.
@end defun


@defun mbfl_file_remove_symlink @var{pathname}
Remove the symbolic link selected by @var{pathname}.  If the link does
not exist or it is not a symbolic link or an error occurs: return 1.
@end defun


@defun mbfl_file_remove_file_or_symlink @var{pathname}
Remove the file or symbolic link selected by @var{pathname}.  If the
file does not exist or it is not a file or an error occurs: return 1.
@end defun


@defun mbfl_file_remove_directory @var{pathname}
Remove the directory selected by @var{pathname}.  If the directory does
not exist or an error occurs: return 1.
@end defun


@defun mbfl_file_remove_directory_silently @var{pathname}
Like @func{mbfl_file_remove_directory}, but do not print messages if
the directory is not empty.
@end defun

@c page
@node file commands symlink
@subsection Creating symbolic links


@cindex Files, symbolic links
@cindex Symbolic links
@cindex Creating symbolic links
@CindexCommand{ln}


@defun mbfl_file_enable_symlink
Declare the commands required to create symbolic links.  @ref{program
declaring, Declaring the intention to use a program}

The programs are: @command{ln}.
@end defun


@defun mbfl_file_symlink @var{original_name} @var{symlink_name}
Create a symbolic link.
@end defun


@defun mbfl_exec_ln @var{original_name} @var{link_name} [@var{opt} @dots{}]
Raw executor for @command{ln}.  The mandatory arguments @var{original_name} and @var{link_name} are
put on the command line of @command{ln} as arguments.  The optional arguments @var{opt} are added,
as options, to the command line of @command{ln}.
@end defun

@c page
@node file commands realpath
@subsection Normalising pathnames


@cindex Files, normalisation
@CindexCommand{realpath}


@defun mbfl_file_enable_realpath
Declare the commands required to normalise pathnames.  @ref{program declaring, Declaring the
intention to use a program}

The programs are: @command{realpath}.
@end defun


@defun mbfl_file_realpath @var{pathname} [@var{opt} @dots{}]
@defunx mbfl_file_realpath_var @var{_RV} @var{pathname} [@var{opt} @dots{}]
Normalise the given @var{pathname} using @command{realpath} and print the result to stdout.  The
optional arguments @var{opt} are added, as options, to the command line of @command{realpath}.

@DocVarVariant{}
@end defun

@c page
@node file commands tar
@subsection Manipulating tar archives


@cindex @command{tar} archives
@cindex Creating tar archives
@cindex Archives, @command{tar}
@CindexCommand{tar}


Remember that when we execute a script with the @option{--test} option:
the external commands are not executed: a command line is echoed to
stdout.  It is recommended to use this mode to fine tune the command line
options required by @command{tar}.


@defun mbfl_file_enable_tar
Declare the @command{tar} command.  @ref{program declaring, Declaring
the intention to use a program}
@end defun


@defun mbfl_exec_tar [@var{opt} @dots{}]
@defunx mbfl_tar_exec @var{arg}  @dots{}
Execute @command{tar} with whatever arguments are used.  Return the return code of @command{tar}.
@end defun


@defun mbfl_tar_create_to_stdout @var{directory} ?...?
Create an archive and send it to stdout.  The root of the archive is the
@var{directory}.  Files are selected with the @code{.}  pattern.
@command{tar} flags may be appended to the invocation to this function.
In case of error return 1.
@end defun


@defun mbfl_tar_extract_from_stdin @var{directory} ?...?
Read an archive from stdin and extract it under @var{directory}.
@command{tar} flags may be appended to the invocation to this function.
In case of error return 1.
@end defun


@defun mbfl_tar_extract_from_file @var{directory} @var{archive} ?...?
Read an archive from a file and extract it under @var{directory}.
@command{tar} flags may be appended to the invocation to this function.
In case of error return 1.
@end defun


@defun mbfl_tar_create_to_file @var{directory} @var{archive} ?...?
Create an archive named @var{archive} holding the contents of
@var{directory}.  Before creating the archive, the process changes the
current directory to @var{directory} and selects the files with the
pattern @code{.}.  @command{tar} flags may be appended to the invocation
to this function.  In case of error return 1.
@end defun


@defun mbfl_tar_archive_directory_to_file @var{directory} @var{archive} ?...?
Like @func{mbfl_tar_create_to_file} but archive all the contents of
@var{directory}, including the directory itself (not its parents).
@end defun


@defun mbfl_tar_list @var{archive} ?...?
Print to stdout the list of files in @var{archive}.  @command{tar} flags
may be appended to the invocation to this function.  In case of error
return 1.
@end defun

@c page
@node file commands perms
@subsection Set/get file permissions


@cindex Files, permissions
@cindex Getting file permissions
@cindex Permissions of files
@CindexCommand{chmod}


@defun mbfl_file_enable_permissions
Declare the intention to use the programs required to get/set file permissions.  @ref{program
declaring, Declaring the intention to use a program}

The programs are: @command{stat}, @command{chmod}.
@end defun


@defun mbfl_file_get_permissions @var{pathname}
@defunx mbfl_file_get_permissions_var @var{_RV} @var{pathname}
Print the access permissions for @var{pathname}, in octal format.

@DocVarVariant{}

@example
mbfl_file_get_permissions /bin/ls       @print{} 0755

mbfl_local_varref(PERMS)
mbfl_file_get_permissions_var mbfl_datavar(PERMS) /bin/ls
"$PERMS" @result{} 0755
@end example
@end defun


To set permissions one may request the use of @command{sudo}: just request a user before invoking
the following function.  @ref{program executing, Executing a program}


@defun mbfl_file_set_permissions @var{mode} @var{pathname}
Set the access permissions for @var{pathname}; @var{mode} must be in a form accepted by
@command{chmod}.
@end defun

@c page
@node file commands owner
@subsection Setting file owner and group


@cindex Files, owner and group
@cindex Owner of of files
@cindex Group of of files
@CindexCommand{chown}
@CindexCommand{chgrp}


@defun mbfl_file_enable_owner_and_group
Declare the intention to use the programs required to change file owner and group.  @ref{program
declaring, Declaring the intention to use a program}

The programs are: @command{chown}, @command{chgrp}, @command{stat}.
@end defun


To change the file owner and group one may request the use of @command{sudo}: just request a user
before invoking the following function.  @ref{program executing, Executing a program}


@defun mbfl_file_set_owner @var{owner} @var{pathname} [@var{opt} @dots{}]
Change the file owner for @var{pathname}; @var{owner} must be in a form accepted by @command{chown}.
The optional arguments @var{opt} are handed to @command{chown} as options.
@end defun


@defun mbfl_file_set_group @var{group} @var{pathname} [@var{opt} @dots{}]
Change the file group for @var{pathname}; @var{group} must be in a form accepted by @command{chgrp}.
The optional arguments @var{opt} are handed to @command{chgrp} as options.
@end defun


@defun mbfl_file_get_owner @var{pathname}
@defunx mbfl_file_get_owner_var @var{_RV} @var{pathname}
Print the owner of the file as symbolic name.

@DocVarVariant{}
@end defun


@defun mbfl_file_get_group @var{pathname}
@defunx mbfl_file_get_group_var @var{_RV} @var{pathname}
Print the group of the file as symbolic name.

@DocVarVariant{}
@end defun


@defun mbfl_exec_chown @var{pathname} [@var{opt} @dots{}]
Raw interface to @command{chown}.  The mandatory argument @var{pathname} is handed to
@command{chown} as argument.  The optional arguments @var{opt} are handed to @command{chown} as
options.
@end defun


@defun mbfl_exec_chgrp @var{pathname} [@var{opt} @dots{}]
Raw interface to @command{chgrp}.  The mandatory argument @var{pathname} is handed to
@command{chgrp} as argument.  The optional arguments @var{opt} are handed to @command{chgrp} as
options.
@end defun

@c page
@node file commands compress
@subsection Compressing files


@cindex Files, compression
@cindex Compressing files
@CindexCommand{gzip}
@CindexCommand{bzip2}


This module has an internal state, stored in global variables.  The state holds informations about:

@itemize
@item
The selected compression external program (default: @command{gzip}).

@item
Whether the program should keep the original files or replace them with the (de)compressed version
(default: do not keep).

@item
Whether the output must be sent to standard output or a file (default: send to a file).
@end itemize

@c ------------------------------------------------------------

@subsubheading Initialisation

@defun mbfl_file_enable_compress
Declare the programs required to compress a file.  @ref{program declaring, Declaring the intention
to use a program}

The programs are: @command{gzip}, @command{bzip2}, @command{lzip}, @command{xz}.
@end defun

@c ------------------------------------------------------------

@subsubheading Configuration

The selection will affect all the future invocations of the compression/decompression functions.


@defun mbfl_file_compress_select_gzip
@defunx mbfl_file_compress_select_bzip
@defunx mbfl_file_compress_select_bzip2
@defunx mbfl_file_compress_select_lzip
@defunx mbfl_file_compress_select_xz
Select a compressor program.
@end defun


@defun mbfl_file_compress_keep
@defunx mbfl_file_compress_nokeep
Select whether the compress program should keep the original file or not.
@end defun


@defun mbfl_file_compress_select_stdout
@defunx mbfl_file_compress_select_nostdout
Select if the output must be sent to stdout or a file.  This takes precedence over the keep/no keep
configuration: if the output is sent to stdout the original file is kept.
@end defun

@c ------------------------------------------------------------

@subsubheading Actions

Additional arguments to the selected compressor may be appended to the invocation of the following
functions and are handed to the compressor unchanged.


@defun mbfl_file_compress @var{PATHNAME} [@var{opt} @dots{}]
Compress @var{PATHNAME}, a file pathname, with the currently selected compressor program.
@end defun


@defun mbfl_file_decompress @var{PATHNAME} [@var{opt} @dots{}]
Decompress @var{PATHNAME}, a file pathname, with the currently selected compressor program.
@end defun

@c page
@node file testing
@section Testing file existence and the like


@cindex Files, existence and permissions
@cindex Existence of files


When using the following functions: the optional argument
@var{PRINT_ERROR} will cause an error message to be printed with
@func{mbfl_message_error} if the test fails; the argument value must be
@code{print_error}.

@c ------------------------------------------------------------

@subsubheading File functions

@defun mbfl_file_exists @var{pathname}
Return true if @var{pathname} exists.
@end defun

@defun mbfl_file_is_file @var{filename}
@defunx mbfl_file_is_file @var{filename} @var{PRINT_ERROR}
Return true if @var{filename} is not the empty string and is a file.
@end defun

@defun mbfl_file_is_readable @var{filename}
@defunx mbfl_file_is_readable @var{filename} @var{PRINT_ERROR}
Return true if @var{filename} is not the empty string, is a file and is
readable.
@end defun

@defun mbfl_file_is_writable @var{filename}
@defunx mbfl_file_is_writable @var{filename} @var{PRINT_ERROR}
Return true if @var{filename} is not the empty string, is a file and is
writable.
@end defun

@defun mbfl_file_is_executable @var{filename}
@defunx mbfl_file_is_executable @var{filename} @var{PRINT_ERROR}
Return true if @var{filename} is not the empty string, is a file and is
executable.
@end defun

@c ------------------------------------------------------------

@subsubheading Directory functions

@defun mbfl_file_is_directory @var{directory}
@defunx mbfl_file_is_directory @var{directory} @var{PRINT_ERROR}
Return true if @var{directory} is not the empty string and is a
directory.
@end defun

@defun mbfl_file_directory_is_readable @var{directory}
@defunx mbfl_file_directory_is_readable @var{directory} @var{PRINT_ERROR}
Return true if @var{directory} is not the empty string, is a directory
and is readable.
@end defun

@defun mbfl_file_directory_is_writable @var{directory}
@defunx mbfl_file_directory_is_writable @var{directory} @var{PRINT_ERROR}
Return true if @var{directory} is not the empty string, is a directory
and is writable.
@end defun

@defun mbfl_file_directory_is_executable @var{directory}
@defunx mbfl_file_directory_is_executable @var{directory} @var{PRINT_ERROR}
Return true if @var{directory} is not the empty string, is a directory
and is executable.
@end defun

@defun mbfl_file_directory_validate_writability @var{directory} @var{description}
Test directory existence and writability; return true if the directory
exists and is writable.  If the condition is not met: Print informative
messages using @var{description} to refer to the directory.
@end defun

@c ------------------------------------------------------------

@subsubheading Symbolic link functions

@defun mbfl_file_is_symlink @var{pathname}
@defunx mbfl_file_is_symlink @var{pathname} @var{PRINT_ERROR}
Return true if @var{pathname} is not the empty string and is a symbolic
link.
@end defun

@c ------------------------------------------------------------

@subsubheading Generic pathname functions

@defun mbfl_file_pathname_is_readable @var{pathname}
@defunx mbfl_file_pathname_is_readable @var{pathname} @var{PRINT_ERROR}
Return true if @var{pathname} is not the empty string and is readable.
@end defun

@defun mbfl_file_pathname_is_writable @var{pathname}
@defunx mbfl_file_pathname_is_writable @var{pathname} @var{PRINT_ERROR}
Return true if @var{pathname} is not the empty string and is writable.
@end defun

@defun mbfl_file_pathname_is_executable @var{pathname}
@defunx mbfl_file_pathname_is_executable @var{pathname} @var{PRINT_ERROR}
Return true if @var{pathname} is not the empty string and is
executable.
@end defun

@c page
@node file read and write
@section Reading and writing files with privileges


@cindex Files, reading and writing
@cindex Reading and writing files
@cindex Writing and reading files


The following functions perform actions that can normally be done
directly with the redirection operators of Bash:

@example
# write to a file
printf '%s' "$string" >"$filename"

# append to a file
printf '%s' "$string" >>"$filename"

# read a file, print contents
printf '%s' "$(<$filename)"
@end example

The functions act differently in that they spawn a @command{bash}
subprocess, by invoking @func{mbfl_program_exec}, and let it do the
operation; this allows us to request the usage of @command{sudo} and so
to read and write files with modified privileges, but only for the time
needed to do the operation, not for the whole script.


@defun mbfl_file_write @var{string} @var{filename}
Write @var{string} to @var{filename}, eventually creating it or
overwriting old contents.
@end defun


@defun mbfl_file_append @var{string} @var{filename}
Append @var{string} to @var{filename}, eventually creating it.
@end defun


@defun mbfl_file_read @var{filename}
Read and print @strong{all} the contents of @var{filename}.
@end defun

@c page
@node file misc
@section Miscellaneous commands


@cindex Changing directory
@cindex Directory, changing
@cindex Files, changing directory


@defun mbfl_change_directory @var{dirname} ?...?
Change directory to @var{dirname}.  Optional flags to @command{cd} may
be appended.
@end defun


@defun mbfl_cd @var{dirname} ?...?
Wrapper for @func{mbfl_change_directory}.  If verbose mode is on:
print a message.
@end defun

@c page
@node fd
@chapter Handling file descriptors


@menu
* fd open::                     Opening file descriptors.
* fd close::                    Closing file descriptors.
* fd dup::                      Duplicating file descriptors.
* fd move::                     Moving file descriptors.
@end menu

@c page
@node fd open
@section Opening file descriptors


@defun mbfl_fd_open_input @var{FD} @var{FILE}
Open the file descriptor @var{FD} to read from @var{FILE}.  When successful: return true; otherwise
return false.

@strong{NOTE} When @var{FILE} is a FIFO: we need to call @func{mbfl_fd_open_input_output}, not this
function.
@end defun


@defun mbfl_fd_open_output @var{FD} @var{FILE}
Open the file descriptor @var{FD} to write to @var{FILE}.  When successful: return true; otherwise
return false.
@end defun


@defun mbfl_fd_open_input_output @var{FD} @var{FILE}
Open the file descriptor @var{FD} to read from and write to @var{FILE}.  When successful: return
true; otherwise return false.
@end defun


Let's see how we can open a file for reading and writing with two file descriptors:

@example
declare TESTFILE=/path/to/file.ext
declare INFD=3 OUFD=4
declare LINE

mbfl_fd_open_output $OUFD "$TESTFILE"
echo 1234 >&$@{OUFD@}
mbfl_fd_close $OUFD

mbfl_fd_open_input  $INFD "$TESTFILE"
read -u $@{INFD@} LINE
mbfl_fd_close $INFD

echo "$LINE"
@end example

@noindent
now let's use a location to automatically close the file descriptors:

@example
declare TESTFILE=/path/to/file.ext
declare INFD=3 OUFD=4
declare LINE

mbfl_location_enter
@{
    mbfl_fd_open_output $OUFD "$TESTFILE"
    mbfl_location_handler "mbfl_fd_close $@{OUFD@}"
    echo 1234 >&$@{OUFD@}

    mbfl_fd_open_input  $INFD "$TESTFILE"
    mbfl_location_handler "mbfl_fd_close $@{INFD@}"
    read -u $@{INFD@} LINE

    echo "$LINE"
@}
mbfl_location_leave
@end example

Let's see how we can use a FIFO for reading and writing with two file descriptors:

@example
mbfl_declare_program mkfifo
mbfl_file_enable_remove

function program_mkfifo () @{
    local PATHNAME=$@{1:?@}
    shift 1
    local MKFIFO
    mbfl_program_found_var MKFIFO mkfifo || exit $?

    "$MKFIFO" --mode=0600 "$@@" "$PATHNAME"
@}

declare TESTFILE=/path/to/fifo.ext
declare INFD=3 OUFD=4
declare LINE

mbfl_location_enter
@{
    program_mkfifo "$TESTFIFO"
    mbfl_location_handler "mbfl_file_remove $@{TESTFIFO@}"

    mbfl_fd_open_input_output $INFD "$TESTFIFO"
    mbfl_location_handler "mbfl_fd_close $@{INFD@}"

    mbfl_fd_open_output $OUFD "$TESTFIFO"
    mbfl_location_handler "mbfl_fd_close $@{OUFD@}"

    echo 1234 >&$@{OUFD@}
    read -u $@{INFD@} LINE

    echo "$LINE"
@}
mbfl_location_leave
@end example

@c page
@node fd close
@section Closing file descriptors


@defun mbfl_fd_close @var{FD}
Close the file descriptor @var{FD}.
@end defun

@c page
@node fd dup
@section Duplicating file descriptors


@defun mbfl_fd_dup_input @var{SRCFD} @var{DSTFD}
@defunx mbfl_fd_dup_output @var{SRCFD} @var{DSTFD}
Duplicate the source file descriptor @var{SRCFD} to the destination file descriptor @var{DSTFD}.
@end defun


Let's see how we can use a FIFO for reading and writing with two duplicate file descriptors:

@example
mbfl_declare_program mkfifo
mbfl_file_enable_remove

function program_mkfifo () @{
    local PATHNAME=$@{1:?@}
    shift 1
    local MKFIFO
    mbfl_program_found_var MKFIFO mkfifo || exit $?

    "$MKFIFO" --mode=0600 "$@@" "$PATHNAME"
@}

declare TESTFILE=/path/to/fifo.ext
declare INFD=3 OUFD=4 DUP_INFD=5 DUP_OUFD=6
declare LINE1 LINE2 LINE3

mbfl_location_enter
@{
    program_mkfifo "$TESTFIFO"
    mbfl_location_handler "mbfl_file_remove $@{TESTFIFO@}"

    mbfl_fd_open_input_output $INFD "$TESTFIFO"
    mbfl_location_handler "mbfl_fd_close $@{INFD@}"

    mbfl_fd_open_output $OUFD "$TESTFIFO"
    mbfl_location_handler "mbfl_fd_close $@{OUFD@}"

    echo 1234 >&$@{OUFD@}
    read -u $@{INFD@} LINE1

    mbfl_location_enter
    @{
        mbfl_fd_dup_input  $INFD $DUP_INFD
        mbfl_location_handler "mbfl_fd_close $@{DUP_INFD@}"

        mbfl_fd_dup_output $OUFD $DUP_OUFD
        mbfl_location_handler "mbfl_fd_close $@{DUP_OUFD@}"

        echo 5678 >&$@{DUP_OUFD@}
        read -u $@{DUP_INFD@} LINE2
    @}
    mbfl_location_leave

    echo 90 >&$@{OUFD@}
    read -u $@{INFD@} LINE3
@}
mbfl_location_leave

echo $LINE1 $LINE2 $LINE3
@end example

@c page
@node fd move
@section Moving file descriptors


@defun mbfl_fd_move @var{SRCFD} @var{DSTFD}
Move the source file descriptor @var{SRCFD} to the destination file descriptor @var{DSTFD}.  The
source file descriptor is closed.
@end defun


Let's see how we can use a file for reading and writing with two moved file descriptors:

@example
declare TESTFILE=/path/to/file.ext
declare INFD=3 OUFD=4 DUP_INFD=5 DUP_OUFD=6
declare LINE

mbfl_location_enter
@{
    mbfl_fd_open_input_output $INFD "$TESTFILE"
    mbfl_fd_open_output       $OUFD "$TESTFILE"

    mbfl_fd_move $INFD $DUP_INFD
    mbfl_location_handler "mbfl_fd_close $@{DUP_INFD@}"

    mbfl_fd_move $OUFD $DUP_OUFD
    mbfl_location_handler "mbfl_fd_close $@{DUP_OUFD@}"

    echo 1234 >&$@{DUP_OUFD@}
    read -u $@{DUP_INFD@} LINE
@}
mbfl_location_leave

echo LINE="$LINE"
@end example

@c page
@node actions
@chapter Selecting actions to perform


The @code{actions} module allows the command line selection of different actions a script can
perform.

@menu
* actions intro::               Introduction to action trees.
* actions declare::             Declaring actions and action sets.
* actions dispatch::            Dispatching action arguments.
* actions inspect::             Inspecting action trees.
* actions completion::          Automatic generation of programmable completion script.
* actions misc::                Other functions.
@end menu

@c page
@node actions intro
@section Introduction to action trees


Traditional Unix--style command--line programs perform a single action, with behaviour variants
selected by command--line dash and double--dash options.  For example @command{ls} prints a list of
directory entries and the format of the output can be custommised with options like @option{-1} and
@option{--color}.  @mbfl{} implements this behaviour by default when the @code{actions} module is
@strong{not} used.

Other Unix--style command--line programs offer a set of possible actions and allow the executor to
select one by specifying command--line options.  For example @command{tar} acts on archive files and
it can pack, unpack, validate them along with other actions selected with by the double--dash
options @option{--create}, @option{--extract}, @option{--validate} and others.  @mbfl{} implements
this behaviour through ``action options'' provided by the @code{getopts} module; action options are
available also when using the @code{actions} module.

Other command--line programs break this Unix--style to offer action selection throuh ``action
arguments''.  For example @command{git} acts upon revision control repositories offering a big set
of actions selected with its first argument: @samp{commit}, @samp{log}, @samp{merge} and many
others; the behaviour of each ``subcommand'' can be customised with a specific set of dash and
double--dash options.  @mbfl{} implements this behaviour through the @code{actions} module.

@c ------------------------------------------------------------

@subsubheading One--level actions


The script below (@file{one-level-actions.sh}, available in the @file{doc/} directory of the source
distribution) shows how to implement one--level actions.  It implements the following behaviour:

@table @code
@item one-level-actions.sh
With no action argument: print a generic help screen and exit.

@item one-level-actions.sh one
With the action argument @code{one}: perform the action @samp{ONE}, possibly with the options
@option{-a} and @option{-b}.

@item one-level-actions.sh one -H
With the action argument @code{one} and the option @option{-H}: print the brief help screen for the
action @samp{ONE} and exit.

@item one-level-actions.sh two
With the action argument @code{two}: perform the action @samp{TWO}, possibly with the options
@option{-d} and @option{-g}.

@item one-level-actions.sh two -H
With the action argument @code{two} and the option @option{-H}: print the brief help screen for the
action @samp{TWO} and exit.

@item one-level-actions.sh help
With the action argument @code{help}: print a generic help screen and exit.  Notice how the
@samp{HELP} action function makes use of @func{mbfl_actions_fake_action_set} to print the same help
screen of the main action.
@end table

@smallexample
@verbatiminclude one-level-actions.sh
@end smallexample

@c ------------------------------------------------------------

@subsubheading Two--levels actions


The script below (@file{two-levels-actions.sh}, available in the @file{doc/} directory of the source
distribution) shows how to implement two--levels actions.  It implements the following behaviour:

@table @code
@item two-levels-actions.sh
With no action argument: print a generic help screen and exit.

@item two-levels-actions.sh help
With the action argument @code{help}: print a generic help screen and exit.  Notice how the
@samp{HELP} action function makes use of @func{mbfl_actions_fake_action_set} to print the same help
screen of the main action.

@item two-levels-actions.sh one
With the non--leaf action argument @code{one}: print the help screen of the action @samp{ONE}.

@item two-levels-actions.sh two
With the non--leaf action argument @code{two}: print the help screen of the action @samp{TWO}.

@item two-levels-actions.sh one red
With the action arguments @code{one red}: perform the action @samp{RED}, possibly with the options
@option{-a} and @option{-b}.

@item two-levels-actions.sh one red -H
With the action argument @code{one red} and the option @option{-H}: print the brief help screen for
the action @samp{RED} and exit.

@item two-levels-actions.sh one blue
With the action arguments @code{one blue}: perform the action @samp{BLUE}, possibly with the options
@option{-a} and @option{-b}.

@item two-levels-actions.sh one blue -H
With the action argument @code{one blue} and the option @option{-H}: print the brief help screen for
the action @samp{BLUE} and exit.

@item two-levels-actions.sh two green
With the action arguments @code{two green}: perform the action @samp{GREEN}, possibly with the
options @option{-d} and @option{-g}.

@item two-levels-actions.sh two green -H
With the action argument @code{two green} and the option @option{-H}: print the brief help screen
for the action @samp{GREEN} exit.

@item two-levels-actions.sh two cyan
With the action arguments @code{two cyan}: perform the action @samp{CYAN}, possibly with the options
@option{-d} and @option{-g}.

@item two-levels-actions.sh two cyan -H
With the action argument @code{two cyan} and the option @option{-H}: print the brief help screen for
the action @samp{CYAN} exit.
@end table

@noindent
notice how the action functions of the non--leaf nodes print the help screen describing the
subactions.

@smallexample
@verbatiminclude two-levels-actions.sh
@end smallexample

@c page
@node actions declare
@section Declaring actions and action sets


The structure of the action sets tree is stored in global variables defined by default; we should
never try to access such variables directly.


@defun mbfl_declare_action_set @var{action-set}
Declare a new action set.  @var{action-set} must be a string satisfying @func{mbfl_string_is_name}
and representing the identifier of the action set.  It is an error to declare the same action set
twice.
@end defun


@defun mbfl_declare_action @var{action-set} @var{keyword} @var{subset} @var{identifier} @var{description}
Declare a new action belonging to an action set.  The arguments are:

@table @var
@item action-set
A string representing the name of the action set this action belongs to.  The action set must have
been previously declared with a call to @func{mbfl_declare_action_set}.

@item keyword
A unique string (in this script) satisfying @func{mbfl_string_is_name} and identifying this action.
The ``main'', ``before parsing options'' and ``after parsing options'' function names associated to
this action are built as:

@example
script_action_$@var{keyword}
script_before_parsing_options_$@var{keyword}
script_after_parsing_options_$@var{keyword}
@end example

@item subset
If @var{subset} is the string @code{NONE} it means that this action is a leaf and it implements a
script action; else @var{subset} must be the identifier of an action set subordinate to
@var{action-set}: this function is recursively called to process it.  The subordinate action set
must have been previously declared with a call to @func{mbfl_declare_action_set}.

@item identifier
A string satisfying @func{mbfl_string_is_identifier} and representing the argument on the command
line used to select this action.  This string must be unique for this @var{action-set}.

@item description
A string describing this action, to be used to compose the help screen.
@end table
@end defun

@c page
@node actions dispatch
@section Dispatching action arguments


@defun mbfl_actions_dispatch @var{action-set}
Parse the next command line argument and select accordingly the functions for the main module making
use of the functions:

@example
mbfl_main_set_before_parsing_options
mbfl_main_set_after_parsing_options
mbfl_main_set_main
@end example

@noindent
If successful return true, else return false and print an error message to @stderr{}.  This
function recursively calls itself, parsing command line arguments and traversing the tree of
declared actions.

@var{action-set} must be the name of an action set previously declared with
@func{mbfl_declare_action_set}.  It is an error if this function is called with an @var{action-set}
name specifying a non--existent action set.  If there are no command line arguments left upon
entering this function: the values previously selected with the functions @code{mbfl_main_set_*} are
silently accepted.

The function @func{mbfl_main} verifies that the action set @code{MAIN} exists and, if it does, it
calls this function with argument @code{MAIN}.

Upon entering this function, the following global variables must exist and have the specified
values:

@table @code
@item ARGV1
An array containing all the command line arguments.

@item ARGC1
A non--negative integer representing the number of values in
@code{ARGV1}.

@item ARG1ST
A non--negative integer representing the index in @code{ARGV1} of the next argument to be processed.
@end table

@noindent
all these variables are created by default by the @mbfl{} @code{main} module, @ref{main variables,
Command line arguments variables}.
@end defun

@c page
@node actions inspect
@section Inspecting action trees


@defun mbfl_actions_set_exists @var{action-set}
Return true if @var{action-set} is the identifier of an existent action set; else return false.
@end defun


@defun mbfl_actions_set_exists_or_none @var{action-set}
Return true if @var{action-set} is the identifier of an existent action set or it is the string
@code{NONE}; else return false.
@end defun

@c page
@node actions completion
@section Automatic generation of programmable completion script


It is almost certain that we are running @gnu{} Bash in an environment with support for @gnu{}
Readline completion of the command line; it is quite useful to provide programmable completion for
the scripts we write.  When a script has a tree hierarchy of actions it is useful to automatically
generate the completion facilities for the action commands; this is what the functions documented
here are for.

@menu
* actions completion api::          Application interface to completion script generation.
* actions completion declaration::  How to declare automatic script generation.
* actions completion script::       How to use the generated script.
@end menu

@c page
@node actions completion api
@subsection Application interface to completion script generation


@defun mbfl_actions_completion_print_script @var{NAMESPACE} @var{PROGNAME}
@defunx mbfl_actions_completion_print_script @var{NAMESPACE} @var{PROGNAME} @var{SCRIPT_TYPE}
Print to the standard output a @gnu{} Bash script, the @dfn{completions--script}, to be evaluated in
a terminal running Bash, to implement automatic completion of the command line for a
@dfn{subject--script}.

The argument @var{NAMESPACE} must be a string representing a namespace for function names; functions
in the completions--script have names starting with this string.

The argument @var{PROGNAME} must be a string representing the name of the subject--script for which
the completions--script is generated.  It is usually the value of the service variable
@env{script_PROGNAME}, @ref{script_PROGNAME} for details.

The optional argument @var{SCRIPT_TYPE} selects the type of script to output:

@table @code
@item main
Output the full completions--script for a subject--script; this is the default.  When sourced: such
completions--script will provide full completions for the subject--script.  The completions--script
is composed by a call to the Bash built--in @command{complete} followed by a number of functions.

@item subscript
Output only the completion functions for the actions of the subject--script; do @strong{not} output
a call to the Bash built--in @command{complete}.  This completions--script type is meant to be used
for subject--scripts that are not directly invoked by the user; rather they are subordinate scripts
invoked by a main script: the actions of the subordinate script are ``plugged'' in the actions of
the main script as a subtree.
@end table
@end defun

@c page
@node actions completion declaration
@subsection How to declare automatic script generation


When using the actions module we should add ``standard'' subcommands to access the automatic script
generation.  We can do it by plugging in the following actions declarations:

@example
mbfl_declare_action_set HELP
mbfl_declare_action HELP HELP_USAGE NONE                        \
    usage                                                       \
    'Print the help screen and exit.'
mbfl_declare_action HELP HELP_PRINT_COMPLETIONS_SCRIPT NONE     \
    print-completions-script                                    \
    'Print the completions script for this program.'

mbfl_declare_action_set MAIN
mbfl_declare_action MAIN HELP HELP                              \
    help                                                        \
    'Help the user of this script.'
@end example

@noindent
and add the following action functions:

@example
declare -r COMPLETIONS_SCRIPT_NAMESPACE='p-mbfl-examples'

function script_before_parsing_options_HELP () @{
    script_USAGE="usage: $@{script_PROGNAME@} help [action] [options]"
    script_DESCRIPTION='Help the user of this program.'
@}
function script_action_HELP () @{
    # By faking the  selection of the MAIN action: we  cause "mbfl_main_print_usage_screen_brief" to
    # print the main usage screen.
    mbfl_actions_fake_action_set MAIN
    mbfl_main_print_usage_screen_brief
@}

function script_before_parsing_options_HELP_USAGE () @{
    script_USAGE="usage: $@{script_PROGNAME@} help usage [options]"
    script_DESCRIPTION='Print the usage screen and exit.'
@}
function script_action_HELP_USAGE () @{
    if mbfl_wrong_num_args 0 $ARGC
    then
        # By faking the selection of  the MAIN action: we cause "mbfl_main_print_usage_screen_brief"
        # to print the main usage screen.
        mbfl_actions_fake_action_set MAIN
        mbfl_main_print_usage_screen_brief
    else
        mbfl_main_print_usage_screen_brief
        exit_because_wrong_num_args
    fi
@}

function script_before_parsing_options_HELP_PRINT_COMPLETIONS_SCRIPT () @{
    script_PRINT_COMPLETIONS="usage: $@{script_PROGNAME@} help print-completions-script [options]"
    script_DESCRIPTION='Print the command-line completions script and exit.'
@}
function script_action_HELP_PRINT_COMPLETIONS_SCRIPT () @{
    if mbfl_wrong_num_args 0 $ARGC
    then mbfl_actions_completion_print_script "$COMPLETIONS_SCRIPT_NAMESPACE" "$script_PROGNAME"
    else
        mbfl_main_print_usage_screen_brief
        exit_because_wrong_num_args
    fi
@}
@end example

@c page
@node actions completion script
@subsection How to use the generated script


We can store the generated script in a file to be sourced upon launching the terminal, or we can
evaluate it with the command:

@example
eval "$(my-script help print-completions-script)"
@end example

For a script named @command{my-script}, it is a good idea to install a file with pathname:

@example
/etc/bash_completions.d/my-script.bash
@end example

@noindent
with contents:

@example
# my-script.bash --
#
# Completions for the "my-script" script.

eval "$(my-script help print-completions-script)"

### end of file
@end example

@c page
@node actions misc
@section Other functions


@defun mbfl_actions_fake_action_set @var{action-set}
Mutate @mbfl{}'s state to mimic the selection of an action set.  It is an error if @var{action-set}
is not the name of an existent action set.  This function should be used with care.
@end defun


@defun mbfl_actions_print_usage_screen
If an action set has been selected and its name is not @samp{NONE}: print the help screen
documenting the actions available in the set.
@end defun


@defun exit_because_invalid_action_declaration
@defunx return_because_invalid_action_declaration
Exit or return with code @code{96}.
@end defun


@defun exit_because_invalid_action_set
@defunx return_because_invalid_action_set
Exit or return with code @code{97}.
@end defun


@defun exit_because_invalid_action_argument
@defunx return_because_invalid_action_argument
Exit or return with code @code{95}
@end defun


@defun exit_because_missing_action_function
@defunx return_because_missing_action_function
Exit or return with code @code{94}.
@end defun

@c page
@node getopts
@chapter Parsing command line options


@cindex Parsing command line options
@cindex Command line options, parsing
@cindex Program command line options, parsing


The @code{getopts} module defines a set of procedures to be used to
process command line arguments with the following format:

@table @code
@item -a
Brief option @code{a} with no value.

@item -a123
Brief option @code{a} with value @code{123}.

@item --bianco
Long option @code{bianco} with no value.

@item --color=bianco
Long option @code{color} with value @code{bianco}.
@end table

@menu
* getopts arguments::           Arguments.
* getopts usage::               Using the module.
* getopts options::             Predefined options.
* getopts interface::           Interface functions.
@end menu

@c page
@node getopts arguments
@section Arguments


The @code{main} module contains, at the root level, a block of code like
the following:

@example
declare -i ARGC=0 ARGC1=0 ARG1ST=0
declare -a ARGV ARGV1

for ((ARGC1=0; $# > 0; ++ARGC1))
do
    ARGV1[$ARGC1]=$1
    shift
done
@end example

@noindent
this block is executed when @mbfl{} (and the script that loads it) is
evaluated.  Its purpose is to store command line arguments in the global
array @code{ARGV1} and the number of command line arguments in the
global variable @code{ARGC1}; the variable @code{ARG1ST} references the
next argument in @code{ARGV1} that must be processed.

The global array @code{ARGV} and the global variable @code{ARGC} are
predefined and should be used by the @code{mbfl_getopts_*} functions to
store non--option command line arguments.  Processing performed by the
@code{getopts} module must happen after processing performed by the
@code{actions} module.

Example:

@example
$ script --gulp wo --gasp=123 wa
@end example

@noindent
if the script makes use of @mbfl{}, the strings @code{wo} and @code{wa}
will go into @code{ARGV} and @code{ARGC} will be set to 2.  The option
arguments are processed and some action is performed to register them.

We can access the non--option arguments with the following code:

@example
for ((i=0; $i < $ARGC; ++i))
do
    # do something with $@{ARGV[$i]@}
done
@end example

When using the @code{actions} module: the first arguments can be
interpreted as special values that select an action to be performed by
the script; in such case the first argument is removed from the
@code{ARGV} array, so that processing the other arguments is not
affected.  @ref{actions intro, Introduction to action trees}.

@c page
@node getopts usage
@section Using the module


To use this module we have to declare a set of script options with the
function @func{mbfl_declare_option}.  Options declarations should be
done at the beginning of the script, before doing anything else, or in
the ``before parsing options'' functions.

In the main block of the script, options are parsed by invoking
@func{mbfl_getopts_parse}: this function will update global variables
and invoke a script function for each option on the command line.  It
can also select a function to be invoked as the main action of the
script.

@c ------------------------------------------------------------

@subsubheading Option with no argument

Example of option declaration:

@example
mbfl_declare_option ALPHA no a alpha noarg "enable alpha option"
@end example

@noindent
this code declares an option with no argument having properties:

@itemize
@item
Global variable @code{script_option_ALPHA}, which will be set to
@code{no} by default and to @code{yes} if the option is used.

@item
Brief switch @option{-a}.

@item
Long switch @option{--alpha}.

@item
Description @code{enable alpha option}, to be shown in the usage help
screen.
@end itemize

If the option is used: the function @code{script_option_update_alpha} is invoked (if it exists) with
no arguments, after the variable @code{script_option_ALPHA} has been set to @code{yes}; in the
function name: @code{alpha} is the lower case variant of the keyword @code{ALPHA}.  Valid option
uses are:

@example
$ script.sh -a
$ script.sh --alpha
@end example

@c ------------------------------------------------------------

@subsubheading Option with argument

Example of option declaration:

@example
mbfl_declare_option BETA 123 b beta witharg "select beta value"
@end example

@noindent
this code declares an option with argument having properties:

@itemize
@item
Global variable @code{script_option_BETA}, which will be set to
@code{123} by default and to the value selected on the command line if
the option is used.

@item
Brief switch @option{-b}.

@item
Long switch @option{--beta}.

@item
Description @code{select beta value}, to be shown in the usage output.
@end itemize

If the option is used: the function @code{script_option_update_beta} is invoked (if it exists) with
no arguments, after the variable @code{script_option_BETA} has been set to the selected value; in
the function name: @code{beta} is the lower case variant of the keyword @code{BETA}.  Valid option
uses are:

@example
$ script.sh -b456
$ script.sh --beta=456
@end example

@noindent
it is an error to use the switch @option{-b} or  @option{--beta} with
no argument (that is: with an empty string as argument).

@c ------------------------------------------------------------

@subsubheading Action options

A special option example:

@example
mbfl_declare_option ACTION_GAMMA \
   no g gamma noarg "do gamma action"
mbfl_declare_option ACTION_DELTA \
   yes d delta noarg "do delta action"
@end example

@noindent
this code declares two options with no arguments; the difference from
the other declarations is that the keywords are prefixed with
@code{ACTION_}: this prefix is recognised by the module and causes, if
the option is used on the command line, the following code to be
evaluated at arguments parsing time:

@example
mbfl_main_set_main script_action_gamma
@end example

@noindent
or:

@example
mbfl_main_set_main script_action_delta
@end example

@noindent
where the argument @code{script_action_gamma} is built by prefixing the
lower case version of the keyword with @code{script_}.  The code selects
a function as main function for the script.  @ref{main function, Driving
script execution}.

Additionally, if the default value is @code{yes}: the main function is
selected at declaration time (that is by @func{mbfl_declare_option});
this is useful to declare an action option and select automatically the
action function.  In the example: the function
@func{script_action_delta} is selected as main action function.

It is an error to declare a keyword prefixed with @code{ACTION_} with an
option with argument (@code{witharg} as argument to
@func{mbfl_declare_option}).

@c page
@node getopts options
@section Predefined options


A set of predefined options is recognised by the library and not handed
to the user defined functions.

@table @option
@item --tmpdir=DIR
@cindex @option{--tmpdir}, predefined option
@cindex Predefined option @option{--tmpdir}
Selects a directory for temporary files.  The default value is the one in
the environment variable @env{TMPDIR}, or @file{/tmp/$USER} if that
variable is not set.  The value is stored in the variable
@code{mbfl_option_TMPDIR}.

@item --encoded-args
@cindex @option{--encoded-args}, predefined option
@cindex Predefined option @option{--encoded-args}
Signals to the library that the non--option arguments and the option
values are encoded in hexadecimal strings.  Encoding is useful to avoid
quoting problems when invoking a script from another one.

If this option is used: the values are decoded by
@func{mbfl_getopts_parse} before storing them in the @code{ARGV}
array and before being stored in the option's specific global variables.

@item -v
@itemx --verbose
@cindex @option{-v}, predefined option
@cindex Predefined option @option{-v}
@cindex @option{--verbose}, predefined option
@cindex Predefined option @option{--verbose}
Turns on verbose messages.  If this option is used: The function
@func{mbfl_option_verbose} returns true.  @ref{message, Printing
messages to the console}.

@item --silent
@cindex @option{--silent}, predefined option
@cindex Predefined option @option{--silent}
Turns off verbose messages.  If this option is used: The function
@func{mbfl_option_verbose} returns false.

@item --verbose-program
@cindex @option{--verbose-program}, predefined option
@cindex Predefined option @option{--verbose-program}
If used: The @option{--verbose} option is added to the command line of
external programs that support it.  The function
@func{mbfl_option_verbose_program} returns true or false depending on
the state of this option.

@item --show-program
@itemx --show-programs
@cindex @option{--show-program}, predefined option
@cindex Predefined option @option{--show-program}
@cindex @option{--show-programs}, predefined option
@cindex Predefined option @option{--show-programs}
Prints the command line of executed external programs.

@item --debug
@cindex @option{--debug}, predefined option
@cindex Predefined option @option{--debug}
Turns on debugging messages.  Automatically turns on verbose messages
and program showing.  @ref{message, Printing messages to the console}.

@item --test
@cindex @option{--test}, predefined option
@cindex Predefined option @option{--test}
Turns on test execution.  @ref{program testing, Testing a script and
external programs}.

@item --null
@cindex @option{--null}, predefined option
@cindex Predefined option @option{--null}
Signals to the script that it has to use the null character to separate
values, instead of the common newline.  The global variable
@code{mbfl_option_NULL} is set to @code{yes}.

@item -f
@itemx --force
@cindex @option{-f}, predefined option
@cindex Predefined option @option{-f}
@cindex @option{--force}, predefined option
@cindex Predefined option @option{--force}
Signals to the script that it does @strong{not} have to query the user
before doing dangerous operations, like overwriting files.  The global
variable @code{mbfl_option_INTERACTIVE} is set to @code{no}.

@item -i
@itemx --interactive
@cindex @option{-i}, predefined option
@cindex Predefined option @option{-i}
@cindex @option{--interactive}, predefined option
@cindex Predefined option @option{--interactive}
Signals to the script that it @strong{does} have to query the user
before doing dangerous operations, like overwriting files.  The global
variable @code{mbfl_option_INTERACTIVE} is set to @code{yes}.

@item --validate-programs
@cindex @option{--validate-programs}, predefined option
@cindex Predefined option @option{--validate-programs}
Validates the existence of all the programs needed by the script; then
exits.  The exit code is zero if all the programs were found, one
otherwise.

@item --list-exit-codes
@cindex @option{--list-exit-codes}, predefined option
@cindex Predefined option @option{--list-exit-codes}
Prints a list of numerical exit codes and their associated names, as
declared in the script.  @ref{main exit, Declaring exit codes}.

@item --print-exit-code=NAME
@cindex @option{--print-exit-code}, predefined option
@cindex Predefined option @option{--print-exit-code}
Prints the numerical exit code associated to @code{NAME}.

@item --print-exit-code-names=CODE
@cindex @option{--print-exit-code-names}, predefined option
@cindex Predefined option @option{--print-exit-code-names}
Prints the list of names associated to the numerical exit @code{CODE}.

@item --version
@cindex @option{--version}, predefined option
@cindex Predefined option @option{--version}
Prints to the standard output of the script the contents of the global
variable @code{mbfl_message_VERSION}, then exits with code zero.  The
variable makes use of the service variables.  @ref{service variables,
Required user defined variables}.

@item --version-only
@cindex @option{--version-only}, predefined option
@cindex Predefined option @option{--version-only}
Prints to the standard output of the script the contents of the global
variable @code{script_VERSION}, then exits with code zero.  @ref{service
variables, Required user defined variables}.

@item --license
@cindex @option{--license}, predefined option
@cindex Predefined option @option{--license}
Prints to the standard output of the script the contents of one of the
global variables @code{mbfl_message_LICENSE_*}, then exits with code
zero.  The variable makes use of the service variables.  @ref{service
variables, Required user defined variables}.

@item -h
@itemx --help
@itemx --usage
@cindex @option{-h}, predefined option
@cindex Predefined option @option{-h}
@cindex @option{--help}, predefined option
@cindex Predefined option @option{--help}
@cindex @option{--usage}, predefined option
@cindex Predefined option @option{--usage}
Prints to the standard output of the script: the contents of the global
variable @code{script_USAGE}; a newline; the string @code{options:}; a
newline; an automatically generated string describing the options
declared with @func{mbfl_declare_option}; a string describing the
@mbfl{} default options; the contents of the global variable
@code{script_EXAMPLES}.  Then exits with code zero.  @ref{service
variables, Required user defined variables}.

@item -H
@itemx --brief-help
@itemx --brief-usage
@cindex @option{-H}, predefined option
@cindex Predefined option @option{-H}
@cindex @option{--brief-help}, predefined option
@cindex Predefined option @option{--brief-help}
@cindex @option{--brief-usage}, predefined option
@cindex Predefined option @option{--brief-usage}
Prints to the standard output of the script: the contents of the global
variable @code{script_USAGE}; a newline; the string @code{options:}; a
newline; an automatically generated string describing the options
declared with @func{mbfl_declare_option}.  Then exits with code zero.

The difference with @option{--help} is that predefined options and usage
examples are not displayed.

@item --print-options
@cindex @option{--print-options}, predefined option
@cindex Predefined option @option{--print-options}
Print all the long options with
@func{mbfl_getopts_print_long_switches}, then exit the script with code
zero.
@end table


The following functions may be used to set, unset and query the state of
the predefined options.


@defun mbfl_option_encoded_args
@defunx mbfl_set_option_encoded_args
@defunx mbfl_unset_option_encoded_args
Query/set/unset the encoded arguments option.

@func{mbfl_option_encoded_args} returns true if the option
@option{--encoded-args} was used on the command line.
@end defun


@defun mbfl_option_verbose
@defunx mbfl_set_option_verbose
@defunx mbfl_unset_option_verbose
Query/set/unset the verbose messages option.

@func{mbfl_option_verbose} returns true if the option
@option{--verbose} was used on the command line after all the
occurrences of @option{--silent}; it returns false if the option
@option{--silent} was used on the command line after all the occurrences
of @option{--verbose}.
@end defun


@defun mbfl_option_verbose_program
@defunx mbfl_set_option_verbose_program
@defunx mbfl_unset_option_verbose_program
Query/set/unset verbose execution for external programs.

This option, of course, is supported only for programs that are known by
@mbfl{} (like @command{rm}): if a program is executed with
@func{mbfl_program_exec}, it is responsibility of the caller to use
the option.
@end defun


@defun mbfl_option_show_program
@defunx mbfl_set_option_show_program
@defunx mbfl_unset_option_show_program
Print the command line of executed external program.  This does not
disable program execution, it just prints the command line before
executing it.
@end defun


@defun mbfl_option_test
@defunx mbfl_set_option_test
@defunx mbfl_unset_option_test
Query/set/unset the test execution option.
@end defun


@defun mbfl_option_debug
@defunx mbfl_set_option_debug
@defunx mbfl_unset_option_debug
Query/set/unset the debug messages option.
@end defun


@defun mbfl_option_null
@defunx mbfl_set_option_null
@defunx mbfl_unset_option_null
Query/set/unset the null list separator option.
@end defun


@defun mbfl_option_interactive
@defunx mbfl_set_option_interactive
@defunx mbfl_unset_option_interactive
Query/set/unset the interactive execution option.

@func{mbfl_option_interactive} returns true if the option
@option{--interactive} was used on the command line after all the
occurrences of @option{--force}; it returns false if the option
@option{--force} was used on the command line after all the occurrences
of @option{--interactive}.
@end defun


The following are special option functions.


@defun mbfl_option_test_save
Save the current state of the @samp{test} option then invokes @func{mbfl_unset_option_test}.
@end defun

@defun mbfl_option_test_restore
Restore the state of the @samp{test} option to the one before the invocation to
@func{mbfl_option_test_save}.
@end defun


@defun mbfl_option_show_program_save
Save the current state of the @samp{show_program} option then invokes
@func{mbfl_unset_option_show_program}.
@end defun

@defun mbfl_option_show_program_restore
Restore the state of the @samp{show_program} option to the one before the invocation to
@func{mbfl_option_show_program_save}.
@end defun

@c page
@node getopts interface
@section Interface functions


Every declared option should have a long switch, the brief switch can be
omitted.


@defun mbfl_declare_option @var{keyword} @var{default} @var{brief} @var{long} @var{hasarg} @var{description}
Declare a new option.  Arguments description follows.

@table @var
@item keyword
A string identifying the option; internally it is used to build a
function name and a variable name.  It is safer to limit this string to
the letters in the ranges @code{a-z}, @code{A-Z} and underscores.

@item default
The default value for the option.  For an option with argument it can be
anything; for an option with no argument: it must be @code{yes} or
@code{no}.

@item brief
The brief option selector: a single character.  It is safer to choose a single letter (lower or
upper case) in the @acronym{ASCII} standard.  This argument can be the empty string if this option
has no brief selector.

@item long
The long option selector: a string.  It is safer to choose a sequence of letters in the
@acronym{ASCII} standard, separated by underscores or dashes.  This argument can be the empty string
if this option has no long selector.

@item hasarg
Either @code{witharg} or @code{noarg}: declares if the option requires
an argument or not.

@item description
A one--line string briefly describing the option.
@end table
@end defun


@defun mbfl_getopts_parse
Parse a set of command line options.  The options are handed to user
defined functions.  The global array @code{ARGV1} and the global
variable @code{ARGC1} must hold the command line arguments and the
number of command line arguments, the global variable @code{ARG1ST} must
hold the index of the first element in @code{ARGV1} that must be parsed.
Non--option arguments are left in the global array @code{ARGV}, the
global variable @code{ARGC} holds the number of elements in @code{ARGV}.

If successful return @code{0}, else return @code{1}.
@end defun


@defun mbfl_getopts_islong @var{string}
@defunx mbfl_getopts_islong @var{string} @var{varname}
Verify if a string has the format of a long option without argument.
@var{string} is the string to validate.  The optional @var{varname} is
the name of a variable that this function will set to the option name
from @var{string}, without the leading dashes.

Return with code zero if the string is a long option without argument,
else returns with code one.

An option must be of the form @code{--option}, only characters in the
ranges @code{A-Z}, @code{a-z}, @code{0-9} and the characters @code{-}
and @code{_} are allowed in the option name.

Usage examples:

@example
mbfl_getopts_islong --option            @result{} 0
mbfl_getopts_islong --option=123        @result{} 1
mbfl_getopts_islong gasp                @result{} 1
@end example
@end defun


@defun mbfl_getopts_islong_with @var{string}
@defunx mbfl_getopts_islong_with @var{string} @var{optname} @var{varname}
Verify if a string has the format of a long option with argument.  Arguments:

@table @var
@item string
The string to validate.

@item optname
Optional name of a variable that this function will set to the option name from @var{string},
without the leading dashes.

@item varname
Optional name of a variable that this function will set to the option value from @var{string}.
@end table

Return with code @code{0} if the string is a long option with argument.  Return with code @code{1}
if the string is not an option with argument.

An option must be of the form @code{--option=value}, only characters in the ranges @code{A-Z},
@code{a-z}, @code{0-9} and the characters @code{-} and @code{_} are allowed in the option name.

If the argument is not an option with value, the variable names are ignored.

Usage examples:

@example
mbfl_getopts_islong_with --option=one   @result{} 0
mbfl_getopts_islong_with --option       @result{} 1
mbfl_getopts_islong_with wappa          @result{} 1
mbfl_getopts_islong_with --option=      @result{} 1
mbfl_getopts_islong_with --=            @result{} 1
@end example
@end defun


@defun mbfl_getopts_isbrief @var{string}
@defunx mbfl_getopts_isbrief @var{string} @var{varname}
Verify if a string has the format of a brief option without argument.
@var{string} is the string to validate.  The optional @var{varname} is
the name of a variable that this function will set to the option name
from @var{string}, without the leading dash.

Return with code zero if the argument is a brief option without
argument, else return with code one.

A brief option must be of the form @code{-a}, only characters in the
ranges @code{A-Z}, @code{a-z}, @code{0-9} are allowed as option letters.

Usage examples:

@example
mbfl_getopts_isbrief -o         @result{} 0
mbfl_getopts_isbrief -o123      @result{} 1
mbfl_getopts_isbrief gasp       @result{} 1
@end example
@end defun


@defun mbfl_getopts_isbrief_with @var{string}
@defunx mbfl_getopts_isbrief_with @var{string} @var{optname} @var{valname}
Verify if a string has the format of a brief option with argument.
Arguments:

@table @var
@item string
The string to validate.

@item optname
Optional name of a variable that this function will set to the option
name from @var{string}, without the leading dashes.

@item valname
Optional name of a variable that this function will set to the option
value.
@end table

Return with code zero if the argument is a brief option without
argument, else return with code one.

A brief option must be of the form @code{-aV} (@code{a} is the option,
@code{V} is the value), only characters in the ranges @code{A-Z},
@code{a-z}, @code{0-9} are allowed as option letters.

Usage examples:

@example
mbfl_getopts_isbrief_with -o123         @result{} 0
mbfl_getopts_isbrief_with -o            @result{} 1
mbfl_getopts_isbrief_with --option      @result{} 1
mbfl_getopts_isbrief_with wappa         @result{} 1
@end example
@end defun


@defun mbfl_wrong_num_args @var{required} @var{present}
Validate the number of arguments.  @var{required} is the required number
of arguments, @var{present} is the given number of arguments on the
command line.  If the number of arguments is different from the required
one: print an error message and return with code one; else return with
code zero.
@end defun


@defun mbfl_wrong_num_args_range @var{min_required} @var{max_required} @var{argc}
Validate the number of arguments.  @var{argc} must be between
@var{min_required} and @var{max_required}, inclusive.
@end defun


@defun exit_because_wrong_num_args
@defunx return_because_wrong_num_args
Exit or return with code @code{98}.
@end defun


@defun mbfl_argv_from_stdin
If the @code{ARGC} global variable is set to zero: fills the global
variable @code{ARGV} with lines read from stdin.  If the global variable
@code{mbfl_option_NULL} is set to @code{yes}: lines are read using the
null character as terminator, else they are read using the standard
newline as terminator.

This function may block waiting for input.
@end defun


@defun mbfl_argv_all_files
Check that all the arguments in @code{ARGV} are file names of existent
files.  Return with code zero if no errors, else print an error message
and return with code 1.
@end defun


@defun mbfl_getopts_print_long_switches
Print all the long switches in a row, separated by spaces.  This is
useful to retrieve the option for Bash programmable completion.
@end defun


@defun exit_because_invalid_option_declaration
@defunx return_because_invalid_option_declaration
Exit or return with code @code{93}.
@end defun


@defun exit_because_invalid_option_argument
@defunx return_because_invalid_option_argument
Exit or return with code @code{92}.
@end defun


@defun mbfl_getopts_reset
Reset to empty the internal state representing the declared options.
@end defun


@defun mbfl_getopts_gather_mbfl_options_var @var{_RV}
Append to the data variable whose name is @var{_RV} a list of @mbfl{} command line options
reflecting the current @mbfl{} options state.  Assuming no predefined options were given on the
command line:

@example
mbfl_local_varref(FLAGS)

mbfl_set_option_verbose
mbfl_set_option_test
mbfl_getopts_gather_mbfl_options_var mbfl_datavar(FLAGS)
"$FLAGS"        @result{} '--verbose --test'
@end example

This is useful when executing an @mbfl{} script as subprocess for an @mbfl{} script: we can hand the
subprocess the same options that were given to the process, or maybe change them.

This function uses the following functions to gather the required options:

@example
mbfl_option_verbose
mbfl_option_verbose_program
mbfl_option_debug
mbfl_option_show_program
mbfl_option_test
@end example
@end defun

@c page
@node message
@chapter Printing messages to the console


This module allows us to print messages to an output channel.  Various forms of message are
supported.  All the function names are prefixed with @code{mbfl_message_}.  Almost all the messages
will have one of the forms:

@example
<progname>: <message>
<progname>: error: <message>
<progname>: warning: <message>
<progname>: debug: <message>
@end example

@menu
* message config::              Message module configuration.
* message plain::               Printing plain messages.
* message format::              Printing formatted messages.
@end menu

@c page
@node message config
@section Message module configuration


@defun mbfl_message_set_progname @var{PROGNAME}
Set the script's official name to put at the beginning of messages.  This value is initialised to
@code{script_PROGNAME}.
@end defun


@defun mbfl_message_set_channel @var{channel}
Select the channel to be used to output messages.  @var{channel} must be a numeric string,
otherwise: an error is printed on the old channel and the function returns false.  This value is
initialised to @code{2}, which is @stderr{}.
@end defun

@c page
@node message plain
@section Printing plain messages


@defun mbfl_message_string @var{string}
Output a message to the selected output channel.  Echo a string composed of: the selected program
name, a colon, a space, @var{string}.  No newline character is appended to the message.  Escape
characters supported by @code{printf} are allowed in @var{string}.
@end defun


@defun mbfl_message_verbose @var{string}
Output a message to the selected output channel, but only if the evaluation of the function
@func{mbfl_option_verbose} returns true.

Echo a string composed of: the selected program name, a colon, a space, @var{string}.  No newline
character is appended to the message.  Escape characters supported by @code{printf} are allowed in
@var{string}.
@end defun


@defun mbfl_message_verbose_end @var{string}
Output a message to the selected output channel, but only if the evaluation of the function
@func{mbfl_option_verbose} returns true.  Echo the string.  No newline character is appended to the
message.  Escape characters supported by @code{printf} are allowed in @var{string}.

If @var{string} is empty: this function just prints a newline when verbose execution is enabled.
@end defun


@defun mbfl_message_error @var{string}
Output an error message to the selected output channel.  Echo a string composed of: the selected
program name, a colon, a space, the string @code{error}, a colon, a space, @var{string}, a newline
character.  Escape characters supported by @code{printf} are allowed in @var{string}.
@end defun


@defun mbfl_message_warning @var{string}
Output a warning message to the selected output channel.  Echo a string composed of: the selected
program name, a colon, a space, the string @code{warning}, a colon, a space, @var{string}, a newline
character.  Escape characters supported by @code{printf} are allowed in @var{string}.
@end defun


@defun mbfl_message_debug @var{string}
Output a message to the selected output channel, but only if the evaluation of the function
@func{mbfl_option_debug} returns true.  Echo a string composed of: the selected program name, a
colon, a space, @var{string}, a newline character.  Escape characters supported by @code{printf} are
allowed in @var{string}.
@end defun

@c page
@node message format
@section Printing formatted messages


@defun mbfl_message_verbose_printf @var{template} [@var{arg} @dots{}]
Format the arguments in the same way @code{printf} would do; output the resulting string to the
selected output channel, but only if the evaluation of the function @func{mbfl_option_verbose}
returns true.

Echo a string composed of: the selected program name, a colon, a space, the formatting result.  No
newline character is appended to the message.
@end defun


@defun mbfl_message_error_printf @var{template} [@var{arg} @dots{}]
Format the arguments in the same way @code{printf} would do; output the resulting string to the
selected output channel.

Echo a string composed of: the selected program name, a colon, a space, the string @code{error}, a
colon, a space, the formatting result, a newline character.
@end defun


@defun mbfl_message_warning_printf @var{template} [@var{arg} @dots{}]
Format the arguments in the same way @code{printf} would do; output the resulting string to the
selected output channel.

Echo a string composed of: the selected program name, a colon, a space, the string @code{warning}, a
colon, a space, the formatting result, a newline character.
@end defun


@defun mbfl_message_debug_printf @var{template} [@var{arg} @dots{}]
Format the arguments in the same way @code{printf} would do; output the resulting string to the
selected output channel, but only if the evaluation of the function @func{mbfl_option_debug}
returns true.

Echo a string composed of: the selected program name, a colon, a space, the string @code{debug}, a
colon, a space, the formatting result, a newline character.
@end defun

@c page
@node program
@chapter Using external programs


@menu
* program testing::             Testing a script and running programs.
* program checking::            Checking programs existence.
* program executing::           Executing a program.
* program declaring::           Declaring the intention to use a
                                program.
@end menu

@c page
@node program testing
@section Testing a script and running programs


@mbfl{} allows a script to execute a ``dry run'', that is: do not
perform any operation on the system, just print messages describing what
will happen if the script is executed with the selected options.  This
implies, in the @mbfl{} model, that no external program is executed.

When this feature is turned on: @func{mbfl_program_exec} does not
execute the program, instead it prints the command line on standard
error and it returns true.


@defun mbfl_set_option_test
Enable the script test option.  After this: a script must not mutate the
system in any way, it should just print messages describing the
operations.

However, the script is allowed to acquire informations from the system;
for example it can acquire the list of files in a directory or load the
contents of a file.

This function is invoked when the predefined option @option{--test} is
used on the command line.
@end defun


@defun mbfl_unset_option_test
Disable the script test option.  After this a script must perform normal
operations.
@end defun


@defun mbfl_option_test
Return true if test execution is enabled, else return false.
@end defun


@c page
@node program checking
@section Checking programs existence


The simpler way to test the availability of a program is to look for it just before it is used.


@defvr Array mbfl_split_PATH
After a call to @func{mbfl_program_split_path}: this array is filled with the components of the
@env{PATH} variable.
@end defvr


@defun mbfl_program_split_path
If the number of pairs in the global array @code{mbfl_split_PATH} is zero: split the current value
of @var{PATH} into its components by splitting the string using the colon character @code{:} as
separator; store the result in the global array @code{mbfl_split_PATH}; finally return true.

If the number of pairs in the global array @code{mbfl_split_PATH} is not zero: do nothing and return
false.

We can print the contents of the array with:

@example
local -i i

for ((i=0; i < $@{#mbfl_split_PATH[@@]@}; ++i))
do echo "$@{mbfl_split_PATH[$i]@}"
done
@end example

To force a resplit, just reset the array to the empty state with:

@example
mbfl_split_PATH=()
@end example
@end defun


@defun mbfl_program_find @var{program}
@defunx mbfl_program_find_var @var{_RV} @var{program}
Search for a program in the standard search path.  Print the full pathname of the program found, or
an empty string if nothing is found.  If an executable file is found: return true; otherwise return
false.

The search path is the one in the environment variable @var{ENV} as found by
@func{mbfl_program_split_path}.  The contained directories are searched in the order in which they
appear in @env{PATH}.  There are rules:

@itemize
@item
If @var{program} is an absolute pathname (according to @func{mbfl_file_is_absolute}): only that
absolute pathname is verified as executable file.  @var{PATH} is ignored.

@item
If @var{program} is a relative pathname with at least one slash character in it: only that relative
pathname is verified as executable file.  @var{PATH} is ignored.

@item
If @var{program} is a relative pathname without slash characters in it: the standard search path is
used.
@end itemize

The @code{_var} function variant will store the result in the variable @var{_RV} rather than print
it.
@end defun

@c page
@node program executing
@section Executing a program


This module provides an @api{} to execute a program under the privileges
of the current user or under a more or less privileged user;
@command{sudo} is used run a program as a different user: refer to its
documentation for the required configuration; @command{whoami} is used
to determine to which user the process belongs.

At package configuration time we can specify which @command{sudo} and
@command{whoami} executables to use through the following options for
the configuration script @command{configure}:

@table @code
@item --with-sudo=/path/to/sudo
Allows the selection of the pathname to the executable @command{sudo};
this pathname is hard--coded in the library.  It defaults to:
@file{/usr/bin/sudo}.

@item --with-whoami=/path/to/whoami
Allows the selection of the pathname to the executable @command{whoami}, which is meant to be the
program from the package @gnu{} Coreutils; this pathname is hard--coded in the library.  It defaults
to: @file{/bin/whoami}.

@item --with-id=/path/to/id
Allows the selection of the pathname to the executable @command{id}, which is meant to be the
program from the package @gnu{} Coreutils; this pathname is hard--coded in the library.  It defaults
to: @file{/bin/id}.
@end table

The functions described here must be used in the following way:

@itemize
@item
To execute a program under the current user privileges:

@example
mbfl_program_exec ls /bin
@end example

@item
To execute a program under a more or less privileged user:

@example
# At the beginning of the script:
mbfl_program_enable_sudo

# When executing a program:
mbfl_program_declare_sudo_user root
mbfl_program_exec ls /root
@end example
@end itemize

Every time we execute a program with @command{sudo}: we have to select
the user under which to execute it; if we do not do it: the internally
registered user defaults to @code{nosudo}, which tells the function
@strong{not} to use @command{sudo}.  So the following script works as
commented:

@example
mbfl_program_enable_sudo

# This is executed with the privileges of the user that
# launched the script.
mbfl_program_exec ls /bin

mbfl_program_declare_sudo_user root
# This is executed with root privileges.
mbfl_program_exec ls /root

# This is executed with the privileges of the user that
# launched the script.
mbfl_program_exec ls /bin
@end example


@defun mbfl_program_exec @var{program}
@defunx mbfl_program_exec @var{program} @var{arg} ...
Evaluate a command line.  @var{program} identifies an executable file:
it can be the program name, or a relative or absolute pathname.  The
optional @var{arg} values are command line arguments that are handed to
the program unchanged.

If usage of @command{sudo} was requested, the command is executed with
it; then the @command{sudo} request is reset.  This means that this
function ``consumes'' a @command{sudo} request.

See below for the redirection of the standard error channel.

If the function @func{mbfl_option_test} returns true: instead of
evaluation, the command line is sent to stderr.

If the function @func{mbfl_option_show_program} returns true: the
command line is sent to stderr, then it is executed.
@end defun


@defun mbfl_program_execbg @var{inchan} @var{ouchan} @var{program}
@defunx mbfl_program_execbg @var{inchan} @var{ouchan} @var{program} @var{arg} ...
Does all the same things of @func{mbfl_program_exec}, running the given
command line as:

@example
@var{program} @var{arg} ... <&@var{inchan} >&@var{ouchan} &
@end example

@noindent
additionally: set the global variable @code{mbfl_program_BGPID} to the
process ID of the background process; that is: @code{mbfl_program_BGPID}
is the value of @code{$!} right after the process execution.

Using this function is different from calling:

@example
mbfl_program_exec ls <&@var{inchan} >&@var{ouchan} &
@end example

@noindent
because doing so puts in the background the function call (in a subshell)
and then runs the program.

Notice that we @strong{must} always use numeric file descriptors as @var{inchan} and @var{ouchan}
arguments.  Also we can always use the default file descriptors, for example:

@example
mbfl_program_execbg 0 1 /bin/ls
@end example

The readable aliases @file{/dev/stdin}, @file{/dev/stdout}, @file{/dev/fd/0}, @file{/dev/fd/1} are
@strong{not} usable as @var{inchan} and @var{ouchan} arguments (remember that the aliases are
@strong{not} available, for example, when the script is run from a cron job).
@end defun


@defun mbfl_program_execbg2 @var{inchan} @var{ouchan} @var{erchan} @var{program}
@defunx mbfl_program_execbg2 @var{inchan} @var{ouchan} @var{erchan} @var{program} @var{arg} ...
Like @func{mbfl_program_execbg}, but redirects also the standard error of the executed process to
@var{erchan}, which must be a numeric file descriptor.

If the redirection of @stderr{} to @stdout{} is requested with
@func{mbfl_program_redirect_stderr_to_stdout}: such request is ignored and unset.
@end defun


@defun mbfl_program_replace @var{program}
@defunx mbfl_program_replace @var{program} [@var{opt} @dots{}]
Like @func{mbfl_program_exec}, but execute the program through the Bash
command @code{exec}, so replacing the current process without creating a
new one.
@end defun


@defvar mbfl_program_BGPID
Used by @func{mbfl_program_execbg} to store the process id of the
program executed in background.
@end defvar


@defun mbfl_program_enable_sudo
Declare the intention to use @command{sudo} and other commands required
to use it.  The declared programs are: @command{sudo}, @command{whoami}.

This function does @strong{not} use @func{mbfl_declare_program}.
@end defun


@defun mbfl_program_declare_sudo_user @var{user}
Register @var{user} as the user under which to execute the next program through @command{sudo}; the
user will be selected using the @code{-u} option of @command{sudo}.  The value @code{nosudo} means:
do not use @command{sudo}.

The string @var{user} must satisfy the function @func{mbfl_string_is_username}, else the function
will print an error message to @stderr{} and exit with @func{exit_because_invalid_sudo_username}.

When the time comes: if the selected user name equals the value printed by @command{whoami},
@command{sudo} is not used.
@end defun


@defun exit_because_invalid_sudo_username
@defunx return_because_invalid_sudo_username
Exit or return with code @code{90}.
@end defun


@defun mbfl_program_reset_sudo_user
Reset the previously requested @command{sudo} user to a value that will
cause @command{sudo} not to be used in the next program invocation.
This is useful to abort a user request.
@end defun


@defun mbfl_program_sudo_user
Print the current @command{sudo} user.
@end defun


@defun mbfl_program_requested_sudo
Return true if the usage of @command{sudo} has been requested for the
next command execution.
@end defun


@defun mbfl_program_declare_sudo_options [@var{opt} @dots{}]
Select additional command line options to use on the next invocation of
@command{sudo}.  These values are consumed by the first use of
@func{mbfl_program_exec}.
@end defun


@defun mbfl_program_reset_sudo_options
Clean the options previously set by
@func{mbfl_program_declare_sudo_options}.
@end defun

@c ------------------------------------------------------------

@subsubheading Executing a subshell


@defun mbfl_program_bash [@var{opt} @dots{}]
Execute @command{bash} with the @var{arg} arguments appended.  The
@command{bash} pathname is registered in the library at start up, from
the built in variable @code{BASH}.
@end defun


@defun mbfl_program_bash_command @var{command}
Execute @var{command} in a @command{bash} subprocess, using the
@code{-c} switch.  The @command{bash} pathname is registered in the
library at start up, from the built in variable @code{BASH}.
@end defun

@c ------------------------------------------------------------

@subsubheading Redirecting the standard error channel

There are programs that output useful informations on their stderr
channel (example: the @command{at} command).


@defun mbfl_program_redirect_stderr_to_stdout
Just for the next invocation to @func{mbfl_program_exec} redirect
stderr to stdout, that is: use the @code{2>&1} redirection for the
executed program.
@end defun


This is useful because redirecting the output of
@func{mbfl_program_exec}:

@example
echo ls | \
    mbfl_program_exec at 'now +25 minutes' 2>&1 | \
    while read
@end example

@noindent
redirects also the ``show program'' output (@ref{getopts options} for
the @option{--show-program} option explanation and see the above
description of @func{mbfl_program_exec}).  Instead By using:

@example
mbfl_program_redirect_stderr_to_stdout
echo ls | \
    mbfl_program_exec at 'now +25 minutes' | \
    while read
@end example

@noindent
the ``show program'' output goes to stderr and the stderr output of the
@command{at} command is, internally, redirected to the stdout of
@func{mbfl_program_exec}.

@c page
@node program declaring
@section Declaring the intention to use a program


To make a script model simpler, we assume that the unavailability of a
program at the time of its execution is a fatal error.  So if we need to
execute a program and the executable is not there, the script must be
aborted on the spot.

Functions are provided to test the availability of a program, so we can
try to locate an alternative or terminate the process under the script
control.  On a system where executables may vanish from one moment to
another, no matter how we test a program's existence, there's always the
possibility that the program is not ``there'' when we invoke it.

If we just use @func{mbfl_program_exec} to invoke an external
program, the function will try and fail if the executable is
unavailable: the return code will be false.

The vanishing of a program is a rare event: if it's there when we look
for it, probably it will be there also a few moments later when we
invoke it.  For this reason, @mbfl{} proposes a set of functions with
which we can declare the intention of a script to use a set of programs.

A command line option is predefined to let the user test the
availability of all the declared programs before invoking the script.
@ref{getopts options, Predefined options}.


@defun mbfl_declare_program @var{program}
Register @var{program} as the name of a program required by the script;
@func{mbfl_program_find} is used to locate the program on the system.
@ref{program checking, Checking programs existence}.

If @var{program} is a file name with no directory part (examples:
@command{sed}, @command{grep}) the selected program is the full pathname
of the file in one of the directories of @env{PATH}.

If @var{program} is a relative pathname (examples: @file{../bin/sed},
@file{./grep}): the selected program is the full pathname of the file
normalised by this function with respect to the current working
directory (with a call to @func{mbfl_file_normalise}).

The return value is always zero.
@end defun


@defun mbfl_program_validate_declared
Validate the existence of all the declared programs.  The return value
is zero if all the programs are found, one otherwise.

This function is invoked by @func{mbfl_getopts_parse} when the
@option{--validate-programs} option is used on the command line.

It may be a good idea to invoke this function at the beginning of a
script, just before starting to do stuff, example:

@example
mbfl_program_validate_declared || \
   exit_because_program_not_found
@end example

If verbose messages are enabled: a brief summary is echoed to stderr;
from the command line the option @option{--verbose} must be used before
@option{--validate-programs}.
@end defun


@defun mbfl_program_found @var{program}
@defunx mbfl_program_found_var @var{_RV} @var{program}
Print the pathname of the previously declared @var{program}.  Return zero if the program was found,
otherwise print an error message and exit the current (sub)shell by invoking
@func{exit_because_program_not_found}.

This function should be used to retrieve the pathname of the program to be used as first argument to
@func{mbfl_program_exec}:

The function variant @code{_var} will store the result in @var{_RV} rather than printing it.

@example
function program_wrapper () @{
    mbfl_mandatory_parameter(ARGUMENT, 1, argument)
    shift
    local PROGNAME FLAGS

    mbfl_program_found_var PROGNAME myprog || exit $?

    mbfl_option_verbose_program && FLAGS+=' --verbose'
    mbfl_program_exec "$PROGNAME" $FLAGS "$ARGUMENT" "$@@"
@}
@end example

Remember that we cannot use:

@example
local PROGNAME=$(mbfl_program_found 'myprog') || exit $?
@end example

@noindent
because @code{local} has exit status zero even if @func{mbfl_program_found} fails, so the error
will not be reported.
@end defun


@defun exit_because_program_not_found
@defunx return_because_program_not_found
Exit or return with code @code{99}.
@end defun

@c page
@node interfaces
@chapter Interfaces to external programs


@menu
* interfaces at::               Scheduling jobs for later execution.
@end menu

@c page
@node interfaces at
@section Scheduling jobs for later execution


This section documents the interface to the @command{atd} daemon; we may want to read the
@command{at}(1) manual page.  The @command{at} service allows a user to schedule commands to be
executed at a later time.

This interface is suitable for scripts that define a unique simple policy to schedule commands;
example: at each run they schedule a command in a fixed queue, to be executed at a fixed time in the
future.

This is good to implement the logic: if a condition does not happen before time @code{T}, then
execute command @command{C}.

@c ------------------------------------------------------------------------

@subsubheading Commands declaration


@defun mbfl_at_enable
Declare the intention to use the @command{at} interface.  @ref{program declaring, Declaring the
intention to use a program}.

The declared programs are: @command{at}, @command{atq}, @command{atrm}.
@end defun

@c ------------------------------------------------------------------------

@subsubheading Arguments validation


@defun mbfl_at_validate_queue_letter @var{letter}
Return true if @var{letter} is a valid queue identifier, else return false.
@end defun


@defun mbfl_at_validate_selected_queue
Return true if the currently selected queue identifier is valid, else print an error message and
return false.  A false return code means that an internal error has corrupted the module's state.
@end defun

@c ------------------------------------------------------------------------

@subsubheading Commands scheduling


@defun mbfl_at_select_queue @var{letter}
Select and register in an internal state a queue identifier; invoke
@func{mbfl_at_validate_queue_letter} to validate the selection.
@end defun


@defun mbfl_at_schedule @var{command} @var{time}
Schedule @var{command} in the currently selected queue; the script will be executed at @var{time}.

If no error occurs: print to stdout the identifier of the scheduled job; the identifier can be used
as argument to @func{mbfl_at_drop}.

@quotation
The @command{at} command outputs some text (in which the job is embedded) on its @stderr{}
channel, so this function redirects @stderr{} to @stdout{} to return the value; this
operation conflicts with the use of the ``show program'' feature of @func{mbfl_program_exec}.
@end quotation

@var{command} must be a string representing the invocation of an external executable program: it is
sent unchanged to the @command{at} command.  @var{time} is the argument to the @command{at} command,
see the manual page for its description.
@end defun


@defun mbfl_at_drop @var{identifier}
Remove a job; the identifier of a job is unique in all the queues, so this function is not affected
by the currently selected queue.
@end defun


@defun mbfl_at_queue_clean
Remove all the jobs from the currently selected queue.
@end defun

@c ------------------------------------------------------------------------

@subsubheading Inspection


@defun mbfl_at_queue_print_identifiers
Print all the job identifiers in the currently selected queue.
@end defun


@defun mbfl_at_queue_print_jobs
Print all the job descriptions in the currently selected queue.
@end defun


@defun mbfl_at_queue_print_queues
Print the letters identifying queues with pending jobs.
@end defun


@defun mbfl_at_print_queue
Print the currently selected queue letter.
@end defun

@c page
@node signal
@chapter Catching signals


@mbfl{} provides an interface to the @code{trap} builtin that allows the
execution of more than one function when a signal is received; this may
sound useless, but that is it.


@defun mbfl_signal_map_signame_to_signum @var{sigspec}
Convert @var{sigspec} to the corresponding signal number, then print
the number.
@end defun


@defun mbfl_signal_attach @var{sigspec} @var{handler}
Append @var{handler} to the list of functions that are executed whenever
@var{sigspec} is received.
@end defun


@defun mbfl_signal_invoke_handlers @var{signum}
Invoke all the handlers registered for @var{signum}.  This function is
not meant to be used during normal scripts execution, but it may be
useful to debug a script.
@end defun

@c page
@node strings
@chapter Manipulating strings


@menu
* strings quote::               Quoted characters.
* strings inspection::          Inspecting a string.
* strings splitting::           Splitting a string.
* strings case::                Converting between upper and lower case.
* strings class::               Matching a string with a class.
* strings comparison::          Comparing strings.
* strings misc::                Miscellaneous functions.
@end menu

@c page
@node strings quote
@section Quoted characters


@defun mbfl_string_is_quoted_char @var{string} @var{position}
Return true if the character at @var{position} in @var{string} is quoted; else return false.  A
character is considered quoted if it is preceded by an odd number of backslashes (@code{\}).
@var{position} is a zero--based index.

@example
mbfl_string_is_quoted_char 'abcdefg'  3 @ExitCode{} 1
mbfl_string_is_quoted_char 'ab\cdefg' 3 @ExitCode{} 0
mbfl_string_is_quoted_char 'ab\ndefg' 3 @ExitCode{} 0
@end example
@end defun


@defun mbfl_string_is_equal_unquoted_char @var{string} @var{position} @var{char}
Return true if the character at @var{position} in @var{string} is equal to @var{char} and is not
quoted (according to @func{mbfl_string_is_quoted_char}); else return false.  @var{position} is a
zero--based index.

@example
mbfl_string_is_equal_unquoted_char abcdefg 3 d
@ExitCode{} 0

mbfl_string_is_equal_unquoted_char 'abc\defg' 3 d
@ExitCode{} 1
@end example
@end defun


@defun mbfl_string_quote @var{string}
@defunx mbfl_string_quote_var @var{_RV} @var{string}
Print @var{string} with quoted characters.  All the occurrences of the backslash character,
@code{\}, are substituted with a quoted backslash, @code{\\}.  Return true.

@DocVarVariant{}

@example
mbfl_string_quote \\a\\b\\c     @print{} \\\\a\\\\b\\\\c
mbfl_string_quote abc           @print{} abc
mbfl_string_quote "a b\tc\n\r"  @print{} a\ b\\\\tc\\\\n\\\\r

local _RV
mbfl_string_quote_var _RV \\a\\b\\c
"$_RV"   @result{} \\\\a\\\\b\\\\c
@end example
@end defun

@c page
@node strings inspection
@section Inspecting a string


@defun mbfl_string_length @var{string}
Print an integer representing the length of @var{string}.  The argument @var{string} can be an empty
string.
@end defun


@defun mbfl_string_length_equal_to @var{length} @var{string}
Return successfully if @var{string} has length equal to @var{length}.  The argument @var{length}
must be a non-negative integer; the argument @var{string} can be an empty string.
@end defun


@defun mbfl_string_is_empty @var{string}
Return successfully if @var{string} is empty.
@end defun


@defun mbfl_string_is_not_empty @var{string}
Return successfully if @var{string} is not empty.
@end defun


@defun mbfl_string_index @var{string} @var{index}
@defunx mbfl_string_index_var @var{_RV} @var{string} @var{index}
Select a character from a string.  Echo to stdout the selected character.  If the index is out of
range: the empty string is echoed to stdout, that is: a newline is echoed to stdout.

@DocVarVariant{}

@example
mbfl_string_index abcdefghilm  0        @print{} a
mbfl_string_index abcdefghilm  4        @print{} e
mbfl_string_index abcdefghilm 10        @print{} m
mbfl_string_index abcdefghilm 11        @print{} <empty string>

local _RV
mbfl_string_index_var _RV abcdefghilm 0
"$_RV" @result{} a
@end example
@end defun


@defun mbfl_string_first @var{string} @var{char}
@defunx mbfl_string_first @var{string} @var{char} @var{begin}
@defunx mbfl_string_first_var @var{_RV} @var{string} @var{char}
@defunx mbfl_string_first_var @var{_RV} @var{string} @var{char} @var{begin}
Search characters in a string.  Arguments: @var{string}, the target string; @var{char}, the
character to look for; @var{begin}, optional, the index of the character in the target string from
which the search begins (defaults to zero).

If the character is found: print an integer representing the index of the last occurrence of
@var{char} in @var{string}, then return with status zero.  If the character is not found: print
nothing and return with status one.

@DocVarVariant{}

@example
mbfl_string_first abcdefghilm d         @print{} 3
mbfl_string_first abcdefghilm a         @print{} 0
mbfl_string_first abcdefghilm m         @print{} 10
mbfl_string_first abcdefghilm X         @print{} <empty string>

mbfl_string_first abcdeabcde  a 3       @print{} 5
mbfl_string_first abcdeabcde  e 5       @print{} 9
mbfl_string_first abcdeabcde  e 4       @print{} 4

local _RV
mbfl_string_first_var _RV abcdefghilm d
"$_RV" @result{} 3
@end example
@end defun


@defun mbfl_string_last @var{string} @var{char}
@defunx mbfl_string_last @var{string} @var{char} @var{begin}
@defunx mbfl_string_last_var @var{_RV} @var{string} @var{char}
@defunx mbfl_string_last_var @var{_RV} @var{string} @var{char} @var{begin}
Search characters in a string starting from the end.  Arguments: @var{string}, the target string;
@var{char}, the character to look for; @var{begin}, optional, the index of the character in the
target string from which the search begins (defaults to zero).

If the character is found: print an integer representing the index of the last occurrence of
@var{char} in @var{string}, then return with status zero.  If the character is not found: print
nothing and return with status one.

@DocVarVariant{}

@example
mbfl_string_last abcdefghilm d          @print{} 3
mbfl_string_last abcdefghilm a          @print{} 0
mbfl_string_last abcdefghilm m          @print{} 10
mbfl_string_last abcdefghilm X          @print{} <empty string>

mbfl_string_last abcdefghilm a 3        @print{} 0
mbfl_string_last abcdeabcde  a 7        @print{} 5
mbfl_string_last abcdeabcde  e 7        @print{} 4
mbfl_string_last abcdeabcde  e 4        @print{} 4

local _RV
mbfl_string_last_var _RV abcdefghilm d
"$_RV" @result{} 3
@end example
@end defun


@defun mbfl_string_range @var{string} @var{begin}
@defunx mbfl_string_range @var{string} @var{begin} @var{end}
@defunx mbfl_string_range_var @var{_RV} @var{string} @var{begin}
@defunx mbfl_string_range_var @var{_RV} @var{string} @var{begin} @var{end}
Extract a range of characters from a string.  Arguments: @var{string}, the source string;
@var{begin}, the index of the first character in the range; @var{end}, optional, the index of the
character past the last in the range, this character is not extracted.

@var{end} defaults to the string length; if the parameter @var{end} is set to the lowercase string
@code{end} or the uppercase string @code{END}: the end index is set to the string length.

Echo to stdout the selected range of characters, which may be the empty string.

@DocVarVariant{}

@example
mbfl_string_range abcdefghilm 0 end     @print{} abcdefghilm
mbfl_string_range abcdefghilm 0         @print{} abcdefghilm
mbfl_string_range abcdefghilm 0 4       @print{} abcd
mbfl_string_range abcdefghilm 4 end     @print{} efghilm

local _RV
mbfl_string_range_var _RV abcdefghilm 4 end
"$_RV" @result{} efghilm
@end example
@end defun

@c page
@node strings splitting
@section Splitting a string


@defvar SPLITFIELD
Array used by @func{mbfl_string_chars} to store the result of splitting a string.
@end defvar


@defvar SPLITCOUNT
Array used by @func{mbfl_string_chars} to store the number of values in @code{SPLITFIELD}.
@end defvar


@defun mbfl_string_chars @var{string}
Split a string into characters.  Fill an array named @code{SPLITFIELD} with the characters from the
string; the number of elements in the array is stored in a variable named @code{SPLITCOUNT}.  Both
@code{SPLITFIELD} and @code{SPLITCOUNT} can be declared @code{local} in the scope of the caller.

The difference between this function and using @code{$@{STRING:$i:1@}}, is that this function
detects backslash characters, @code{\}, and treats them as part of the following character.  So, for
example, the sequence @code{\n} is treated as a single char.
@end defun


Example of usage for @func{mbfl_string_chars}:

@example
local SPLITFIELD
local -i SPLITCOUNT

string="abcde\nfghilm"
mbfl_string_chars "$@{string@}"

$SPLITCOUNT             @result{} 12
"$@{SPLITFIELD[0]@}"    @result{} a
"$@{SPLITFIELD[1]@}"    @result{} b
"$@{SPLITFIELD[2]@}"    @result{} c
"$@{SPLITFIELD[3]@}"    @result{} d
"$@{SPLITFIELD[4]@}"    @result{} e
"$@{SPLITFIELD[5]@}"    @result{} \n
"$@{SPLITFIELD[6]@}"    @result{} f
"$@{SPLITFIELD[7]@}"    @result{} g
"$@{SPLITFIELD[8]@}"    @result{} h
"$@{SPLITFIELD[9]@}"    @result{} i
"$@{SPLITFIELD[10]@}"   @result{} l
"$@{SPLITFIELD[11]@}"   @result{} m
@end example


@defun mbfl_string_split @var{string} @var{separator}
Split @var{string} into fields using @var{separator}.  Fill an array named @code{SPLITFIELD} with
the characters from the string; the number of elements in the array is stored in a variable named
@code{SPLITCOUNT}.  We can declare both @code{SPLITFIELD} and @code{SPLITCOUNT} as @code{local} in
the scope of the caller.
@end defun


@defun mbfl_string_split_blanks @var{string}
Split @var{string} into fields using adjacent blank characters as separators.  Fill an array named
@code{SPLITFIELD} with the characters from the string; the number of elements in the array is stored
in a variable named @code{SPLITCOUNT}.  We can declare both @code{SPLITFIELD} and @code{SPLITCOUNT}
as @code{local} in the scope of the caller.

@example
local -a SPLITFIELD
local -i SPLITCOUNT
local STRING

printf -v STRING 'abc\t \tdef\t\t ghi \t\tlmn\t \topq\t\t   rs'

mbfl_string_split_blanks "$STRING"

$SPLITCOUNT             @result{} 6
"$@{SPLITFIELD[0]@}"      @result{} abc
"$@{SPLITFIELD[1]@}"      @result{} def
"$@{SPLITFIELD[2]@}"      @result{} ghi
"$@{SPLITFIELD[3]@}"      @result{} lmn
"$@{SPLITFIELD[4]@}"      @result{} opq
"$@{SPLITFIELD[5]@}"      @result{} rs
@end example
@end defun

@c page
@node strings case
@section Converting between upper and lower case


@defun mbfl_string_toupper @var{string}
@defunx mbfl_string_toupper_var @var{_RV} @var{string}
Output @var{string} with all the occurrences of lower case @ascii{} characters (no accents) turned
into upper case.

@DocVarVariant{}
@end defun


@defun mbfl_string_tolower @var{string}
@defunx mbfl_string_tolower_var @var{_RV} @var{string}
Output @var{string} with all the occurrences of upper case @ascii{} characters (no accents) turned
into lower case.

@DocVarVariant{}
@end defun

@c page
@node strings class
@section Matching a string with a class


@defun mbfl_string_is_alpha_char @var{char}
Return true if @var{char} is in one of the ranges: @samp{[a-z]},
@samp{[A-Z]}.
@end defun


@defun mbfl_string_is_digit_char @var{char}
Return true if @var{char} is in the range: @code{0-9}.
@end defun


@defun mbfl_string_is_alnum_char @var{char}
Return true if:

@example
mbfl_string_is_alpha_char @var{char} || \
   mbfl_string_is_digit_char @var{char}
@end example
@end defun


@defun mbfl_string_is_noblank_char @var{char}
Return true if @var{char} is none of the characters: @samp{ },
@samp{\n}, @samp{\r}, @samp{\f}, @samp{\t}.  @var{char} is meant to be
the unquoted version of the non--blank characters, the one obtained
with:

@example
$'char'
@end example
@end defun


@defun mbfl_string_is_name_char @var{char}
Return true if @func{mbfl_string_is_alnum_char} returns true when
applied to @var{char} or @var{char} is an underscore, @samp{_}.
@end defun


@defun mbfl_string_is_identifier_char @var{char}
Return true if @func{mbfl_string_is_alnum_char} returns true when
applied to @var{char} or @var{char} is an underscore, @samp{_}, or dash,
@samp{-}.
@end defun


@defun mbfl_string_is_extended_identifier_char @var{char}
Like @func{mbfl_string_is_identifier_char}, but also accept dots
@samp{.}.
@end defun


@defun mbfl_string_is_alpha @var{string}
@defunx mbfl_string_is_digit @var{string}
@defunx mbfl_string_is_alnum @var{string}
@defunx mbfl_string_is_noblank @var{string}
@defunx mbfl_string_is_name @var{string}
@defunx mbfl_string_is_identifier @var{string}
@defunx mbfl_string_is_extended_identifier @var{string}
Return true if @var{string} is non--empty and the associated char
function returns true for each character in @var{string}.  As additional
constraint:

@itemize
@item
@func{mbfl_string_is_name} returns false if @func{mbfl_string_is_digit}
returns true when applied to the first character of @var{string}.

@item
@func{mbfl_string_is_identifier} and
@func{mbfl_string_is_extended_identifier} return false if
@func{mbfl_string_is_digit} returns true when applied to the first
character of @var{string} or the first char of @var{string} is a dash.
@end itemize
@end defun


@defun mbfl_string_is_username @var{string}
Return true if @var{string} is non--empty, all its characters are in the
ranges @code{[a-zA-Z0-9_-]}, the first character is in the range
@code{[a-zA-Z_]}; else return false.
@end defun


@defun mbfl_string_is_email_address @var{string}
Return true if @var{string} is non--empty and it matches the general shape of an email address;
otherwise return false.
@end defun


@defun mbfl_string_is_network_hostname @var{string}
Return true if @var{string} is non--empty and it matches the format of a network hostname; otherwise
return false.
@end defun


@defun mbfl_string_is_network_port @var{string}
Return true if @var{string} is non--empty and it matches the format of a network port number;
otherwise return false.
@end defun


@defun mbfl_string_is_network_ip_address @var{string}
Return true if @var{string} is non--empty and it matches the format of an @acronym{IP} address;
otherwise return false.
@end defun

@c page
@node strings comparison
@section Comparing strings


@defun mbfl_string_equal @vari{str} @varii{str}
Return successfully if the arguments are equal when lexicographically compared as strings; otherwise
return unsuccessfully.  Examples:

@example
mbfl_string_equal '' ''                 @result{} 0
mbfl_string_equal 'a' ''                @result{} 1
mbfl_string_equal '' 'a'                @result{} 1
mbfl_string_equal 'ciao' 'ciao'         @result{} 0
mbfl_string_equal 'ciao' 'hello'        @result{} 1
@end example
@end defun


@defun mbfl_string_not_equal @vari{str} @varii{str}
Return successfully if the arguments are @strong{not} equal when lexicographically compared as
strings; otherwise return unsuccessfully.
@end defun


@defun mbfl_string_is_yes @var{str}
@defunx mbfl_string_is_no @var{str}
Return true if the string @var{str} is equal to, respectively, @samp{yes} or @samp{no}; otherwise
return false.
@end defun


@defun mbfl_string_less @vari{str} @varii{str}
Return successfully if @vari{str} is less than @varii{str} when lexicographically compared as
strings; otherwise return unsuccessfully.  Examples:

@example
mbfl_string_less '' ''                  @result{} 0
mbfl_string_less 'a' ''                 @result{} 0
mbfl_string_less '' 'a'                 @result{} 1
mbfl_string_less 'ciao' 'ciao'          @result{} 1
mbfl_string_less 'ciao' 'hello'         @result{} 0
mbfl_string_less 'hello' 'ciao'         @result{} 1
@end example
@end defun


@defun mbfl_string_greater @vari{str} @varii{str}
Return successfully if @vari{str} is greater than @varii{str} when lexicographically compared as
strings; otherwise return unsuccessfully.  Examples:

@example
mbfl_string_greater '' ''               @result{} 1
mbfl_string_greater 'a' ''              @result{} 0
mbfl_string_greater '' 'a'              @result{} 1
mbfl_string_greater 'ciao' 'ciao'       @result{} 1
mbfl_string_greater 'ciao' 'hello'      @result{} 1
mbfl_string_greater 'hello' 'ciao'      @result{} 0
@end example
@end defun


@defun mbfl_string_less_or_equal @vari{str} @varii{str}
Return successfully if @vari{str} is less than, or equal to, @varii{str} when lexicographically
compared as strings; otherwise return unsuccessfully.  Examples:

@example
mbfl_string_less_or_equal '' ''                 @result{} 0
mbfl_string_less_or_equal 'a' ''                @result{} 1
mbfl_string_less_or_equal '' 'a'                @result{} 0
mbfl_string_less_or_equal 'ciao' 'ciao'         @result{} 0
mbfl_string_less_or_equal 'ciao' 'hello'        @result{} 0
mbfl_string_less_or_equal 'hello' 'ciao'        @result{} 1
@end example
@end defun


@defun mbfl_string_greater_or_equal @vari{str} @varii{str}
Return successfully if @vari{str} is greater than, or equal to, @varii{str} when lexicographically
compared as strings; otherwise return unsuccessfully.  Examples:

@example
mbfl_string_greater_or_equal '' ''              @result{} 0
mbfl_string_greater_or_equal 'a' ''             @result{} 0
mbfl_string_greater_or_equal '' 'a'             @result{} 1
mbfl_string_greater_or_equal 'ciao' 'ciao'      @result{} 0
mbfl_string_greater_or_equal 'ciao' 'hello'     @result{} 1
mbfl_string_greater_or_equal 'hello' 'ciao'     @result{} 0
@end example
@end defun


@defun mbfl_string_equal_substring @var{string} @var{position} @var{pattern}
Return true if the substring starting at @var{position} in @var{string}
is equal to @var{pattern}; else return false.  If @var{position} plus
the length of @var{pattern} is greater than the length of @var{string}:
the return value is false, always.
@end defun

@c page
@node strings misc
@section Miscellaneous functions


@defun mbfl_string_replace @var{string} @var{pattern}
@defunx mbfl_string_replace @var{string} @var{pattern} @var{subst}
@defunx mbfl_string_replace_var @var{_RV} @var{string} @var{pattern}
@defunx mbfl_string_replace_var @var{_RV} @var{string} @var{pattern} @var{subst}
Replace all the occurrences of @var{pattern} in @var{string} with @var{subst}, then print the
result.  If not used, @var{subst} defaults to the empty string.

@DocVarVariant{}

@example
mbfl_string_replace 'abcdefg' 'cde' '123'
@print{} 'ab123fg'

local _RV
mbfl_string_replace_var _RV 'abcdefg' 'cde' '123'
"$_RV" @result{} ab123fg
@end example
@end defun


@defun mbfl_sprintf @var{varname} @var{format} ...
Make use of @code{printf} to format the string @var{format} with the additional arguments, then
store the result in @var{varname}: If this name is local in the scope of the caller, this has the
effect of filling the variable in that scope.

@strong{NOTE} We should use the built--in @code{printf -v @var{varname}} construct, rather than this
function.
@end defun


@defun mbfl_string_skip @var{string} @var{varname} @var{char}
Skip all the characters in a string equal to @var{char}.  @var{varname} is the name of a variable in
the scope of the caller: Its value is the offset of the first character to test in @var{string}.
The offset is incremented until a char different from @var{char} is found, then the value of
@var{varname} is updated to the position of the different char.  If the initial value of the offset
corresponds to a char equal to @var{char}, the variable is left untouched.  Return true.

@example
local -i i

# The char "z" is not present in the string: leave "i" untouched.
i=3
;;               0123456
mbfl_string_skip abcdefg i z
$i @result{} 3

# The whole string  is filled with "a": increment "i" to
# the length of the string itself.
i=3
;;               0123456
mbfl_string_skip aaaaaaa i a
$i @result{} 7

# Skip until the index of the "d" character.
i=3
;;               01234567890
mbfl_string_skip abcccccdefg i c
$i @result{} 7
@end example
@end defun


@defun mbfl_string_strip_carriage_return_var @var{_RV} @var{LINE}
When exchanging strings with a remote process through a network socket we, usually, need to end a
line with a carriage return plus line feed sequence.  If we use the command @command{read} to read a
line from a socket: we can instruct it to discard the ending line feed, yielding us a line ending
with a carriage return.

This function strips the ending carriage return from @var{LINE}, if any, and stores the result in
the result variable @var{_RV}.  It is fine if @var{LINE} is the empty string.
@end defun

@c page
@node dialog
@chapter Interacting with the user


@defun mbfl_dialog_yes_or_no @var{string}
@defunx mbfl_dialog_yes_or_no @var{string} @var{progname}
Print the question @var{string} on the standard output and wait for the user to type @code{yes} or
@code{no} in the standard input.  Return true if the user has typed @code{yes}, false if the user
has typed @code{no}.

The optional parameter @var{progname} is used as prefix for the prompt; if not given: It defaults to
the value of @code{script_PROGNAME}.  @ref{service variables, Required user defined variables}.
@end defun


@defun mbfl_dialog_enable_programs
Declare the usage of the external program @command{stty}, which is used by
@func{mbfl_dialog_ask_password} to turn of password echoing on the terminal.
@end defun


@defun mbfl_dialog_ask_password @var{prompt}
@defunx mbfl_dialog_ask_password_var @var{_RV} @var{prompt}
Print @var{prompt} followed by a colon and a space, then reads a password from the terminal.  Print
the password.

@DocVarVariant{}
@end defun

@c page
@node times
@chapter Times and dates


@defun mbfl_times_and_dates_enable
Declare the commands required to handle times and dates.  @ref{program declaring, Declaring the
intention to use a program}.

The programs are: @command{date}.
@end defun


@menu
* times raw::                   Raw call to @command{date}.
* times current::               Acquire the current time and date.
* times special::               Special time and date formats.
@end menu

@c page
@node times raw
@section Raw call to @command{date}


@defun mbfl_exec_date [@var{opt} @dots{}]
Execute @command{date} with the optional arguments appended to the command line.
@end defun


@defun mbfl_exec_date_format @var{format} [@var{opt} @dots{}]
Execute @command{date} with the mandatory @var{format} as first argument.  Additional, optional,
arguments are appended to the command line.
@end defun

@c page
@node times current
@section Acquire the current time and date


@defun mbfl_date_current_year
Print the current year as digit string.
@end defun


@defun mbfl_date_current_month
Print the current month as two--digits string.
@end defun


@defun mbfl_date_current_day
Print the current day as two--digits string.
@end defun


@defun mbfl_date_current_hour
Print the current hour as two--digits string.
@end defun


@defun mbfl_date_current_minute
Print the current minute as two--digits string.
@end defun


@defun mbfl_date_current_second
Print the current second as two--digits string.
@end defun


@defun mbfl_date_current_date
Print the current date, using the format @samp{%F}.  Example:

@example
mbfl_date_current_date
@print{} 2018-11-03
@end example
@end defun


@defun mbfl_date_current_time
Print the current date, using the format @samp{%T}.  Example:

@example
mbfl_date_current_time
@print{} 07:51:27
@end example
@end defun

@c page
@node times special
@section Special time and date formats


@defun mbfl_date_email_timestamp
Print the current timestamp, using the format specified by @option{--rfc-2822}: the format required
by Interned email.  Example:

@example
mbfl_date_email_timestamp
@print{} Sat, 03 Nov 2018 07:51:27 +0100
@end example
@end defun


@defun mbfl_date_iso_timestamp
Print the current timestamp, using the format specified by @option{--iso-8601=ns}: the format
required by @acronym{ISO} 8601 with nanoseconds precision.  Example:

@example
mbfl_date_iso_timestamp
@print{} 2018-11-03T07:51:27,564646289+01:00
@end example
@end defun

@c page
@node variables
@chapter Manipulating variables


@menu
* variables arrays::            Manipulating arrays.
* variables colon::             Manipulating colon variables.
* variables misc::              Miscellaneous variable functions.
@end menu

@c page
@node variables arrays
@section Manipulating arrays


@ref{variables colon, Manipulating colon variables}, for the use of the
following functions.


@defun mbfl_variable_find_in_array @var{element}
Search the array @code{mbfl_FIELDS} for a value equal to @var{element}.
If it is found: Print the index and return true; else print nothing and
return false.

@code{mbfl_FIELDS} must be filled with elements having subsequent
indexes starting at zero.
@end defun


@defun mbfl_variable_element_is_in_array @var{element}
A wrapper for @func{mbfl_variable_find_in_array} that does not print
anything.
@end defun

@c page
@node variables colon
@section Manipulating colon variables


@defun mbfl_variable_colon_variable_to_array @var{varname}
Take @var{varname}'s value, a colon separated list of string, and store
each string in the array @code{mbfl_FIELDS}, starting with a base index
of zero.

Example:

@example
VAR=a:b:c:d:e
declare -a mbfl_FIELDS

mbfl_variable_colon_variable_to_array VAR

echo $@{#mbfl_FIELDS[*]@}       @print{} 5
echo "$@{mbfl_FIELDS[0]@}"      @print{} a
echo "$@{mbfl_FIELDS[1]@}"      @print{} b
echo "$@{mbfl_FIELDS[2]@}"      @print{} c
echo "$@{mbfl_FIELDS[3]@}"      @print{} d
echo "$@{mbfl_FIELDS[4]@}"      @print{} e
@end example
@end defun


@defun mbfl_variable_array_to_colon_variable @var{varname}
Store each value from the array @code{mbfl_FIELDS} (with base index
zero) in @var{varname} as a colon separated list of strings.

Example:

@example
declare -a mbfl_FIELDS=(a b c d e)

mbfl_variable_array_to_colon_variable VAR
echo $VAR                       @print{} a:b:c:d:e
@end example
@end defun


@defun mbfl_variable_colon_variable_drop_duplicate @var{varname}
Take @var{varname}'s value, a colon separated list of string, and
remove duplicates.  Reset @var{varname} to the result.
@end defun

@c page
@node variables misc
@section Miscellaneous variable functions.


@defun mbfl_variable_alloc @var{_RV}
Generate a unique variable name and store it in the variable @var{_RV}.

To avoid allocating the same name twice: the function examines the new name testing if its value as
variable is empty; if it is empty, it considers it ``new''.  So, whenever we allocate a name: we
should locally initialise the variable to some non--empty value.

@example
local NAME

mbfl_variable_alloc NAME
$NAME   @result{} mbfl_a_variable_2323_7652
@end example
@end defun

@c page
@node arrays
@chapter Manipulating arrays


@defun mbfl_array_is_empty @var{ARRAY_VARNAME}
Return successfully if the array is empty.

@example
local -a ARRY
mbfl_array_is_empty ARRY        @result{} 0
ARRY=(a b c)
mbfl_array_is_empty ARRY        @result{} 1
@end example
@end defun


@defun mbfl_array_is_not_empty @var{ARRAY_VARNAME}
Return successfully if the array is not empty.

@example
local -a ARRY
mbfl_array_is_not_empty ARRY    @result{} 1
ARRY=(a b c)
mbfl_array_is_not_empty ARRY    @result{} 0
@end example
@end defun


@defun mbfl_array_length @var{ARRAY_VARNAME}
@defunx mbfl_array_length_var @var{_RV} @var{ARRAY_VARNAME}
Print the number of pairs in the array.

@DocVarVariant{}

@example
local -a ARRY
mbfl_array_length ARRY          @print{} 0
ARRY=(a b c)
mbfl_array_length ARRY          @print{} 3

local _RV
mbfl_array_length_var _RV ARRY
"$_RV"   @print{} 3
@end example
@end defun

@c page
@node system
@chapter Interfacing with the system


@defun mbfl_system_enable_programs
Declare the intention to use the programs required by this module.  @ref{program declaring,
Declaring the intention to use a program}.

As of version @value{VERSION}: this function does nothing; it is still here for backwards
compatibility.
@end defun


@menu
* system passwd::               Reading and searching the file
                                @file{/etc/passwd}.
* system group::                Reading and searching the file
                                @file{/etc/group}.
* system file perms::           Converting file permissions.
* system users::                Gathering users data.
@end menu

@c page
@node system passwd
@section Reading and searching the file @file{/etc/passwd}


@menu
* system passwd reading::       Reading the file @file{passwd}.
* system passwd printing::      Printing entries from @file{passwd}.
* system passwd searching::     Searching entries from @file{passwd}.
* system passwd inspect::       Inspecting entries from @file{passwd}.
* system passwd userid::        Converting user identifiers.
@end menu

@c page
@node system passwd reading
@subsection Reading the file @file{passwd}


@defun mbfl_system_passwd_read
Read the file @file{/etc/passwd} and store the resulting fields in an internal global array
variable.  Only the first call to this function will actually read the file, unless
@func{mbfl_system_passwd_reset} has been called.
@end defun


@defun mbfl_system_passwd_reset
Reset the internal state so that the next call to @func{mbfl_system_passwd_read} will actually
load, or reaload, the contents of @file{/etc/passwd}.
@end defun

@c page
@node system passwd printing
@subsection Printing entries from @file{passwd}


We are meant to call these function after a call to @func{mbfl_system_passwd_read}.


@defun mbfl_system_passwd_print_entries
Print to @stdout{} the entries of @file{passwd}, one per line.  The format of each line is:

@example
name='root' passwd='x' uid=0 gid=0 gecos='' dir='/root' \
shell='/bin/bash'
@end example
@end defun


@defun mbfl_system_passwd_print_entries_as_xml
Print to @stdout{} the entries of @file{passwd}, one per line, in @acronym{XML} format.  The
format of each line is:

@example
<entry name='root' passwd='x' uid='0' gid='0' gecos='' \
dir='/root' shell='/bin/bash'/>
@end example
@end defun


@defun mbfl_system_passwd_print_entries_as_json
Print to @stdout{} the entries of @file{passwd}, one per line, in @acronym{JSON} format.  The
format of each line is:

@example
"entry": @{ "name": "root", "passwd": "x", "uid": 0, "gid": 0, \
"gecos": "", "dir": "/root", "shell": "/bin/bash" @}
@end example
@end defun

@c page
@node system passwd searching
@subsection Searching entries from @file{passwd}


We are meant to call these function after a call to @func{mbfl_system_passwd_read}.  The following
functions inspect entries from @file{/etc/passwd} and locate them using numeric indexes; such
indexes are valid only until the next call to @func{mbfl_system_passwd_reset}.


@defun mbfl_system_passwd_find_entry_by_name @var{name}
@defunx mbfl_system_passwd_find_entry_by_name_var @var{_RV} @var{name}
Search the entries of @file{passwd} for one whose user name is @var{name}.  When successful: print
to @stdout{} the index of the entry and return true; otherwise return false.  We can use the
index with the functions described in @ref{system passwd inspect, Inspecting entries from
@file{passwd}}.

@DocVarVariant{}
@end defun


@defun mbfl_system_passwd_find_entry_by_uid @var{uid}
@defunx mbfl_system_passwd_find_entry_by_uid_var @var{_RV} @var{uid}
Search the entries of @file{passwd} for one whose user id is @var{uid}.  When successful: print to
@stdout{} the index of the entry and return true; otherwise return false.  We can use the index
with the functions described in @ref{system passwd inspect, Inspecting entries from @file{passwd}}.

@DocVarVariant{}
@end defun

@c page
@node system passwd inspect
@subsection Inspecting entries from @file{passwd}


The following functions inspect entries from @file{/etc/passwd} using an index argument; we must
obtain indexes with the functions described in @ref{system passwd searching, Searching entries from
@file{passwd}}.


@defun mbfl_system_passwd_get_name @var{idx}
@defunx mbfl_system_passwd_get_name_var @var{_RV} @var{idx}
Print to @stdout{} the field name of the @file{passwd} entry at index @var{idx}.

@DocVarVariant{}

@example
local IDX NAME

mbfl_system_passwd_read
if mbfl_system_passwd_find_entry_by_name_var IDX root
then
    if mbfl_system_passwd_get_name_var NAME $IDX
    then echo "$NAME"
    fi
fi
@end example
@end defun


@defun mbfl_system_passwd_get_passwd @var{idx}
@defunx mbfl_system_passwd_get_passwd_var @var{_RV} @var{idx}
Print to @stdout{} the field passwd of the @file{passwd} entry at index @var{idx}.

@DocVarVariant{}
@end defun


@defun mbfl_system_passwd_get_uid @var{idx}
@defunx mbfl_system_passwd_get_uid_var @var{_RV} @var{idx}
Print to @stdout{} the field uid of the @file{passwd} entry at index @var{idx}.

@DocVarVariant{}
@end defun


@defun mbfl_system_passwd_get_gid @var{idx}
@defunx mbfl_system_passwd_get_gid_var @var{_RV} @var{idx}
Print to @stdout{} the field gid of the @file{passwd} entry at index @var{idx}.

@DocVarVariant{}
@end defun


@defun mbfl_system_passwd_get_gecos @var{idx}
@defunx mbfl_system_passwd_get_gecos_var @var{_RV} @var{idx}
Print to @stdout{} the field gecos of the @file{passwd} entry at index @var{idx}.

@DocVarVariant{}
@end defun


@defun mbfl_system_passwd_get_dir @var{idx}
@defunx mbfl_system_passwd_get_dir_var @var{_RV} @var{idx}
Print to @stdout{} the field dir of the @file{passwd} entry at index @var{idx}.

@DocVarVariant{}
@end defun


@defun mbfl_system_passwd_get_shell @var{idx}
@defunx mbfl_system_passwd_get_shell_var @var{_RV} @var{idx}
Print to @stdout{} the field shell of the @file{passwd} entry at index @var{idx}.

@DocVarVariant{}
@end defun

@c page
@node system passwd userid
@subsection Converting user identifiers


We are meant to call these function after a call to @func{mbfl_system_passwd_read}; @ref{system
passwd reading, Reading the file @file{passwd}}.


@defun mbfl_system_passwd_uid_to_name @var{uid}
@defunx mbfl_system_passwd_uid_to_name_var @var{_RV} @var{uid}
Print to @stdout{} the name of the user whose uid is @var{uid}.  When successful return true;
otherwise return false.

@DocVarVariant{}

@example
local USER_NAME

if mbfl_system_passwd_read
then mbfl_system_passwd_uid_to_name 0
fi

# Using the "_var" variants.
if mbfl_system_passwd_read
then
    mbfl_system_passwd_uid_to_name_var USER_NAME 0
    echo "$USER_NAME"
fi
@end example
@end defun


@defun mbfl_system_passwd_name_to_uid @var{name}
@defunx mbfl_system_passwd_name_to_uid_var @var{_RV} @var{name}
Print to @stdout{} the id of the user whose uid is @var{uid}.  When successful return true;
otherwise return false.

@DocVarVariant{}

@example
local USER_ID

if mbfl_system_passwd_read
then mbfl_system_passwd_name_to_uid 'root'
fi

# Using the "_var" variants.
if mbfl_system_passwd_read
then
    if mbfl_system_passwd_name_to_uid_var USER_ID 'root'
    then echo "$USER_ID"
    fi
fi
@end example
@end defun


@defun mbfl_system_numerical_user_id_to_name @var{id}
Convert the numerical user @var{id} to the user name found in the @file{/etc/passwd} file; print the
result to @stdout{}.  When successful return true; otherwise return false.
@end defun


@defun mbfl_system_numerical_user_id_to_name @var{name}
Convert the symbolic user @var{name} to the numerical identifier found in the @file{/etc/passwd}
file; print the result to @stdout{}.  When successful return true; otherwise return false.
@end defun

@c page
@node system group
@section Reading and searching the file @file{/etc/group}


@menu
* system group reading::        Reading the file @file{/etc/group}.
* system group printing::       Printing entries from @file{/etc/group}.
* system group searching::      Searching entries from @file{/etc/group}.
* system group inspect::        Inspecting entries from @file{/etc/group}.
* system group groupid::        Converting group identifiers.
@end menu

@c page
@node system group reading
@subsection Reading the file @file{/etc/group}


@defun mbfl_system_group_read
Read the file @file{/etc/group} and store the resulting fields in an internal global array variable.
Only the first call to this function will actually read the file, unless
@func{mbfl_system_group_reset} has been called.
@end defun


@defun mbfl_system_group_reset
Reset the internal state so that the next call to @func{mbfl_system_group_read} will actually load,
or reaload, the contents of @file{/etc/group}.
@end defun

@c page
@node system group printing
@subsection Printing entries from @file{/etc/group}


We are meant to call these function after a call to @func{mbfl_system_group_read}.


@defun mbfl_system_group_print_entries
Print to @stdout{} the entries of @file{/etc/group}, one per line.  The format of each line is:

@example
name='root' passwd='x' gid=0 users='root'
@end example
@end defun


@defun mbfl_system_group_print_entries_as_xml
Print to @stdout{} the entries of @file{/etc/group}, one per line, in @acronym{XML} format.  The
format of each line is:

@example
<entry name='root' passwd='x' gid='0' users='root'/>
@end example
@end defun


@defun mbfl_system_group_print_entries_as_json
Print to @stdout{} the entries of @file{/etc/group}, one per line, in @acronym{JSON} format.
The format of each line is:

@example
"entry": @{ "name": "root", "passwd": "x", "gid": 0, "users": "root" @}
@end example
@end defun

@c page
@node system group searching
@subsection Searching entries from @file{/etc/group}


We are meant to call these function after a call to @func{mbfl_system_group_read}.  The following
functions inspect entries from @file{/etc/group} and locate them using numeric indexes; such indexes
are valid only until the next call to @func{mbfl_system_group_reset}.


@defun mbfl_system_group_find_entry_by_name @var{name}
@defunx mbfl_system_group_find_entry_by_name_var @var{_RV} @var{name}
Search the entries of @file{/etc/group} for one whose group name is @var{name}.  When successful:
print to @stdout{} the index of the entry and return true; otherwise return false.  We can use
the index with the functions described in @ref{system group inspect, Inspecting entries from
@file{/etc/group}}.

@DocVarVariant{}
@end defun


@defun mbfl_system_group_find_entry_by_gid @var{gid}
@defunx mbfl_system_group_find_entry_by_gid_var @var{_RV} @var{gid}
Search the entries of @file{/etc/group} for one whose group id is @var{gid}.  When successful: print
to @stdout{} the index of the entry and return true; otherwise return false.  We can use the
index with the functions described in @ref{system group inspect, Inspecting entries from
@file{/etc/group}}.

@DocVarVariant{}
@end defun

@c page
@node system group inspect
@subsection Inspecting entries from @file{/etc/group}


The following functions inspect entries from @file{/etc/group} using an index argument; we must
obtain indexes with the functions described in @ref{system group searching, Searching entries from
@file{/etc/group}}.


@defun mbfl_system_group_get_name @var{group_idx}
@defunx mbfl_system_group_get_name_var @var{_RV} @var{group_idx}
Print to @stdout{} the field name of the @file{/etc/group} entry at index @var{group_idx}.

@DocVarVariant{}

@example
local IDX NAME

mbfl_system_group_read
if mbfl_system_group_find_entry_by_name_var IDX root
then
    if mbfl_system_group_get_name_var NAME $IDX
    then echo "$NAME"
    fi
fi
@end example
@end defun


@defun mbfl_system_group_get_passwd @var{group_idx}
@defunx mbfl_system_group_get_passwd_var @var{_RV} @var{group_idx}
Print to @stdout{} the field passwd of the @file{/etc/group} entry at index @var{group_idx}.

@DocVarVariant{}
@end defun


@defun mbfl_system_group_get_gid @var{group_idx}
@defunx mbfl_system_group_get_gid_var @var{_RV} @var{group_idx}
Print to @stdout{} the field gid of the @file{/etc/group} entry at index @var{group_idx}.

@DocVarVariant{}
@end defun


@defun mbfl_system_group_get_users @var{group_idx}
@defunx mbfl_system_group_get_users_var @var{_RV} @var{group_idx}
Print to @stdout{} the field users of the @file{/etc/group} entry at index @var{group_idx}.

@DocVarVariant{}
@end defun


@defun mbfl_system_group_get_users_count @var{group_idx}
@defunx mbfl_system_group_get_users_count_var @var{_RV} @var{group_idx}
Print to @stdout{} the number of user names in the list of users for the entry at index
@var{group_idx}.

@DocVarVariant{}
@end defun


@defun mbfl_system_group_get_user_name @var{group_idx} @var{user_idx}
@defunx mbfl_system_group_get_user_name_var @var{_RV} @var{group_idx} @var{user_idx}
Print to @stdout{} the name of the user at index @var{user_idx} in the list of users for the
entry at index @var{group_idx}.

@DocVarVariant{}

@example
local -i GROUP_IDX USER_COUNT USER_IDX
local USER_NAME

mbfl_system_group_read

if GROUP_IDX=$(mbfl_system_group_find_entry_by_name root)
then
    USER_COUNT=$(mbfl_system_group_get_users_count $GROUP_IDX)
    for ((USER_IDX=0; USER_IDX < USER_COUNT; ++USER_IDX))
    do mbfl_system_group_get_user_name $GROUP_IDX $USER_IDX
    done
fi

# Using the "_var" variants.
if mbfl_system_group_find_entry_by_name_var GROUP_IDX root
then
    mbfl_system_group_get_users_count_var USER_COUNT $GROUP_IDX
    for ((USER_IDX=0; USER_IDX < USER_COUNT; ++USER_IDX))
    do
        mbfl_system_group_get_user_name_var USER_NAME \
           $GROUP_IDX $USER_IDX
        echo "$USER_NAME"
    done
else return 1
fi
@end example
@end defun

@c page
@node system group groupid
@subsection Converting group identifiers


We are meant to call these function after a call to @func{mbfl_system_group_read}; @ref{system
group reading, Reading the file @file{/etc/group}}.


@defun mbfl_system_group_gid_to_name @var{gid}
@defunx mbfl_system_group_gid_to_name_var @var{_RV} @var{gid}
Print to @stdout{} the name of the group whose gid is @var{gid}.  When successful return true;
otherwise return false.

@DocVarVariant{}

@example
local GROUP_NAME

if mbfl_system_group_read
then mbfl_system_group_gid_to_name 0
fi

# Using the "_var" variants.
if mbfl_system_group_read
then
    mbfl_system_group_gid_to_name_var GROUP_NAME 0
    echo "$GROUP_NAME"
fi
@end example
@end defun


@defun mbfl_system_group_name_to_gid @var{name}
@defunx mbfl_system_group_name_to_gid_var @var{_RV} @var{name}
Print to @stdout{} the id of the group whose gid is @var{gid}.  When successful return true;
otherwise return false.

@DocVarVariant{}

@example
local GROUP_ID

if mbfl_system_group_read
then mbfl_system_group_name_to_gid 'root'
fi

# Using the "_var" variants.
if mbfl_system_group_read
then
    if mbfl_system_group_name_to_gid_var GROUP_ID 'root'
    then echo "$GROUP_ID"
    fi
fi
@end example
@end defun


@defun mbfl_system_numerical_group_id_to_name @var{id}
Convert the numerical group @var{id} to the group name found in the @file{/etc/group} file; print the
result to @stdout{}.  When successful return true; otherwise return false.
@end defun


@defun mbfl_system_numerical_group_id_to_name @var{name}
Convert the symbolic group @var{name} to the numerical identifier found in the @file{/etc/group}
file; print the result to @stdout{}.  When successful return true; otherwise return false.
@end defun

@c page
@node system file perms
@section Converting file permissions


@defun mbfl_system_symbolic_to_octal_permissions @var{mode}
Convert three chars representing file permissions in a single octal
digit.
@end defun


@defun mbfl_system_octal_to_symbolic_permissions @var{mode}
Convert a single octal digit representing file permissions into three
chars.
@end defun

@c page
@node system users
@section Gathering users data


At package configuration time we can specify which @command{id} and @command{whoami} executables to
use through the following option for the configuration script @command{configure}:

@table @code
@item --with-whoami=/path/to/whoami
Allows the selection of the pathname to the executable @command{whoami}, which is meant to be the
program from the package @gnu{} Coreutils; this pathname is hard--coded in the library.  It defaults
to: @file{/bin/whoami}.

@item --with-id=/path/to/id
Allows the selection of the pathname to the executable @command{id}, which is meant to be the
program from the package @gnu{} Coreutils; this pathname is hard--coded in the library.  It defaults
to: @file{/bin/id}.
@end table

@menu
* system users whoami::         Determining the effective user name.
* system users id::             Determining user's IDs.
@end menu

@c page
@node system users whoami
@subsection Determining the effective user name


@defun mbfl_system_whoami
@defunx mbfl_system_whoami_var @var{_RV}
Run the program @command{whoami} to determine the effective user name; print it on the standard
output channel.  If @command{whoami} is not executable or an error occurs executing it: return by
calling @func{return_failure}.

We need to remember that a pathname to @command{whoami} is determined at package configuration time
and hard--coded in the @mbfl{} file; @ref{system users, Gathering users data}.

@example
mbfl_system_whoami      @print{} marco

@{
  mbfl_local_varref(USERNAME)
  mbfl_system_whoami_var mbfl_datavar(USERNAME)
  "$USERNAME"
@} @result{} marco
@end example
@end defun

@c page
@node system users id
@subsection Determining user's IDs


@defun mbfl_system_id @var{ARG} @dots{}
@defunx mbfl_system_id_var @var{_RV} @var{ARG} @dots{}
Run the program @command{id} handing to it the given optional arguments; the program is run through
the @func{mbfl_program_exec} interface.  If @command{id} is not executable or an error occurs
executing it: return by calling @func{return_failure}.

We need to remember that a pathname to @command{id} is determined at package configuration time and
hard--coded in the @mbfl{} file; @ref{system users, Gathering users data}.

@example
mbfl_system_id '--user' '--name'
@print{} marco

@{
  mbfl_local_varref(USERNAME)
  mbfl_system_id_var mbfl_datavar(USERNAME) '--user' '--name'
  "$USERNAME"
@} @result{} marco
@end example
@end defun


@defun mbfl_system_effective_user_id
@defunx mbfl_system_effective_user_id_var @var{_RV}
Use the functions @func{mbfl_system_id} and @func{mbfl_system_id_var} to determine the effective
user id.
@end defun


@defun mbfl_system_effective_group_id
@defunx mbfl_system_effective_group_id_var @var{_RV}
Use the functions @func{mbfl_system_id} and @func{mbfl_system_id_var} to determine the effective
group id.
@end defun


@defun mbfl_system_real_user_id
@defunx mbfl_system_real_user_id_var @var{_RV}
Use the functions @func{mbfl_system_id} and @func{mbfl_system_id_var} to determine the real user id.
@end defun


@defun mbfl_system_real_group_id
@defunx mbfl_system_real_group_id_var @var{_RV}
Use the functions @func{mbfl_system_id} and @func{mbfl_system_id_var} to determine the real group
id.
@end defun


@defun mbfl_system_effective_user_name
@defunx mbfl_system_effective_user_name_var @var{_RV}
Use the functions @func{mbfl_system_name} and @func{mbfl_system_name_var} to determine the effective
user name.
@end defun


@defun mbfl_system_effective_group_name
@defunx mbfl_system_effective_group_name_var @var{_RV}
Use the functions @func{mbfl_system_name} and @func{mbfl_system_name_var} to determine the effective
group name.
@end defun


@defun mbfl_system_real_user_name
@defunx mbfl_system_real_user_name_var @var{_RV}
Use the functions @func{mbfl_system_name} and @func{mbfl_system_name_var} to determine the real user
name.
@end defun


@defun mbfl_system_real_group_name
@defunx mbfl_system_real_group_name_var @var{_RV}
Use the functions @func{mbfl_system_name} and @func{mbfl_system_name_var} to determine the real
group name.
@end defun

@c page
@node atexit
@chapter Running scripts at exit--time


Bash allows us to execute a command whenever it exit by issuing the command:

@example
trap @meta{script} EXIT
@end example

@noindent
the atexit @mbfl{} module uses this mechanism to register, forget and run multiple commands.


@defun mbfl_atexit_enable
@defunx mbfl_atexit_disable
Register or delete @func{mbfl_atexit_run} as command for the @code{EXIT} event.  We must call this
function first if we want to use this module.
@end defun


@defun mbfl_atexit_register @var{handler}
@defunx mbfl_atexit_register @var{handler} @var{idvar}
Register a new @var{handler} command.  If the optional argument @var{idvar} is present, it must be
the name of a variable in the scope of the caller: store into such variable a unique identifier
associated to the handler.
@end defun


@defun mbfl_atexit_forget @var{id}
Remove the, previously registered, handler command associated to @var{id}.  If no handler is
associated to it: nothing happens.
@end defun


@defun mbfl_atexit_run
Run all the registered handlers, from the last registered to the first.  Whenever a handler is run:
it is removed from the internal registry.
@end defun


@defun mbfl_atexit_clear
Remove all the registered handlers from the internal registry.  This renders invalid all the handler
identifiers that were created.
@end defun

@c page
@node locations
@chapter Running location handlers


A @dfn{location} is a chunk of code between the following enter and leave actions:

@example
mbfl_location_enter
@{
   ...
@}
mbfl_location_leave
@end example

@noindent
inside a location we can register a ``handler command'' that is automatically executed whenever the
location is left by calling @func{mbfl_location_leave}.  We can nest locations at will.  We can run
all the handlers registered so far in a stack of locations.


@defun mbfl_location_enter
Enter into a new location.  Initialise the internal state.
@end defun


@defun mbfl_location_leave
Leave the current location.  Run all the registered handlers in reverse order.  Return the return
status of the last command executed before the call to this function (@code{$?}).
@end defun


@defun mbfl_location_handler @var{handler_script}
Register a new handler in the current location.  It is an error if this function is called outside a
location.
@end defun


@defun mbfl_location_run_all
Run all the handlers unwinding all the locations.  This is useful as atexit handler, @ref{atexit,
Running scripts at exit--time}.
@end defun


@defun mbfl_location_enable_cleanup_atexit
@defunx mbfl_location_disable_cleanup_atexit
Enable or disable running the location handlers through an atexit handler.  The enable operation
registers an atexit handler that cleans up the current stack of locations.
@end defun


@menu
* locations example1::          Single location, syntactic scoping.
* locations example2::          Nested locations.
* locations example3::          Nested function calls.
@end menu

@c page
@node locations example1
@section Single location, syntactic scoping


The handler functions can access the variables in the uplevel function frames.

@example
function one   () @{ R_one=$X;   @}
function two   () @{ R_two=$Y;   @}
function three () @{ R_three=$Z; @}

@{
  local R_one R_two R_three
  local X=1 Y=2 Z=3

  mbfl_location_enter
  @{
    mbfl_location_handler one
    mbfl_location_handler two
    mbfl_location_handler three
  @}
  mbfl_location_leave

  $R_one          @result{} 1
  $R_two          @result{} 2
  $R_three        @result{} 3
@}
@end example

@c page
@node locations example2
@section Nested locations


Remember that the handlers are called when a location is left:

@example
function handler_append () @{
    local THING=$@{1:?"missing thing parameter"@}
    RESULT+=$THING
@}

@{
    local RESULT

    handler_append 0
    mbfl_location_enter
    @{
        mbfl_location_handler "handler_append 1"
        mbfl_location_enter
        @{
            mbfl_location_handler "handler_append 2"
            mbfl_location_enter
            @{
                mbfl_location_handler "handler_append 3"
            @}
            mbfl_location_leave
            mbfl_location_handler "handler_append 4"
        @}
        mbfl_location_leave
        mbfl_location_handler "handler_append 5"
    @}
    mbfl_location_leave
    handler_append 6

    "$RESULT"   @result{} 0342516
@}
@end example

@c page
@node locations example3
@section Nested function calls


Remember that the handlers are called when a location is left:

@example
declare RESULT

function handler_append () @{
    local THING=$@{1:?"missing thing parameter"@}
    RESULT+=$THING
@}

function func () @{
    handler_append 0
    mbfl_location_enter
    @{
        sub-func
    @}
    mbfl_location_leave
    handler_append 6
@}

function sub-func () @{
    mbfl_location_handler "handler_append 1"
    mbfl_location_enter
    @{
        sub-sub-func
    @}
    mbfl_location_leave
    mbfl_location_handler "handler_append 5"
@}

function sub-sub-func () @{
    mbfl_location_handler "handler_append 2"
    mbfl_location_enter
    @{
        mbfl_location_handler "handler_append 3"
    @}
    mbfl_location_leave
    mbfl_location_handler "handler_append 4"
@}

func
"$RESULT"       @result{} 0342516
@end example

@c page
@node semver
@chapter Semantic version specifications


This module implements a parser for semantic version strings.

@menu
* semver spec::                 @emph{Semantic Versioning} specification.
* semver parser::               Parsing semantic version specifications.
* semver compar::               Comparing semantic version specifications.
@end menu

@c page
@node semver spec
@section @emph{Semantic Versioning} specification


The specification of @emph{Semantic Versioning} is publicly available at the site:

@center @url{https://semver.org/}

@noindent
under the terms of the @url{https://creativecommons.org/licenses/by/3.0/, Creative Commons --- CC BY
3.0}.  The @emph{Semantic Versioning} specification is authored by Tom Preston--Werner, inventor of
Gravatars and cofounder of GitHub.  @value{PACKAGE} implements a parser for version 2.0.0 of the
specification; it also adds specifications for ranges.  The full text of the specification is
included here, with small formatting changes.

Given a version number @samp{MAJOR.MINOR.PATCH}, increment the:

@enumerate
@item
@samp{MAJOR} version when you make incompatible @api{} changes.

@item
@samp{MINOR} version when you add functionality in a backwards--compatible manner.

@item
@samp{PATCH} version when you make backwards--compatible bug fixes.
@end enumerate

Additional labels for pre--release and build metadata are available as extensions to the
@samp{MAJOR.MINOR.PATCH} format.

@menu
* semver spec introduction::    Introduction.
* semver spec semver::          Semantic Versioning Specification (SemVer).
* semver spec why::             Why use semantic versioning?
* semver spec faq::             Frequently asked questions.
@end menu

@c page
@node semver spec introduction
@subsection Introduction


In the world of software management there exists a dreaded place called ``dependency hell''.  The
bigger your system grows and the more packages you integrate into your software, the more likely you
are to find yourself, one day, in this pit of despair.

In systems with many dependencies, releasing new package versions can quickly become a nightmare.
If the dependency specifications are too tight, you are in danger of version lock (the inability to
upgrade a package without having to release new versions of every dependent package).  If
dependencies are specified too loosely, you will inevitably be bitten by version promiscuity
(assuming compatibility with more future versions than is reasonable).  Dependency hell is where you
are when version lock and/or version promiscuity prevent you from easily and safely moving your
project forward.

As a solution to this problem, I propose a simple set of rules and requirements that dictate how
version numbers are assigned and incremented.  These rules are based on but not necessarily limited
to pre--existing widespread common practices in use in both closed and open--source software.  For
this system to work, you first need to declare a public @api{}.  This may consist of documentation
or be enforced by the code itself.  Regardless, it is important that this @api{} be clear and
precise.  Once you identify your public @api{}, you communicate changes to it with specific
increments to your version number.  Consider a version format of @samp{X.Y.Z}
(@samp{MAJOR.MINOR.PATCH}).  Bug fixes not affecting the @api{} increment the patch version,
backwards compatible @api{} additions/changes increment the minor version, and backwards
incompatible @api{} changes increment the major version.

I call this system @dfn{Semantic Versioning}.  Under this scheme, version numbers and the way they
change convey meaning about the underlying code and what has been modified from one version to the
next.

@c page
@node semver spec semver
@subsection Semantic Versioning Specification (SemVer)


The key words ``MUST'', ``MUST NOT'', ``REQUIRED'', ``SHALL'', ``SHALL NOT'', ``SHOULD'', ``SHOULD
NOT'', ``RECOMMENDED'', ``MAY'', and ``OPTIONAL'' in this document are to be interpreted as
described in @rfc{} 2119.

@enumerate
@item
Software using @emph{Semantic Versioning} MUST declare a public @api{}.  This @api{} could be
declared in the code itself or exist strictly in documentation.  However it is done, it should be
precise and comprehensive.

@item
A normal version number MUST take the form @samp{X.Y.Z} where @samp{X}, @samp{Y}, and @samp{Z} are
non--negative integers, and MUST NOT contain leading zeroes.  @samp{X} is the major version,
@samp{Y} is the minor version, and @samp{Z} is the patch version.  Each element MUST increase
numerically.  For instance: @samp{1.9.0 -> 1.10.0 -> 1.11.0}.

@item
Once a versioned package has been released, the contents of that version MUST NOT be modified.  Any
modifications MUST be released as a new version.

@item
Major version zero (@samp{0.y.z}) is for initial development.  Anything may change at any time.  The
public @api{} should not be considered stable.

@item
Version @samp{1.0.0} defines the public @api{}.  The way in which the version number is incremented
after this release is dependent on this public @api{} and how it changes.

@item
Patch version @samp{Z} (@samp{x.y.Z | x > 0}) MUST be incremented if only backwards compatible bug
fixes are introduced.  A bug fix is defined as an internal change that fixes incorrect behavior.

@item
Minor version @samp{Y} (@samp{x.Y.z | x > 0}) MUST be incremented if new, backwards compatible
functionality is introduced to the public @api{}.  It MUST be incremented if any public @api{}
functionality is marked as deprecated.  It MAY be incremented if substantial new functionality or
improvements are introduced within the private code.  It MAY include patch level changes.  Patch
version MUST be reset to @samp{0} when minor version is incremented.

@item
Major version @samp{X} (@samp{X.y.z | X > 0}) MUST be incremented if any backwards incompatible
changes are introduced to the public @api{}.  It MAY include minor and patch level changes.  Patch
and minor version MUST be reset to @samp{0} when major version is incremented.

@item
A pre--release version MAY be denoted by appending a hyphen and a series of dot separated
identifiers immediately following the patch version.  Identifiers MUST comprise only @ascii{}
alphanumerics and hyphen @samp{[0-9A-Za-z-]}.  Identifiers MUST NOT be empty.  Numeric identifiers
MUST NOT include leading zeroes.  Pre--release versions have a lower precedence than the associated
normal version.  A pre--release version indicates that the version is unstable and might not satisfy
the intended compatibility requirements as denoted by its associated normal version.  Examples:
@samp{1.0.0-alpha}, @samp{1.0.0-alpha.1}, @samp{1.0.0-0.3.7}, @samp{1.0.0-x.7.z.92}.

@item
Build metadata MAY be denoted by appending a plus sign and a series of dot separated identifiers
immediately following the patch or pre--release version.  Identifiers MUST comprise only @ascii{}
alphanumerics and hyphen @samp{[0-9A-Za-z-]}.  Identifiers MUST NOT be empty.  Build metadata SHOULD
be ignored when determining version precedence.  Thus two versions that differ only in the build
metadata, have the same precedence.  Examples: @samp{1.0.0-alpha+001}, @samp{1.0.0+20130313144700},
@samp{1.0.0-beta+exp.sha.5114f85}.

@item
Precedence refers to how versions are compared to each other when ordered.  Precedence MUST be
calculated by separating the version into major, minor, patch and pre-release identifiers in that
order (build metadata does not figure into precedence).  Precedence is determined by the first
difference when comparing each of these identifiers from left to right as follows: @samp{MAJOR},
@samp{MINOR}, and @samp{PATCH} versions are always compared numerically.  Example:

@example
1.0.0 < 2.0.0 < 2.1.0 < 2.1.1
@end example

When @samp{MAJOR}, @samp{MINOR}, and @samp{PATCH} are equal, a pre--release version has lower
precedence than a normal version.  Example:

@example
1.0.0-alpha < 1.0.0
@end example

Precedence for two pre--release versions with the same @samp{MAJOR}, @samp{MINOR}, and @samp{PATCH}
version MUST be determined by comparing each dot separated identifier from left to right until a
difference is found as follows: identifiers consisting of only digits are compared numerically and
identifiers with letters or hyphens are compared lexically in @ascii{} sort order.  Numeric
identifiers always have lower precedence than non--numeric identifiers.  A larger set of
pre--release fields has a higher precedence than a smaller set, if all of the preceding identifiers
are equal.  Example:

@example
1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-alpha.beta < 1.0.0-beta <
< 1.0.0-beta.2 < 1.0.0-beta.11 < 1.0.0-rc.1 < 1.0.0
@end example
@end enumerate

@c page
@node semver spec why
@subsection Why use semantic versioning?


This is not a new or revolutionary idea.  In fact, you probably do something close to this already.
The problem is that ``close'' isn't good enough.  Without compliance to some sort of formal
specification, version numbers are essentially useless for dependency management.  By giving a name
and clear definition to the above ideas, it becomes easy to communicate your intentions to the users
of your software.  Once these intentions are clear, flexible (but not too flexible) dependency
specifications can finally be made.

A simple example will demonstrate how @emph{Semantic Versioning} can make dependency hell a thing of
the past.  Consider a library called ``Firetruck''.  It requires a Semantically Versioned package
named ``Ladder''.  At the time that Firetruck is created, Ladder is at version @samp{3.1.0}.  Since
Firetruck uses some functionality that was first introduced in @samp{3.1.0}, you can safely specify
the Ladder dependency as greater than or equal to @samp{3.1.0} but less than @samp{4.0.0}.  Now,
when Ladder version @samp{3.1.1} and @samp{3.2.0} become available, you can release them to your
package management system and know that they will be compatible with existing dependent software.

As a responsible developer you will, of course, want to verify that any package upgrades function as
advertised.  The real world is a messy place; there's nothing we can do about that but be vigilant.
What you can do is let @emph{Semantic Versioning} provide you with a sane way to release and upgrade
packages without having to roll new versions of dependent packages, saving you time and hassle.

If all of this sounds desirable, all you need to do to start using @emph{Semantic Versioning} is to
declare that you are doing so and then follow the rules.  Link to this website from your README so
others know the rules and can benefit from them.

@c page
@node semver spec faq
@subsection Frequently asked questions


@enumerate
@item How should I deal with revisions in the @samp{0.y.z} initial development phase?

The simplest thing to do is start your initial development release at @samp{0.1.0} and then
increment the minor version for each subsequent release.

@c ------------------------------------------------------------------------

@item How do I know when to release @samp{1.0.0}?

If your software is being used in production, it should probably already be @samp{1.0.0}.  If you
have a stable @api{} on which users have come to depend, you should be @samp{1.0.0}.  If you're
worrying a lot about backwards compatibility, you should probably already be @samp{1.0.0}.

@c ------------------------------------------------------------------------

@item Doesn't this discourage rapid development and fast iteration?

Major version zero is all about rapid development.  If you're changing the @api{} every day you
should either still be in version @samp{0.y.z} or on a separate development branch working on the
next major version.

@c ------------------------------------------------------------------------

@item If even the tiniest backwards incompatible changes to the public @api{} require a major version bump, won't I end up at version @samp{42.0.0} very rapidly?

This is a question of responsible development and foresight.  Incompatible changes should not be
introduced lightly to software that has a lot of dependent code.  The cost that must be incurred to
upgrade can be significant.  Having to bump major versions to release incompatible changes means
you'll think through the impact of your changes, and evaluate the cost/benefit ratio involved.

@c ------------------------------------------------------------------------

@item Documenting the entire public @api{} is too much work!

It is your responsibility as a professional developer to properly document software that is intended
for use by others.  Managing software complexity is a hugely important part of keeping a project
efficient, and that's hard to do if nobody knows how to use your software, or what methods are safe
to call.  In the long run, @emph{Semantic Versioning}, and the insistence on a well defined public
@api{} can keep everyone and everything running smoothly.

@c ------------------------------------------------------------------------

@item What do I do if I accidentally release a backwards incompatible change as a minor version?

As soon as you realize that you've broken the @emph{Semantic Versioning} spec, fix the problem and
release a new minor version that corrects the problem and restores backwards compatibility.  Even
under this circumstance, it is unacceptable to modify versioned releases.  If it's appropriate,
document the offending version and inform your users of the problem so that they are aware of the
offending version.

@c ------------------------------------------------------------------------

@item What should I do if I update my own dependencies without changing the public @api{}?

That would be considered compatible since it does not affect the public @api{}.  Software that
explicitly depends on the same dependencies as your package should have their own dependency
specifications and the author will notice any conflicts.  Determining whether the change is a patch
level or minor level modification depends on whether you updated your dependencies in order to fix a
bug or introduce new functionality.  I would usually expect additional code for the latter instance,
in which case it's obviously a minor level increment.

@c ------------------------------------------------------------------------

@item What if I inadvertently alter the public @api{} in a way that is not compliant with the version number change (i.e. the code incorrectly introduces a major breaking change in a patch release)?

Use your best judgment.  If you have a huge audience that will be drastically impacted by changing
the behavior back to what the public @api{} intended, then it may be best to perform a major version
release, even though the fix could strictly be considered a patch release.  Remember, @emph{Semantic
Versioning} is all about conveying meaning by how the version number changes.  If these changes are
important to your users, use the version number to inform them.

@c ------------------------------------------------------------------------

@item How should I handle deprecating functionality?

Deprecating existing functionality is a normal part of software development and is often required to
make forward progress.  When you deprecate part of your public @api{}, you should do two things: (1)
update your documentation to let users know about the change, (2) issue a new minor release with the
deprecation in place.  Before you completely remove the functionality in a new major release there
should be at least one minor release that contains the deprecation so that users can smoothly
transition to the new @api{}.

@c ------------------------------------------------------------------------

@item Does @emph{Semantic Versioning} have a size limit on the version string?

No, but use good judgement.  A 255 character version string is probably overkill, for example.
Also, specific systems may impose their own limits on the size of the string.
@end enumerate

@c page
@node semver parser
@section Parsing semantic version specifications


@defun mbfl_semver_parse @var{_RV} @var{INPUT_STRING} @var{START_INDEX_VAR}
Parse the semantic version specification in a substring of @var{INPUT_STRING} according to the
current values in the global configuration array @env{mbfl_semver_CONFIG}; when successful return 0,
otherwise return 1.

Parsing starts at the zero--based numeric index stored in the variable named @var{START_INDEX_VAR}.

When successful: store the parsing results in the array whose name is @var{_RV} and mutate the
variable whose name is @var{START_INDEX_VAR} to the numeric index of the next character in
@var{INPUT_STRING} to be parsed.

The associative array @var{_RV} is filled with the result of the parsing operation.  When parsing is
successful, it will hold the following keys:

@table @code
@item MAJOR_NUMBER
The major version number.

@item MINOR_NUMBER
The minor version number.

@item PATCH_LEVEL
The patch level number

@item PRERELEASE_VERSION
The prerelease version specification; it @strong{does not} contain the leading hyphen character
@samp{-}.

@item BUILD_METADATA
The build metadata specification; it @strong{does not} contain the leading plus character @samp{+}.

@item START_INDEX
An integer representing the index of the first character in @var{INPUT_STRING} containing the
semantic version specification.  It is the same value in the data variable whose name is
@var{START_INDEX_VAR}.

@item END_INDEX
An integer representing the index of the first character in @var{INPUT_STRING} @strong{after} the
last parsed character.  If the string holds further text after the semantic version specification:
we can start parsing it at this index.
@end table

In addition, if an error occurred while parsing: a pair with  key @code{PARSING_ERROR_MESSAGE} is
added to the array; its value is a string describing the parsing error.

In the following example we parse a correct semantic version specification; with prerelease version;
with build metadata.

@example
local -r INPUT_STRING='1.2.3-alpha.1+x86-64'
mbfl_local_varref(START_INDEX, 0, -i)
mbfl_local_varref(RV,,-A)

mbfl_semver_parse mbfl_datavar(RV) "$INPUT_STRING" mbfl_datavar(START_INDEX)

$?                                      @result{} 0
"$@{RV[PARSING_ERROR_MESSAGE]@}"          @result{} ''
"$@{RV[MAJOR_NUMBER]@}"                   @result{} 1
"$@{RV[MINOR_NUMBER]@}"                   @result{} 2
"$@{RV[PATCH_LEVEL]@}"                    @result{} 3
"$@{RV[PRERELEASE_VERSION]@}"             @result{} alpha.1
"$@{RV[BUILD_METADATA]@}"                 @result{} x86-64
"$@{RV[START_INDEX]@}"                    @result{} 0
"$@{RV[END_INDEX]@}"                      @result{} $@{#INPUT_STRING@}
"$START_INDEX"                          @result{} $@{#INPUT_STRING@}
@end example
@end defun


@defun mbfl_semver_reset_config
Reset the parser configuration array @env{mbfl_semver_CONFIG} to its default values.
@end defun


@defvr {Array Variable} mbfl_semver_CONFIG
Global associative array variable holding the configuration of the semantic version specification
parser.  It has the following keys:

@table @code
@item PARSE_LEADING_V
Establish whether the semantic version specification must begin with a @samp{v} character.  Accepted
values:

@table @code
@item mandatory
The leading @samp{v} is mandatory; if it is missing: an error is returned.

@item missing
The leading @samp{v} is invalid; if it is present: an error is returned.

@item optional
The leading @samp{v} is optional: if it is present, it is parsed; otherwise nothing happens.  This
is the defult.
@end table

@noindent
Any other value is equivalent to @code{optional}.

@item ACCEPT_UNDERSCORE_IN_BUILD_METADATA
When @code{true}: accept underscore characters @samp{_} in the identifiers of the build metadata;
this is an extension of the standard; the default is @code{false}.
@end table
@end defvr


@defun mbfl_semver_split_prerelease_version @var{_RV} @var{PRERELEASE_VERSION_SPEC}
Split a @var{PRERELEASE_VERSION_SPEC} into its component identifiers and store them in the indexed
array whose name is @var{_RV}.  If successful return 0; otherwise return 1.

The string @var{PRERELEASE_VERSION_SPEC} must be correct prerelease version specification, without
the leading hyphen character, like the one produced by calling @func{mbfl_semver_parse}.  If the
string has an incorrect format: the behaviour of this function is undefined.

In the following exmample we split a prerelease version specification:

@example
mbfl_local_varref(RV,, -A)

mbfl_semver_split_prerelease_version mbfl_datavar(RV) 'alpha.12.beta.34.gamma.56'

$?            @result{} 0
$@{#RV[@@]@}     @result{} 6
$@{RV[0]@}      @result{} 'alpha'
$@{RV[1]@}      @result{} '12'
$@{RV[2]@}      @result{} 'beta'
$@{RV[3]@}      @result{} '34'
$@{RV[4]@}      @result{} 'gamma'
$@{RV[5]@}      @result{} '56'
@end example
@end defun

@c page
@node semver compar
@section Comparing semantic version specifications


@defun mbfl_semver_compare_var @var{_RV} @vari{SPEC} @varii{SPEC}
Store in the data variable whose name is @var{_RV} the result of comparing the semantic version
specifications @vari{SPEC} and  @varii{SPEC}; when successful return 0, otherwise return 1.

The value stored in the result variable is the classic ternary comparison result:

@table @code
@item -1
If @vari{spec} < @varii{SPEC}.

@item 0
If @vari{spec} = @varii{SPEC}.

@item +1
If @vari{spec} > @varii{SPEC}.
@end table

Usage examples:

@example
@{
  mbfl_local_varref(RV)
  mbfl_semver_compare_var mbfl_datavar(RV) '1.2.3' '1.2.3'
  $?            @result{} 0
  $RV           @result{} 0
@}

@{
  mbfl_local_varref(RV)
  mbfl_semver_compare_var mbfl_datavar(RV) '1.2.3' '1.9.3'
  $?            @result{}  0
  $RV           @result{} -1
@}

@{
  mbfl_local_varref(RV)
  mbfl_semver_compare_var mbfl_datavar(RV) '1.2.3-alpha.1' '1.2.3-alpha.0'
  $?            @result{}  0
  $RV           @result{} +1
@}
@end example
@end defun


@defun mbfl_semver_compare_components_var @var{_RV} @vari{COMP} @varii{COMP}
Like @func{mbfl_semver_compare_var} but compare already parsed semantic version specifications whose
components are stored in two associative arrays whose variable names are @vari{COMP} and
@varii{COMP}.  The arrays should be the ones set by @func{mbfl_semver_parse}.

Examples:

@example
local -r SPEC1='1.2.3-alpha.3+x86-64'
mbfl_local_varref(COMPONENTS1,, -A)
mbfl_local_varref(INDEX1, 0, -i)

local -r SPEC2='1.2.9-devel.2+x86-64'
mbfl_local_varref(COMPONENTS2,, -A)
mbfl_local_varref(INDEX2, 0, -i)

mbfl_semver_parse mbfl_datavar(COMPONENTS1) "$SPEC1" mbfl_datavar(INDEX1)
mbfl_semver_parse mbfl_datavar(COMPONENTS2) "$SPEC2" mbfl_datavar(INDEX2)

mbfl_local_varref(RV)
mbfl_semver_compare_components_var \
  mbfl_datavar(RV) mbfl_datavar(COMPONENTS1) mbfl_datavar(COMPONENTS2)
$?      @result{}  0
$RV     @result{} -1
@end example
@end defun

@c page
@node main
@chapter Main function


@mbfl{} declares a function to drive the execution of the script; its purpose is to make use of the
other modules to reduce the size of scripts depending on @mbfl{}.  All the code blocks in the
script, with the exception of global variables declaration, should be enclosed in functions.

@menu
* main variables::              Command line arguments variables.
* main function::               Driving script execution.
* main exit::                   Declaring exit codes.
* main misc::                   Other functions.
@end menu

@c page
@node main variables
@section Command line arguments variables


The following global variables are defined by default.


@defvar ARGV1
An array containing all the command line arguments.  When no command line arguments are present:
this array is empty.  The indexes in this array are zero--based.
@end defvar


@defvar ARGC1
A non--negative integer representing the number of values in @code{ARGV1}.  When no command line
arguments are present: this variable is set to zero.
@end defvar


@defvar ARG1ST
A non--negative integer representing the index in @code{ARGV1} of the next argument to be processed.
It is initialised to zero; the @code{actions} module increments it to reflect its consuming of
action arguments; the @code{getopts} module uses this value to locate the first argument to parse.
@end defvar


@defvar ARGV
An array containing all the non--action and non--option command line arguments.  When no such
arguments are present: this array is empty.  This variable is filled by the @code{getopts} module.
The indexes in this array are zero--based.

Remembering the Bash syntax for arrays, we can expand the array to all its items with:

@example
"$@{ARGV[@@]@}"
@end example
@end defvar


@defvar ARGC
A non--negative integer representing the number of values in @code{ARGV}.  When no arguments are
present: this variable is set to zero.
@end defvar

@c page
@node main function
@section Driving script execution


@findex script_after_parsing_options
@findex script_before_parsing_options


@defun mbfl_main
The invocation to this function must be the last line of code in the script.  It does the following:

@enumerate
@item
Register the value of the variable @code{script_PROGNAME} in the message module using the function
@func{mbfl_message_set_progname}.

@item
Invoke @func{mbfl_main_create_exit_functions}.  @ref{main exit, Declaring exit codes}.

@item
Validate the semantic version specification hard--coded in the @mbfl{} with the requirements of the
script.  If an error occurs in this step: terminate the script by calling
@func{exit_because_invalid_mbfl_version}, @ref{exit_because_invalid_mbfl_version}.

@enumerate a
@item
Check if a function named @func{script_check_mbfl_semantic_version} exists.  If it does not exist:
move on to the next step.  If it does exist: call it with @mbfl{}'s semantic version specification
string as single argument; if the function returns successfully: the version requirements are
considered satisfied; otherwise exit the script by calling @func{exit_because_invalid_mbfl_version}.

@item
Check if the service variable @env{script_REQUIRED_MBFL_VERSION} is defined to a non--empty value,
the value is expected to be a valid semantic version specification representing the minimum version
required by the script; @ref{script_REQUIRED_MBFL_VERSION, Service variables}.

If an error occurs while parsing the semantic version specification in
@env{script_REQUIRED_MBFL_VERSION}: terminate the script by calling
@func{exit_because_invalid_mbfl_version}.

If @mbfl{}'s version is lesser than the one required by the script: terminate the script itself by
calling @func{exit_because_invalid_mbfl_version}; otherwise the version requirements are considered
satisfied.
@end enumerate

@item
Parse the command line arguments according to the command actions configuration; this step may
change the selection of: main function, ``before parsing options'' function, ``after parsing
options'' function; if no command actions are configured: nothing is done.

This function searches for a declared action set with name @code{MAIN}: if such set exists, it
expects the first command line argument to be an action identifier in the set.

@item
If it exists: invoke the function @func{script_before_parsing_options} or the one selected by
@func{mbfl_main_set_before_parsing_options}.

@item
Parse command line options with @func{mbfl_getopts_parse}.

@item
If it exists: invoke the function @func{script_after_parsing_options} or the one selected by
@func{mbfl_main_set_after_parsing_options}.

@item
Invoke the function whose name is stored in the global variable @code{mbfl_main_SCRIPT_FUNCTION}, if
it exists, with no arguments; if its return value is non--zero: exit the script with the same code.
The default value is @code{main}.

@item
Exit the script with the return code of the action function or zero.
@end enumerate
@end defun


@defun mbfl_main_set_main @var{funcname}
Select the main function storing @var{funcname} into @code{mbfl_main_SCRIPT_FUNCTION}.
@end defun


@defvar mbfl_main_SCRIPT_FUNCTION
Global variable that holds the name of the custom main script function.  The default name is
@code{main}.
@end defvar


@defun mbfl_main_set_before_parsing_options @var{funcname}
The name of the function to be called right before parsing command line options.  This value can be
customised by both the @mbfl{} and the user script.

The default function name is: @code{script_before_parsing_options}.
@end defun


@defun mbfl_main_set_after_parsing_options @var{funcname}
The name of the function to be called right after parsing command line options.  This value can be
customised by both the @mbfl{} and the user script.

The default function name is: @code{script_after_parsing_options}.
@end defun

@c page
@node main exit
@section Declaring exit codes


Some functions and global variables are provided to declare script's exit codes.  The @mbfl{}
declares its own exit codes starting from @code{100} and decreasing; we should declare our exit
codes starting from @code{3} and increasing.  The exit codes @code{0} and @code{1} are reserved for
the functions @func{exit_because_success} and @func{exit_because_failure}.


@defun mbfl_exit
Wrapper for the @command{exit} command that updates the internal state.
@end defun


@defvar mbfl_main_pending_EXIT_CODE
Set by @func{mbfl_exit} to the exit code this script is using.  This variable might be accessed by
atexit commands to appropriately react to an error condition.
@end defvar


@defun mbfl_main_is_exiting
Return true if the script is exiting.  This function might be called by a location command being run
by an atexit command.
@end defun


@defun mbfl_main_declare_exit_code @var{code} @var{name}
Declare an exit code with value @var{code} and identifier @var{name}.
@end defun


@defun mbfl_main_create_exit_functions
For each of the codes declared with @func{mbfl_main_declare_exit_code}: create a function for the
@code{exit} command using the numerical code; create an alias for the @code{return} command using
the numerical code.  For example, if a code is declared as:

@example
mbfl_main_declare_exit_code 4 unexistent_file
@end example

@noindent
a function is created with:

@example
function exit_because_unexistent_file () @{ mbfl_exit 4; @}
@end example

@noindent
and an alias is created with:

@example
alias return_because_unexistent_file='return 4'
@end example

@noindent
the name of the function is the string @code{exit_because_} followed by the exit code name; the name
of the alias is the string @code{return_because_} followed by the exit code name.  The function may
be used in the script to exit the process.
@end defun


By default the exit code @code{0} is associated to the name @code{success} and the exit code
@code{1} is associated to the name @code{failure}; so the following functions exist.


@defun exit_because_success
@defunx exit_success
Exit the script with code @code{0}.
@end defun


@defun return_because_success
@defunx return_success
Return with code @code{0}.
@end defun


@defun exit_because_failure
@defunx exit_failure
Exit the script with code @code{1}.
@end defun


@defun return_because_failure
@defunx return_failure
Return with code @code{1}.
@end defun


@defun exit_because_error_loading_library
Exit the script with code @code{100}.
@end defun


@defun return_because_error_loading_library
Return with code @code{100}.
@end defun


@anchor{exit_because_invalid_mbfl_version}
@defun exit_because_invalid_mbfl_version
Exit the script with code @code{88}.
@end defun


@defun mbfl_main_print_exit_code @var{name}
Print the code associated to @var{name}.
@end defun

@c page
@node main misc
@section Other functions


@defun mbfl_invoke_script_function @var{funcname}
If @var{funcname} is the name of an existing function: it is invoked with no arguments; the return
value is the one of the called function.  The existence test is performed with:

@example
type -t @var{FUNCNAME} = function
@end example

If the function does not exist: return by calling @code{return_because_invalid_function_name}.
@end defun


@defun mbfl_invoke_existent_script_function @var{funcname}
Like @func{mbfl_invoke_script_function}, but if the function does not exist: print an error message
to @stderr{} and exit by calling @func{exit_because_invalid_function_name}.
@end defun


@defun exit_because_invalid_function_name
@defunx return_because_invalid_function_name
Exit or return with code @code{91}.
@end defun


@defun mbfl_main_print_usage_screen_long
Print the help screen, long version.  It @strong{includes} the predefined command line options.
@end defun


@defun mbfl_main_print_usage_screen_brief
Print the help screen, brief version.  It @strong{excludes} the predefined command line options.
@end defun

@c page
@node testing
@chapter Building test suites


@mbfl{} comes with a little library of functions that may be used to
build test suites; its aim is at building tests for Bash functions,
commands and scripts.

The ideas at the base of this library are taken from the @code{tcltest}
package distributed with the @acronym{TCL} core @footnote{@acronym{TCL}
stands for @emph{Tool Command Language} and it is a scripting language
originally written by John Ousterhout, see: @url{http://www.tcl.tk/}.};
this package had contributions from the following people/entities: Sun
Microsystems, Inc.; Scriptics Corporation; Ajuba Solutions; Don Porter,
@acronym{NIST}; probably many many others.

The library tries to do as much as possible using functions and aliases,
not variables; this is an attempt to let the user redefine functions to
his taste.


@menu
* testing intro::               A way to organise a test suite.
* testing shell::               A script to run tests.
* testing config::              Configuring the package.
* testing running::             Running tests.
* testing compare::             Validating results by comparing.
* testing output::              Validating results by output.
* testing messages::            Printing messages from test functions.
* testing files::               Handling files in tests.
@end menu

@c page
@node testing intro
@section A way to organise a test suite


A useful way to organise a test suite is to split it into a set of
files: one for each module to be tested.

The file @file{libmbfltest.sh} must be sourced at the beginning of each
test file.  This means that the variables that you set may interfere
with the ones in the library; this should not happen because the test
library prefixes variable names with @code{mbfl_} or @code{dotest_}, but
one exception is @env{TMPDIR}: do not set it in your script, use
@func{dotest-echo-tmpdir} to access that value.  @ref{testing files,
Handling files in tests}.


@subsubheading A not so automated example

To understand how the library works lets examine a bare bones example.

The function @code{dotest} should be invoked at the end of each module
in the test suite; each module should define functions starting with the
same prefix.  A module should be stored in a file, and should look like
the following:

@example
# mymodule.test --

source libmbfltest.sh
source module.sh

function module-featureA-1.1 () @{ ... @}
function module-featureA-1.2 () @{ ... @}
function module-featureA-2.1 () @{ ... @}
function module-featureB-1.1 () @{ ... @}
function module-featureB-1.2 () @{ ... @}

dotest module-
dotest-final-report

### end of file
@end example

@noindent
the file should be executed with:

@example
$ bash mymodule.test
@end example

To test just "feature A":

@example
$ TESTMATCH=module-featureA bash mymodule.test
@end example

Remember that the @code{source} builtin will look for files in the
directories selected by the @env{PATH} environment variables, so we may
want to do:

@example
$ PATH=path/to/modules:$@{PATH@} \
TESTMATCH=module-featureA bash mymodule.test
@end example

It is better to put such stuff in a @file{Makefile}, with @gnu{} Make:

@example
srcdir        = ...
builddir      = ...
BASH_PROGRAM  = bash
MODULES       = moduleA moduleB

testdir       = $(srcdir)/tests
test_FILES    = $(foreach f,$(MODULES),$(testdir)/$(f).test)

test_ENV      = PATH=$(builddir):$(testdir):$(PATH) \
                TESTMATCH=$(TESTMATCH)
test_CMD      = $(test_ENV) $(BASH_PROGRAM)

.PHONY: test-modules

test-modules:
        @@$(foreach f,$(test_FILES),$(test_CMD) $(f);)
@end example

@c page
@node testing shell
@section A script to run tests


@mbfl{} comes with a script that can be used to handle the execution
of tests; it is called @command{mbfltest.sh}.  Synopsis:

@example
mbfltest.sh [options] TESTFILE ...
@end example

@noindent
supported options are all the @mbfl{} generic ones (@ref{getopts
options, Predefined options}) and additionally:

@table @code
@item --start
Print start messages for tests, it is the same as invoking
@func{dotest-set-report-start}.

@item --end
Print end messages for tests, it is the same as invoking
@func{dotest-set-report-success}.

@item --match=VALUE
Select match pattern for tests, it is the same as setting the
@env{TESTMATCH} variable.

@item --directory=VALUE
Change directory before executing tests, but after having located the
test files on the file system.

@item --library=VALUE
Select a specific version of the @mbfl{} library.
@end table

When running tests with the script: in the test modules we can omit the
sourcing of @mbfl{} and the @mbfl{} test library, @command{mbfltest.sh}
does this before sourcing the test module.  Each test module is evaluated
in a @bash{} subprocess, so: there is no interference between modules;
each module has to do its own initialisation and finalisation.

With @gnu{} Make we can do:

@example
MBFLTEST        = mbfltest.sh
MBFLTEST_FLAGS  = --end
ifneq (,$(TESTMATCH))
MBFLTEST_FLAGS  += --match=$(TESTMATCH)
endif

srcdir          = ...
testdir         = $(srcdir)/tests
TESTNAME        = *
TESTFILES       = $(wildcard $(testdir)/$(TESTNAME).test)

.PHONY: test tests

ifneq ($(strip $(TESTFILES)),)
test tests:
        $(MBFLTEST) $(MBFLTEST_FLAGS) $(TESTFILES)
endif
@end example

@c page
@node testing config
@section Configuring the package


@defun dotest-set-verbose
@defunx dotest-unset-verbose
Set or unset verbose execution.  If verbose mode is on: some commands
output messages on stderr describing what is going on.  Examples: files
and directories creation/removal.
@end defun


@defun dotest-option-verbose
Return true if verbose mode is on, false otherwise.
@end defun


@defun dotest-set-test
@defunx dotest-unset-test
Set or unset test execution.  If test mode is on: external commands (like
@command{rm} and @command{mkdir}) are not executed, the command line is
sent to stderr.  Test mode is meant to be used to debug the test library
functions.
@end defun


@defun dotest-option-test
Return true if test mode is on, false otherwise.
@end defun


@defun dotest-set-debug
@defunx dotest-unset-debug
Enable or disable printing debug messages.  If debug mode is on: the function @func{dotest-debug}
will print its message; otherwise it will print nothing.
@end defun


@defun dotest-option-debug
Return true if debug mode is on, false otherwise.
@end defun


@defun dotest-set-report-start
@defunx dotest-unset-report-start
Set or unset printing a message upon starting a function.
@end defun


@defun dotest-option-report-start
Return true if start function reporting is on; otherwise return false.
@end defun


@defun dotest-set-report-success
@defunx dotest-unset-report-success
Set or unset printing a message when a function execution
succeeds.  Failed tests always cause a message to be printed.
@end defun


@defun dotest-option-report-success
Return true if success function reporting is on; otherwise return
false.
@end defun

@c page
@node testing running
@section Running test functions


@defun dotest-final-report
This function must be invoked as last command in the test file to report
errors and correctly exit the test script (in a way compatible with the
requirements of @gnu{} Automake).
@end defun


@defun dotest @var{pattern}
Run all the functions matching @var{pattern}.  Usually @var{pattern} is
the first part of the name of the functions to be executed; the function
names are selected with the following code:

@example
compgen -A function @var{pattern}
@end example

There's no constraint on function names, but they must be one--word
names.

Before running a test function: the current process working directory is
saved, and it is restored after the execution is terminated.

The return value of the test functions is used as result of the test:
true, the test succeeded; false, the test failed.  Remembering that the
return value of a function is the return value of its last executed
command, the functions @func{dotest-equal} and @func{dotest-output}, and
of course the @command{test} command, may be used to return the correct
value.
@end defun


Messages are printed before and after the execution of each function,
according to the mode selected with: @func{dotest-set-report-success},
@func{dotest-set-report-start}, @dots{}  @ref{testing config,
Configuring the package}

The following environment variables will influence the behaviour of
@func{dotest}.


@defvar TESTMATCH
Restrict the @var{pattern} argument to @func{dotest}.  First function names are matched against
@var{pattern}, then, the ones that match, are matched against @env{TESTMATCH}.
@end defvar


@defvar TESTSTART
If @code{yes}: It is equivalent to invoking
@func{dotest-set-report-start}.  If @code{no}: It is equivalent to
invoking @func{dotest-unset-report-start}.
@end defvar


@defvar TESTSUCCESS
If @code{yes}: It is equivalent to invoking
@func{dotest-set-report-success}.  If @code{no}: It is equivalent to
invoking @func{dotest-unset-report-success}.
@end defvar

@c page
@node testing compare
@section Validating results by comparing


@defun dotest-equal @var{expected} @var{got}
@defunx dotest-equal @var{expected} @var{got} @var{description}
Compare the two parameters and return true if they are equal; return false otherwise.  In the latter
case print a message showing the expected value and the wrong one.  Must be used as last command in
a function, so that its return value is equal to that of the function.

The optional argument @var{description} should be a short, one--line, string describing the expected
value; it is used in the output text describing the failed comparison.
@end defun


Example:

@example
function my-func () @{
    echo $(($1 + $2))
@}
function mytest-1.1 () @{
    dotest-result 5 `my-func 2 3`
@}
dotest mytest-
@end example

@noindent
another example:

@example
function my-func () @{
    echo $(($1 + $2))
@}
function mytest-1.1 () @{
    dotest-result 5 `my-func 2 3` && \
      dotest-result 5 `my-func 1 4` && \
      dotest-result 5 `my-func 3 2` && \
@}
dotest mytest-
@end example

@c page
@node testing output
@section Validating results by output


@defun dotest-output
@defunx dotest-output @var{string}
@defunx dotest-output @var{string} @var{description}
Read all the available lines from stdin accumulating them into a local variable, separated by
@code{\n}; then compare the input with @var{string}, or the empty string if @var{string} is not
present, and return true if they are equal, false otherwise.

The optional argument @var{description} should be a short, one--line, string describing the expected
value; it is used in the output text describing the failed comparison.
@end defun


Example of test for a function that echoes its three parameters:

@example
function my-lib-function () @{
    echo $1 $2 $3
@}
function mytest-1.1 () @{
    my-lib-function a b c | dotest-output "a b c"
@}
dotest mytest
@end example

Example of test for a function that is supposed to print nothing:

@example
function my-lib-function () @{
    test "$1" != "$2" && echo error
@}
function mytest-1.1 () @{
    my-lib-function a a | dotest-output
@}
dotest mytest
@end example

@c page
@node testing messages
@section Printing messages from test functions


@deffn Alias dotest-echo @var{string} [@var{arg} @dots{}]
@deffnx Alias dotest-debug @var{string} [@var{arg} @dots{}]
Print the parameters on @stderr{}.  @code{dotest-debug} prints some @code{*} to make the message
more visible.
@end deffn


@deffn Alias dotest-printf @var{template} [@var{arg} @dots{}]
Format the @var{template} with the optional @var{arg} values, then print the result on @stderr{}.
@end deffn

@c page
@node testing files
@section Handling files in tests


In this section are described functions to be used to create temporary
files; it is a common task to write scripts to manipulate files and
directories.  All the files should be created under a temporary
directory that must be removed after each test function is invoked; the
library automatically invokes @func{dotest-clean-files} when exiting
(using @code{trap}), but it is safer to invoke it at the end of each
function that creates files.


@menu
* testing files directories::   Directories.
* testing files files::         Files.
* testing files examples::      Examples.
@end menu

@c page
@node testing files directories
@subsection Directories


@defun dotest-cd @var{directory}
Change the working directory.  This is just a wrapper for @command{cd};
if verbose mode is on: print a message.
@end defun


@defun dotest-mkdir @var{directory}
@defunx dotest-mkdir @var{directory} @var{prefix}
Create @var{directory} under the temporary directory; @var{directory}
must be a relative pathname (that is: it must not begin with a slash).

The optional @var{prefix} is a relative pathname that is prepended to
@var{directory}: it is useful to prepend the name of a parent directory.

Print to stdout the full pathname of the directory.
@end defun


@subsubheading Temporary directory

@defun dotest-echo-tmpdir
Print the value of the temporary directory in which all the files and
directories will be created.  The value is prefixed with the value of
the environment variable @env{TMPDIR}, or @file{/tmp} if not set.
@end defun


@defun dotest-cd-tmpdir
Change the working directory to the temporary directory.
@end defun


@defun dotest-mktmpdir
Create the temporary directory.  @func{dotest-mkdir} creates the temporary directory automatically
by using the @option{--parents} option of @command{mkdir}.  This function is automatically invoked
by @func{dotest-mkfile} and @func{dotest-mkpathname}.
@end defun

@c page
@node testing files files
@subsection Files


@defun dotest-mkfile @var{pathname}
@defunx dotest-mkfile @var{pathname} @var{prefix}
Create an empty file.  The optional @var{prefix} is a relative pathname
that is prepended to @var{pathname}: It is useful to prepend the name of
a parent directory.  Print to stdout the full pathname of the file.
@end defun


@defun dotest-clean-files
Remove the temporary directory and all its children.  Should be invoked
at the end of each function that creates temporary files or directories.

Return the value of the last command executed before the invocation,
that way it can be used right after @func{dotest-output} and
@func{dotest-equal} without loosing the return value of the function.
@end defun


@defun dotest-mkpathname @var{pathname}
@defunx dotest-mkpathname @var{pathname} @var{prefix}
Compose a pathname under the temporary testing directory.  The optional @var{prefix} is a relative
pathname that is prepended to @var{pathname}: It is useful to prepend the name of a parent
directory.  Print to stdout the full pathname of the file.

This function invokes @func{dotest-mktmpdir}.
@end defun


@subsubheading Testing conditions


@defun dotest-assert-file-exists @var{file} @var{error_message}
Test that @var{file} exists: If true returns with code zero; else print
@var{error_message}, invoke @func{dotest-clean-files} and return with
code one.
@end defun


@defun dotest-assert-file-unexists @var{file} @var{error_message}
Test that @var{file} does not exist: If true return with code zero; else
print @var{error_message}, invoke @func{dotest-clean-files} and return
with code one.
@end defun

@c page
@node testing files examples
@subsection Examples


Examples of usage of @code{dotest-clean-files}:

@example
function mytest-1.1 () @{
    local dir=$(dotest-mkdir a/b)
    local result=

    ...
    result=...
    dotest-equal 123 $result
    dotest-clean-files
@}
function mytest-1.2 () @{
    local dir=$(dotest-mkfile file.ext)
    local result=

    ...
    result=...
    dotest-equal 123 $result
    dotest-clean-files
@}

dotest mytest-
dotest-final-report
@end example

@c page
@node sendmail
@appendix Examples for sending email


In this appendix we review some example scripts that send email using Bash.  All the scripts are in
the @mbfl{} distribution under the @file{examples} directory.

First we examine plain scripts (making no use of @mbfl{}) to understand the basics of how to handle
the @smtp{} protocol and how to ``talk'' to a process in background.

Then we see the documentation of a complex script, @command{sendmail-mbfl.sh}, which we can use to
send email with plain or encrypted connections.

Finally we see how to use the @gnu{} Emacs interface to the script, @file{sendmail-mbfl.el}.
@ref{sendmail script emacs}.

@menu
* sendmail message::            How to compose a test email message.
* sendmail plain::              Just send an email message.
* sendmail connector::          Send email through a process in
                                background.
* sendmail gnutls::             Using @command{gnutls-cli} as connector.
* sendmail openssl::            Using @command{openssl} as connector.
* sendmail script::             Sending email.
@end menu

@c page
@node sendmail message
@appendixsec How to compose a test email message


Here we discuss how to programmatically compose a minimal email message to be used in testing email
scripts.  Basically a message should look like this:

@example
Sender: marco@@localhost
From: marco@@localhost
To: root@@localhost
Subject: demo from sendmail-plain.sh
Message-ID: <15704-6692-23464@@this.hostname>
Date: Tue, 28 Apr 2009 06:16:01 +0200

This is a text demo from the sendmail-plain.sh script.
--
Marco
@end example

We have to remember that the @smtp{} server receiving the message may rewrite the addresses, for
example: replacing @code{localhost} with the fully qualified local host name (the output of the
command @command{hostname --fqdn}); so, when reading the delivered message, we do not have to be
surprised to find changed addresses.

We want to notice the following:

@itemize
@item
The fully qualified local host name is useful to build header values.  We can acquire it with the
@command{hostname} command like this:

@example
LOCAL_HOSTNAME=$(hostname --fqdn)
@end example

@noindent
do not confuse this value with the host name of the @smtp{} server!

@item
The value of the @code{Message-ID} header must be enclosed in angular parentheses, and it must
contain an address--like string with random characters in the name part.  We can generate it with:

@example
printf -v MESSAGE_ID '%d-%d-%d@@%s' \
    $RANDOM $RANDOM $RANDOM "$LOCAL_HOSTNAME"
@end example

@noindent
or with:

@example
printf -v MESSAGE_ID '%s@@%s'                   \
    $(@{ IFS= read -n 15 line </dev/random      \
         echo "$line" ; @} |                    \
         md5sum --binary | cut -f1 -d' ')      \
    "$LOCAL_HOSTNAME"
@end example

@item
The value of the @code{Date} header must be the current date in a specified format.  We can generate
it using the @gnu{} Date program like this:

@example
DATE=$(date --rfc-2822) || exit 2
@end example

@item
In the body of the message: the string that separates the text from the signature is the three
characters string @code{-- } (dash, dash, white space).  When composing the message we have to be
careful to use commands that @strong{do not} drop white spaces.
@end itemize

In the end, we can use the following chunk of code to compose an email message:

@example
PROGNAME=$@{0##*/@}
FROM_ADDRESS=marco@@localhost
TO_ADDRESS=root@@localhost

function print_message () @{
    local LOCAL_HOSTNAME DATE MESSAGE_ID MESSAGE
    LOCAL_HOSTNAME=$(hostname --fqdn) || exit 2
    DATE=$(date --rfc-2822) || exit 2
    printf -v MESSAGE_ID '%d-%d-%d@@%s' \
        $RANDOM $RANDOM $RANDOM "$LOCAL_HOSTNAME"
    MESSAGE="Sender: $FROM_ADDRESS
From: $FROM_ADDRESS
To: $TO_ADDRESS
Subject: demo from $PROGNAME
Message-ID: <$MESSAGE_ID>
Date: $DATE

This is a text demo from the $PROGNAME script.
--\x20
Marco
"
    printf "$MESSAGE"
@}
@end example

@noindent
notice that to put the required single white space character in the text/signature separator we use
the escape sequence @code{\x20} (where 20 is the hexadecimal value of the white space character in
the @ascii{} encoding) and print the message with @code{printf}, which expands the escape sequences.

When sending the message to the @smtp{} server we have to:

@itemize
@item
Be careful in not to wrongly modify it.

@item
Send it one line at a time, terminating each line with a carriage return, line feed sequence
(@code{\r\n}).

@item
Quote with a dot lines starting with a dot.
@end itemize

So we can use an equivalent of the following chunk of code, assuming @code{3} is the file descriptor
connected to the remote @smtp{} server:

@example
print_message | while IFS= read line
do
    if test "$@{line:0:1@}" = '.'
    then printf '.%s\r\n' "$line" >&3
    else printf  '%s\r\n' "$line" >&3
    fi
done
@end example

@noindent
notice that @code{read} is executed in an environment in which @code{IFS} is set to the empty
string, this is to prevent unwanted modification of the message text.  @code{read} splits the string
it reads into words according to the current value of @code{IFS}, and this may lead to mutation of
the input string; word splitting happens when there is a single output variable, too.  To prevent
word splitting, we set @code{IFS} to the empty string.

@c page
@node sendmail plain
@appendixsec Just send an email message


The script below can be found in @file{examples/sendmail-plain.sh}.  It just sends a hard--coded
email message, from a hard--coded address to a hard--coded address.  It makes no use of @mbfl{}.


@defun main
Drive the script controlling the @smtp{} protocol.  It should be obvious what it does once we
understand the following functions.
@end defun


@defun open_session @var{hostname}
Open a connection to the @smtp{} server using a fake device that Bash gives us as interface to the
network.  For the @code{localhost}, it ends up being:

@example
/dev/tcp/localhost/25
@end example

@noindent
where 25 is the @tcp{} port which is officially assigned to the @smtp{} service.  To open the
connection we use the idiom:

@example
exec 3<>/dev/tcp/localhost/25
@end example

@noindent
which means: open a read and write connection to the selected hostname, using file descriptor number
3.  There is nothing special in number 3, it is just the first free file descriptor number after 0
(standard input), 1 (standard output) and 2 (standard error).

The line:

@example
trap 'exec 3<&-' EXIT
@end example

@noindent
means: close file descriptor 3 whenever the script terminates.  This is redundant in such a simple
script, it is there for completeness.
@end defun


@defun send @var{string}
@defunx send @var{template} [@var{opt} @dots{}]
Send a string to the @smtp{} server.  Use @func{printf} to format the string @var{template} with
the optional arguments, then write the resulting string to file descriptor 3.  The string written
out is terminated with the sequence @code{\r\n} as mandated by the @smtp{} protocol.
@end defun


@defun read_and_send_message
Read an email message from stdin line by line (newline terminator), and rewrite it to file
descriptor 3 terminating each line with the sequence carriage return/line feed.  With the exception
of the terminating sequence, the lines are left unchanged.
@end defun


@defun recv @var{expected_code}
Read a line (a sequence of characters up until the first @code{\n}) from file descriptor 3.  The
line is interpreted as a message from the @smtp{} server: the first three characters are a numeric
code.  If the code is different from @var{expected_code}, raise an error.
@end defun

@smallexample
@verbatiminclude sendmail-plain.sh
@end smallexample

@c page
@node sendmail connector
@appendixsec Send email through a process in background


The script below can be found in @file{examples/sendmail-connector.sh}.  It just sends a hard--coded
email message, from a hard--coded address to a hard--coded address.  It makes no use of @mbfl{}.

@quotation
Bash version 4 introduced the new keyword @code{coproc}, which can be used to spawn processes in
background and talk to them via pipes.  This keyword in @strong{not} used in this appendix.
@end quotation

The purpose of the script is to understand how to send a message through a process in background.
It does the same things of the example described in @ref{sendmail plain, Just send an email
message}.  The main difference is that the single function @func{open_session} is replaced by the
two functions @func{open_session} and @func{connector}.

What is important to understand, is how @func{open_session} runs @func{connector} in background
and sets up two file descriptors to talk to it.  In the real world we never use this technique with
a function; this example script makes use of @func{connector} as a replacement for an external
program that can establish sophisticated connections to remote hosts, for example using the
@tls{}/@ssl{} protocols.


@defun open_session @var{hostname}
Open a connection to the @smtp{} server spawning a background process represented by the
@func{connector} function.  It makes use of two @fifo{}s (First In, First Out).

If we were to do it from a C language program: we would use the @cfunc{pipe} system function to
create two pipes connecting script's process to the background process.

@example
 ---------  out pipe  -----------  socket  --------
| script  |--------->| connector |<======>| SMTP   |
| process |<---------| process   |        | server |
 ---------  in pipe   -----------          --------
@end example

Bash has no way to create a pipe using the @cfunc{pipe} system function (up until version 4), so we
use two @fifo{} channels created by the @command{mkfifo} program:

@example
: $@{TMPDIR:=/tmp@}
local INFIFO=$@{TMPDIR@}/in.$$
local OUFIFO=$@{TMPDIR@}/out.$$

mkfifo --mode=0600 $INFIFO $OUFIFO
@end example

@noindent
the script will use @code{INFIFO} to read characters from @func{connector}, and @code{OUFIFO} to
send characters to @func{connector}.

@example
 ---------  OUFIFO   -----------  socket  --------
| script  |-------->| connector |<======>| SMTP   |
| process |<--------| process   |        | server |
 ---------  INFIFO   -----------          --------
@end example

Once the @fifo{}s exist on the file system, we run @func{connector} in background, connecting its
standard input and output to the @fifo{}s:

@example
connector $HOSTNAME $SMTP_PORT <$OUFIFO >$INFIFO &
@end example

@noindent
be careful in selecting the redirections.  Notice that, in this simple example, we ignore errors
running @func{connector}.

Now we open file descriptors connecting them to the @fifo{}s:

@example
exec 3<>$INFIFO 4>$OUFIFO
@end example

@noindent
the script will use file descriptor 3 to read characters from @func{connector}, and file descriptor
4 to send characters to @func{connector}.  We open the input @fifo{} for both reading and writing,
else @code{exec} will block waiting for the first char.

We have connected both the ends of both the @fifo{}s, so we can remove them from the file system:

@example
rm $INFIFO $OUFIFO
@end example

@noindent
the @fifo{}s will continue to exist in the OS kernel until the file descriptors are closed.

Finally we register a clean up handler that closes the descriptors:

@example
trap 'exec 3<&- 4>&-' EXIT
@end example
@end defun


@defun connector @var{hostname}
Establish a connection to the @smtp{} server at @var{hostname}.  It is not important here to fully
understand how this function works; suffice it to say that it reads lines from stdin, and echoes
them to the server; it reads lines from the server, and echoes them to stdout.
@end defun


@smallexample
@verbatiminclude sendmail-connector.sh
@end smallexample

@c page
@node sendmail gnutls
@appendixsec Using @command{gnutls-cli} as connector


@gnu{} @tls{} is a library implementing the @tls{} protocol; we can use it to establish encrypted
and authenticated connections to a remote host.  The @smtp{} protocol has extensions to allow usage
of a @tls{} layer.

A @gnu{} @tls{} installation comes with a command line test program, @command{gnutls-cli}, that can
establish an encrypted connection.  We use this command as the ``connector'' modeled in
@ref{sendmail connector, Send email through a process in background}.  It has a manual page, which
we may want to read.

When handling an encrypted connection we have to know in advance how the remote @smtp{} server
behaves.  Let's see first the simpler example, using the a human driven interactive session; then we
will describe a more complex interaction.

@quotation
Notice that @command{gnutls-cli} has a @option{--crlf} option that will cause all the lines sent to
the server to be terminated by a carriage return/line feed sequence (@code{\r\n} or
@code{\x0d\x0a}).  If we write a script that terminates by itself the lines with this sequence, for
example:

@example
printf 'ehlo localhost.localdomain\r\n'
@end example

@noindent
we must @strong{avoid} this option, else @smtp{} protocol violation errors may occur.  However, if
we try a hand--driven interactive session, we want to use this option to send protocol--compliant
lines.
@end quotation

@menu
* sendmail gnutls now::         Immediate encrypted bridge.
* sendmail gnutls delay::       Delayed encrypted bridge.
@end menu

@c page
@node sendmail gnutls now
@appendixsubsec Immediate encrypted bridge


We use as example the server @code{relay.poste.it}, port @code{465}.  You have to have an account
there to use it; do not bomb this server with fake connections.  This server requests us to build
the encrypted bridge immediately after the connection has been established, without waiting for any
line of greetings from the server.

So, we start the connector like this:

@example
$ gnutls-cli --port 465 relay.poste.it
@end example

@noindent
if the connection succeeds: @command{gnutls-cli} prints a lot of message lines on its standard
output explaining what is going on; at last comes the line of greetings from the server, which
begins with code @code{220}.

The server supports the @code{AUTH LOGIN} authentication mechanism, which requires the base64
encoding of the user name and password; we can perform it with the external program @command{base64}
(which comes with @gnu{} Coreutils) like this:

@example
ENCODED_USERNAME=$(echo -n 'the-user-name' | base64)
ENCODED_PASSWORD=$(echo -n 'the-pass-word' | base64)
@end example

@noindent
@gnu{} Emacs users can do it with:

@example
(setq my-usr (base64-encode-string "the-user-name"))
(setq my-pwd (base64-encode-string "the-pass-word"))
@end example

@noindent
The authentication dialogue goes like this:

@enumerate
@item
We send @code{AUTH LOGIN}, to start the authentication.

@item
It replies with @code{334 VXNlcm5hbWU6} which is the request for the username.  The string
@code{VXNlcm5hbWU6} is the base64 encoding of the string @code{Username:} (without trailing
newline); we can verify this with:

@example
$ echo -n Username: | base64
@end example

@noindent
or in the Emacs' scratch buffer:

@example
(base64-encode-string "Username:")
@end example

@item
We send the login user name encoded in base64.

@item
It checks the string and, if the format is correct, it replies with @code{334 UGFzc3dvcmQ6} (this
should happen even if the username is unknown to the server).  The string @code{UGFzc3dvcmQ6} is the
base64 encoding of the string @code{Password:} (without ending newline); we can verify this with:

@example
$ echo -n Password: | base64
@end example

@noindent
or in the Emacs' scratch buffer:

@example
(base64-encode-string "Password:")
@end example

@item
We send the login password encoded in base64.

@item
It checks it and, if correct, it replies with a line starting with code @code{235}.
@end enumerate

@noindent
Beware that if we are not quick to send the encoded password after the encoded user name, the server
may reset the authentication process as if we sent a wrong user name.


So we can do the @smtp{} dialogue reported below by hand (which is an edited log of a session under
Emacs' eshell); lines starting with @code{recv>} are the ones received from the server, lines
starting with @code{send>} are the ones we send to the server, the ellipses @code{...}  are
replacements for server text we are not interested in.

@smallexample
$ gnutls-cli --crlf --port 465 relay.poste.it

recv> 220 ... ESMTP Service ...
send> ehlo localhost.localdomain
recv> 250-...
recv> 250-DSN
recv> 250-8BITMIME
recv> 250-PIPELINING
recv> 250-HELP
recv> 250-AUTH=LOGIN
recv> 250-AUTH LOGIN CRAM-MD5 DIGEST-MD5 PLAIN
recv> 250-DELIVERBY 300
recv> 250 SIZE
send> auth login
recv> 334 VXNlcm5hbWU6
send> <the-base64-username>
recv> 334 UGFzc3dvcmQ6
send> <the-base64-password>
recv> 235 login authentication successful
send> mail from:<from-address@@poste.it>
recv> 250 MAIL FROM:<from-address@@poste.it> OK
send> rcpt to:<to-address@@other-host.it>
recv> 250 RCPT TO:<to-address@@other-host.it> OK
send> data
recv> 354 Start mail input; end with <CRLF>.<CRLF>
send> From: <from-address@@poste.it>
send> To: <to-address@@other-host.it>
send> Subject: interactive attempt
send>
send> Text for interactive attempt.
send> --
send> Marco
send> .
recv> 250 ... Mail accepted
send> quit
recv> 221 ... QUIT
recv> - Peer has closed the GNUTLS connection
@end smallexample

@c page
@node sendmail gnutls delay
@appendixsubsec Delayed encrypted bridge


We use as example the server @code{smtp.gmail.com}, port @code{587}.  You have to have an account
there to use it; do not bomb this server with fake connections.  This server requests us to start an
@code{ESMTP} dialogue, then issue the @code{STARTTLS} command and build the encrypted bridge; once
the bridge is set up, we restart an @code{ESMTP} dialogue and do the authentication and the message
delivery.

We start the connector like this:

@example
$ gnutls-cli --starttls --port 587 smtp.gmail.com
@end example

@noindent
if the connection succeeds: @command{gnutls-cli} prints message lines on its standard output
explaining what is going on; at last comes the line of greetings from the server, which begins with
code @code{220}.

The @option{--starttls} option tells @command{gnutls-cli} @strong{not} to build the encrypted bridge
immediately; rather, it waits for a @code{SIGALRM} signal, which we must deliver to it when we are
ready.  The quickest way to send such a signal, when there is only one @command{gnutls-cli} process
running, is:

@example
$ kill -SIGALRM $(/sbin/pidof gnutls-cli)
@end example

@noindent
beware that @command{pidof} may be installed in other places on your system.

The server supports the @code{AUTH PLAIN} authentication mechanism, which requires the base64
encoding of the user name and password stored in a special record; we can do it with the external
program @command{base64} (which comes with @gnu{} Coreutils) like this:

@example
SECRETS=$(printf "\x00%s\x00%s" \
   "$@{LOGIN_NAME@}" "$@{PASSWORD@}" | base64)
@end example

@noindent
@gnu{} Emacs users can do it with:

@example
(setq my-auth (base64-encode-string
   (format "%c%s%c%s" 0 "the-user-name" 0 "the-pass-word")))
@end example

@noindent
The authentication dialogue goes like this:

@enumerate
@item
We send @code{AUTH PLAIN} followed by the encoded credentials.

@item
It checks the user name and password and, if correct, it replies with code @code{235}.
@end enumerate

So, we can do the @smtp{} dialogue reported below by hand (which is an edited log of a session under
Emacs' eshell); lines starting with @code{recv>} are the ones received from the server, lines
starting with @code{send>} are the ones we send to the server, the ellipses @code{...}  are
replacements for server text we are not interested in.

@smallexample
$ gnutls-cli --crlf --starttls --port 587 smtp.gmail.com

recv> 220 ... ESMTP ...
send> ehlo localhost.localdomain
recv> 250-...
recv> 250-SIZE 35651584
recv> 250-8BITMIME
recv> 250-STARTTLS
send> 250-ENHANCEDSTATUSCODES
recv> 250 PIPELINING
send> starttls
recv> 220 2.0.0 Ready to start TLS

=== here we deliver SIGALRM to the gnutls-cli process

recv> *** Starting TLS handshake
recv> - Certificate type: X.509
recv>  - Got a certificate list of 1 certificates.
recv>
recv>  - Certificate[0] info:
recv>  # The hostname in the certificate matches 'smtp.gmail.com'.
recv>  # valid since: ..
recv>  # expires at: ...
recv>  # fingerprint: ...
recv>  # Subject's DN: ...
recv>  # Issuer's DN: ...
recv>
recv>
recv> - Peer's certificate issuer is unknown
recv> - Peer's certificate is NOT trusted
recv> - Version: TLS1.0
recv> - Key Exchange: RSA
recv> - Cipher: ARCFOUR-128
recv> - MAC: MD5
recv> - Compression: NULL
send> ehlo localhost.localdomain
recv> 250-...
recv> 250-SIZE 35651584
recv> 250-8BITMIME
recv> 250-AUTH LOGIN PLAIN
recv> 250-ENHANCEDSTATUSCODES
recv> 250 PIPELINING
send> auth plain <the-encoded-auth-credentials>
recv> 235 2.7.0 Accepted
send> mail from:<from-address@@gmail.com>
recv> 250 2.1.0 OK ...
send> rcpt to:<to-address@@poste.it>
recv> 250 2.1.5 OK ...
send> data
recv> 354  Go ahead ...
send> From: from-address@@gmail.com
send> To: to-address@@poste.it
send> Subject: interactive demo from gmail
send>
send> demo
send> .
recv> 250 2.0.0 OK ...
send> quit
recv> 221 2.0.0 closing connection ...
@end smallexample

@c page
@node sendmail openssl
@appendixsec Using @command{openssl} as connector


OpenSSL is a library implementing the @ssl{}/@tls{} protocol; we can use it to establish encrypted
and authenticated connections to a remote host.

An OpenSSL installation comes with a command line test program, @command{openssl}, that can
establish an encrypted connection.  We use this command as the ``connector'' modeled in
@ref{sendmail connector, Send email through a process in background}.  It has a manual page, which
we may want to read.

Here we see how we can use the @command{openssl} program in place of the @command{gnutls-cli}
program described in @ref{sendmail gnutls, Using @command{gnutls-cli} as connector}.  The two
methods have a lot in common (the @smtp{} protocol is the same), we only have to understand the
command line of the program.

@quotation
Notice that @command{openssl} has a @option{-crlf} option that will cause all the lines sent to the
server to be terminated by a carriage return/line feed sequence (@code{\r\n} or @code{\x0d\x0a}).
If we write a script that terminates by itself the lines with this sequence, for example:

@example
printf 'ehlo localhost.localdomain\r\n'
@end example

@noindent
we must @strong{avoid} this option, else @smtp{} protocol violation errors may occur.  However, if
we try a hand--driven interactive session, we want to use this option to send protocol--compliant
lines.
@end quotation

@menu
* sendmail openssl now::        Immediate encrypted bridge.
* sendmail openssl delay::      Delayed encrypted bridge.
@end menu

@c page
@node sendmail openssl now
@appendixsubsec Immediate encrypted bridge


To build the encrypted bridge right after the connection, without exchanging greetings with the
server, we do:

@example
openssl s_client -quiet -connect relay.poste.it:465
@end example

@noindent
then we start the @smtp{} dialogue as outlined in @ref{sendmail gnutls now, Immediate encrypted
bridge}.

@c page
@node sendmail openssl delay
@appendixsubsec Delayed encrypted bridge


To first exchange greetings, then send @code{STARTTLS} and finally build the encrypted bridge, we
do:

@example
openssl s_client -quiet -starttls smtp \
    -connect smtp.gmail.com:587
@end example

@noindent
then we start the @smtp{} dialogue as outlined in @ref{sendmail gnutls now, Immediate encrypted
bridge}.  @command{openssl} knows how to start an @smtp{} dialogue, and it does it automatically.

@c page
@node sendmail script
@appendixsec Sending email


This section documents the example script @file{examples/sendmail-mbfl.sh}, which makes use of
@mbfl{} to send an email message.  The script sends already composed messages using plain or @tls{}
sessions, and it can use both OpenSSL and @gnu{} @tls{}.

@menu
* sendmail script examples::    Usage examples.
* sendmail script invoking::    Command line options.
* sendmail script hostinfo::    Reading host informations from file.
* sendmail script authinfo::    Reading authentication credentials
                                from file.
* sendmail script emacs::       Interfacing with @gnu{} Emacs.
@end menu

@c page
@node sendmail script examples
@appendixsubsec Usage examples


Let's say we have a file named @file{message.mail} holding a fully composed email message:

@example
Sender: marco@@localhost
From: marco@@localhost
To: root@@localhost
Subject: server on fire?

I noticed flames raising from the server room...
--
Marco
@end example

@noindent
basically, to send it with @command{sendmail-mbfl.sh} we have to do:

@example
$ sendmail-mbfl.sh \
    --envelope-from=marco@@localhost  \
    --envelope-to=root@@localhost     \
    --message=message.mail
@end example

@noindent
by default the @smtp{} server name is set to @code{localhost} and the @tcp{} port to @code{25}.  The
default session is plain, without @tls{}.

Port number @code{25} is officially assigned to the @smtp{} protocol; if the localhost uses a
different @tcp{} port, we can select it with the @option{--port} option:

@example
$ sendmail-mbfl.sh --port=587         \
    --envelope-from=marco@@localhost   \
    --envelope-to=root@@localhost      \
    --message=message.mail
@end example

To send mail to a remote @smtp{} server, we select its hostname with the @option{--host} option:

@example
$ sendmail-mbfl.sh \
    --host=smtp.gmail.com --port=587  \
    --envelope-from=marco@@gmail.com   \
    --envelope-to=marco@@spiffy.it     \
    --message=message.mail
@end example

Mail services may offer encrypted sessions to their @smtp{} servers.  Encryption with the @tls{}
protocol is supported by @command{sendmail-mbfl.sh} through external programs.  Whether a server
requires an encrypted session, can be specified using the @option{--plain}, @option{--tls} or
@option{--starttls} options.

To establish an encrypted session, the script needs to acquire the credentials of the user.  These
can be stored in a configuration file named @file{~/.mbfl-authinfo}, which looks like this:

@smallexample
machine smtp.gmail.com login marco@@gmail.com password abcdefghilm
machine relay.poste.it login marco@@poste.it  password 0123456789
@end smallexample

@noindent
so that a line/record can be uniquely identified with values of the @option{--host} and
@option{--username} options.

So we can do:

@example
$ sendmail-mbfl.sh --host=gmail       \
    --username=marco --starttls        \
    --envelope-from=marco@@gmail.com   \
    --envelope-to=marco@@spiffy.it     \
    --message=message.mail
@end example

@c page
@node sendmail script invoking
@appendixsubsec Command line options


The synopsis is:

@smallexample
sendmail-mbfl.sh \
    --envelope-from=@meta{ADDRESS}              \
    --envelope-to=@meta{ADDRESS}                \
    [--message=@meta{SOURCE} | --test-message]
    [options]
@end smallexample

@noindent
the script sends an email address, and it can do a plain session or use a connector.  Options
description follows.

@table @code
@item -F@var{address}
@itemx --envelope-from=@var{address}
Select the @code{MAIL FROM} envelope address.  If this option is used multiple times: the last one
wins.

@item -T@var{address}
@itemx --envelope-to=@var{address}
Select the @code{RCPT TO} envelope address.  This option can be used multiple times: each
@var{address} is appended to a list of recipients.

@item -M@var{source}
@itemx --message=@var{source}
Select the source of the whole email message.  If @var{source} is a file pathname, that file is read
and used as data; if @var{source} is @code{-}, the message is read from the standard input channel.
It defaults to @code{-}.

@item --test-message
Send a test message with a hard--coded body part.  This option supersedes @option{--message}.

@item --host=@var{host}
Select the @smtp{} server host name.  It defaults to @code{localhost}.

@item --host-info=@var{file}
Select a file from which to read host and port informations.

@item -p@var{port}
@itemx --port=@var{port}
Select the @smtp{} server @tcp{} port; this option supersedes @option{--host-info}.  It defaults to
@code{25}.

@item --plain
@itemx --tls
@itemx --starttls
Establish a plain session, @tls{} session with immediate bridge construction or @tls{} session with
bridge construction after @code{STARTTLS} command.

@item --gnutls
Use @command{gnutls-cli} as connector for encrypted sessions.  This is the default when
@option{--tls} or @option{--starttls} are used.

@item --openssl
Use @command{gnutls-cli} as connector for encrypted sessions.

@item --auth-info=@var{file}
Select the file, in @code{netrc} format, from which to read the authorisation credentials.  Defaults
to @file{~/.mbfl-authinfo}.

@item --username=@var{user}
Specify a string used to select an account in the authorisation file.  @var{user} must be a
substring of the username present in the file, the first matching line from the file is selected.
So, if the authinfo file is:

@example
machine smtp.gmail.com login mrc.mgg@@gmail.com password <password>
machine relay.poste.it login marco.maggi-ipsu password <password>
@end example

@noindent
we can use @option{--username=mrc.mgg} to select the first line and @option{marco.maggi} to select
the second line.

@item --auth-none
@itemx --auth-plain
@itemx --auth-login
Perform no authorisation, the @code{AUTH PLAIN} authorisation or the @code{AUTH LOGIN}
authorisation.
@end table

@c page
@node sendmail script hostinfo
@appendixsubsec Reading host informations from file


For each @smtp{} server we need the following informations: the hostname, the port number, the
session type, the authorisation method.  There are two ways to specify these:

@itemize
@item
Use the command line options as in:

@example
$ sendmail-mbfl.sh \
    --host=smtp.gmail.org --port=587    \
    --tls --auth-login                  \
    ...
@end example

@item
Use the hostinfo file and the option @option{--host} to select a record into it, as in:

@example
$ sendmail-mbfl.sh --host=smtp.gmail.org ...

$ sendmail-mbfl.sh --host=smtp.gmail.org \
    --host-info=~/.hostrc ...
@end example
@end itemize

@noindent
If @option{--host} is not used: the hostname defaults to @code{localhost}.  If the selection of
port, session type or authorisation type is left unspecified: The script automatically looks into
the default hostinfo file.  Informations from command line options supersede informations from the
hostinfo file.

The default pathname for the hostinfo file is @file{$HOME/.mbfl-hostinfo} and can be overridden by
the @option{--host-info} option.  The format of this file is line oriented: Blank lines are ignored,
lines starting with a @code{#} character are comments, lines starting with @code{machine} are host
records.

Each record line must have the format:

@smallexample
machine <host> service <name> port <number> session <type> auth <type>
@end smallexample

@noindent
for example:

@smallexample
# ~/.mbfl-hostinfo --
#

# SMTP servers
machine localhost service smtp port 25 session plain auth none
machine relay.poste.it service smtp port 465 session tls auth login
machine smtp.gmail.com service smtp port 587 session starttls auth plain

# POP3 servers
machine pop.tiscali.it service pop3 port 110 session plain auth userpass
machine relay.poste.it service pop3 port 995 session tls auth userpass
machine pop.googlemail.com service pop3 port 995  session tls auth userpass

### end of file
@end smallexample

@noindent
so that we can extract a record with the following script:

@example
file=~/.mbfl-hostinfo
host=gmail
service=smtp

rex='^[ \t]*'
rex+='machine[ \t]\+.*%s.*[ \t]\+'
rex+='service[ \t]\+%s[ \t]\+'
rex+='port[ \t]\+[0-9]\+[ \t]\+'
rex+='session[ \t]\+\(plain\|tls\|starttls\)[ \t]\+'
rex+='auth[ \t]\+\(none\|plain\|login\)'
rex+='[ \t]*$'
rex=$(printf "$rex" $host $service)

set -- $(grep "$rex" "$file")
echo machine $2
echo service $4
echo port    $6
echo session $8
shift 9
echo auth    $1
@end example

@noindent
currently @command{sendmail-mbfl.sh} parses the file using the @code{=~} regular expressions
operator.

Notice that when using the hostinfo file, the value of the @option{--host} option can be a substring
of the host name.

@c page
@node sendmail script authinfo
@appendixsubsec Reading authentication credentials from file


The only way the script has to acquire the user name and password to log into the remote server, is
by reading the authinfo file.  By default, its pathname is @file{$HOME/.mbfl-authinfo}, it can be
overridden with the @option{--auth-info} option.

Its format is a simplified version of the @code{netrc} file format: blank lines are ignored, lines
starting with a @code{#} character are comments, lines starting with @code{machine} are host
records.

Each record must have the format:

@example
machine <hostname> login <user-name> password <pass-word>
@end example

@noindent
for example:

@example
machine smtp.gmail.com login one@@gmail.com password abcdefghilm
machine relay.poste.it login two@@poste.it  password 0123456789
@end example

@noindent
so that we can extract a record with the following script:

@example
file=~/.mbfl-authinfo
host=poste
username=marco

rex='^[ \t]*'
rex+='machine[ \t]\+.*%s.*[ \t]\+'
rex+='login[ \t]\+.*%s.*[ \t]\+'
rex+='password[ \t]\+.*'
rex+='[ \t]*$'
rex=$(printf "$rex" $host $username)

line=$(grep "$rex" $file)
set -- $line
echo machine  $2
echo username $4
echo password $6
@end example

@noindent
currently @command{sendmail-mbfl.sh} parses the file using the @code{=~} regular expressions
operator.

The host name and the user name are selected by the command line options @option{--host} and
@option{--username}.  Notice that the values for these options can be substrings of the values in
the authinfo file.

@c page
@node sendmail script emacs
@appendixsubsec Interfacing with @gnu{} Emacs


This section documents an Emacs interface to the
@command{sendmail-mbfl.sh} script that can be used to send mail.  It
consists of an Emacs Lisp library that allows us to send mail with all
the methods supported by the script.

To use it we have to install the file @file{examples/sendmail-mbfl.el}
in one of the directories in the load path of Emacs, then load it with:

@example
(require 'sendmail-mbfl)
@end example

The library assumes that @file{message.el} and @file{sendmail.el} are
available on the system; recent installations of Emacs should have them.

@menu
* sendmail script emacs vars::  Customisable variables.
* sendmail script emacs send::  Sending and delivering functions.
* sendmail script emacs insp::  Message inspection functions.
* sendmail script emacs misc::  Miscellaneous functions.
@end menu

@c page
@node sendmail script emacs vars
@appendixsubsubsec Customisable variables


A customisation group called @code{sendmail-mbfl} is available to
configure the library.


@defvr {Customisable Variable} sendmail-mbfl-program
A string representing the name of the @mbfl{} shell script.  By default
set to @code{sendmail-mbfl.sh}.
@end defvr


@defvr {Customisable Variable} sendmail-mbfl-extra-args
A list of strings representing extra arguments for the command line of
@command{sendmail-mbfl.sh}.  By default set to:

@example
("--verbose" "--debug")
@end example
@end defvr


@defvr {Customisable Variable} sendmail-mbfl-envelope-from-function
Select a function to call to acquire, from the current buffer, the
envelope email address of the sender, to be used in the @code{MAIL FROM}
@smtp{} command.

The function is invoked with no arguments and it must return a single
string representing the email address.  If no suitable address is found:
it must raise an error.  The function may be called multiple times for
the same message buffer.

The selected function is used by @code{send-mail-with-mbfl}.  By default
it is set to @code{sendmail-mbfl-envelope-from}.
@end defvr


@defvr {Customisable Variable} sendmail-mbfl-envelope-to-function
Select a function to call to acquire, from the current buffer, the
envelope email addresses of the receivers, to be used in the @code{RCPT
TO} @smtp{} command.

The function is invoked with no arguments and it must return a list of
strings representing email addresses.  If no suitable address is found:
it must raise an error.  The function may be called multiple times for
the same message buffer.

The selected function is used by @code{send-mail-with-mbfl}.  By default
it is set to @code{sendmail-mbfl-envelope-to}.
@end defvr


@defvr {Customisable Variable} sendmail-mbfl-extract-addresses-function
Select a function to call to extract a list of email addresses from an
email header.  It is invoked with no arguments and the buffer narrowed
to the header to examine.

The function is invoked with no arguments and it must return a list of
strings representing email addresses, or nil.

The selected function is used by @code{sendmail-mbfl-envelope-from} and
@code{sendmail-mbfl-envelope-to}.
@end defvr


@defvr {Customisable Variable} sendmail-mbfl-hostname-function
Select a function to call to extract, from the current buffer, the
hostname of the @smtp{} server to be used to send the message.  The
result is used as search key in the selected hostinfo file.

The function is invoked with no arguments and it must return a string
representing the hostname; if it is unable to determine the hostname: it
must raise an error.

The selected function is used by @code{send-mail-with-mbfl}.  By default
it is set to @code{sendmail-mbfl-hostname}.
@end defvr


@defvr {Customisable Variable} sendmail-mbfl-username-function
Select a function to call to extract, from the current buffer, the
username with which to login to the @smtp{} server.  The result is used
as search key in the selected authinfo file.

The function is invoked with no arguments and it must return a string
representing the username; if it is unable to determine the username: it
must raise an error.

The selected function is used by @code{send-mail-with-mbfl}.  By default
it is set to @code{sendmail-mbfl-username}.
@end defvr


@defvr {Customisable Variable} sendmail-mbfl-host-info
The pathname of the file holding informations about known @smtp{}
servers.  @ref{sendmail script hostinfo, Reading host informations from
file}.

By default it is set to @file{~/.mbfl-hostinfo}.
@end defvr


@defvr {Customisable Variable} sendmail-mbfl-auth-info
The pathname of the file holding informations about known accounts at
@smtp{} servers.  @ref{sendmail script authinfo, Reading authentication
credentials from file}.

By default it is set to @file{~/.mbfl-authinfo}.
@end defvr


@defvr {Customisable Variable} sendmail-mbfl-connector
Select the external program to use to establish the @tls{} transport
layer.  Valid values are the strings: @code{gnutls}, @code{openssl}.
The default is @code{openssl} because it is more likely to be installed
on any system.
@end defvr


@defvr {Customisable Variable} sendmail-mbfl-timeout
Select the timeout in seconds for reading answers from the @smtp{}
server.  The default is 5.
@end defvr

@c page
@node sendmail script emacs send
@appendixsubsubsec Sending and delivering functions


@defun send-mail-with-mbfl
Send the email message in the current buffer.  This interactive function
can be invoked directly by the user, or, better, used as value for
@code{message-send-mail-function}.  Sending involves:

@enumerate
@item
Normalising the message with @code{sendmail-mbfl-normalise-message}.

@item
Performing special deliveries with @code{sendmail-mbfl-delivery}.

@item
Posting the message to an @acronym{MTA} using @code{sendmail-mbfl-post}.
@end enumerate
@end defun


@defun sendmail-mbfl-delivery
Perform special deliveries of the email message in the current buffer.
If the message has an @code{Fcc} header, deliver is performed relying on
@code{mail-do-fcc} from @file{sendmail.el}.

It is to be called after @code{sendmail-mbfl-normalise-message} or an
equivalent normalisation has been applied to the message.
@end defun


@defun sendmail-mbfl-post
Post the email message in the current buffer using an @acronym{MTA}.
Posting involves:

@enumerate
@item
Preparing the message with @code{sendmail-mbfl-prepare-message-for-mta}.

@item
Saving the message into a temporary file.

@item
Sending the file using the program selected with the customisable
variable @code{sendmail-mbfl-program}.
@end enumerate

It is to be called after @code{sendmail-mbfl-normalise-message} or an
equivalent normalisation has been applied to the message.
@end defun

@c page
@node sendmail script emacs insp
@appendixsubsubsec Message inspection functions


@defun sendmail-mbfl-envelope-from
@defunx sendmail-mbfl-envelope-from/message
@code{sendmail-mbfl-envelope-from} interprets the current buffer as an
email message and searches the contents for an email address to be used
as envelope sender.

It examines the headers @code{From} and @code{Sender}, in this order and
it returns a single string representing the email address; if no
suitable address is found: it raises an error.  The address is extracted
from the headers using the function selected by the customisable
variable @code{sendmail-mbfl-extract-addresses-function}.

@code{sendmail-mbfl-envelope-from/message} is an interactive wrapper for
@code{sendmail-mbfl-envelope-from} that prints the result to the
@code{*Message*} buffer.
@end defun


@defun sendmail-mbfl-envelope-to
@defunx sendmail-mbfl-envelope-to/message
@code{sendmail-mbfl-envelope-to} interprets the current buffer as an
email message and searches the contents for email addresses to be used
as envelope receivers.

It examines the headers @code{To}, @code{Cc} and @code{Bcc} and it
returns a list of strings representing email addresses; if no suitable
address is found: it raises an error.  The addresses are extracted from
the headers using the function selected by the customisable variable
@code{sendmail-mbfl-extract-addresses-function}.

@code{sendmail-mbfl-envelope-to/message} is an interactive wrapper for
@code{sendmail-mbfl-envelope-to} that prints the result to the
@code{*Message*} buffer.
@end defun


@defun sendmail-mbfl-extract-addresses
Extract a list of email addresses from the current buffer.  It must be
invoked with the buffer narrowed to the header to examine.  Return a
list of email addresses as strings, or nil if no address is found.
@end defun


@defun sendmail-mbfl-hostname
@defunx sendmail-mbfl-hostname/message
@code{sendmail-mbfl-hostname} extracts, from the current buffer, the
hostname of the @smtp{} server to be used to send the message.  The
result is used as search key in the selected hostinfo file.

It returns a string representing the hostname else, if unable to
determine the hostname, it raises an error.  The hostname is the
hostname part of the value returned by
@code{sendmail-mbfl-envelope-from}.

@code{sendmail-mbfl-hostname/message} is an interactive wrapper for
@code{sendmail-mbfl-hostname} that prints the result to the
@code{*Message*} buffer.
@end defun


@defun sendmail-mbfl-username
@defunx sendmail-mbfl-username/message
@code{sendmail-mbfl-username} extracts, from the current buffer, the
username with which login to the @smtp{} server.  The result is used as
search key in the selected authinfo file.

It returns a string representing the username else, if unable to
determine the username, it raises an error.  The username is the
username part of the value returned by
@code{sendmail-mbfl-envelope-from}.

@code{sendmail-mbfl-username/message} is an interactive wrapper for
@code{sendmail-mbfl-username} that prints the result to the
@code{*Message*} buffer.
@end defun

@c page
@node sendmail script emacs misc
@appendixsubsubsec Miscellaneous functions


@defun sendmail-mbfl-activate
Set @code{message-send-mail-function} so that functions from
@file{message.el} send mail using @code{send-mail-with-mbfl}.
@end defun


@defun sendmail-mbfl-normalise-message
Normalise the email message in the current buffer so that it is ready to
be posted or delivered.  Scan the headers for invalid lines and try to
fix them.  Scan the message for mandatory headers and, if missing, add
them; this may require querying the user for informations.

It is to be called @strong{before} acquiring sender and receiver
addresses from the headers.  It is an interactive function: it can be
explicitly applied to a buffer by the user any number of times.

This function does @strong{not} remove the headers/body separator.
@end defun


@defun sendmail-mbfl-prepare-message-for-mta
Prepare the email message in the current buffer to be sent to a Mail
Transport Agent.  Headers like @code{Fcc} and @code{Bcc} are removed;
the headers/body separator line is removed.  It is to be called
@strong{after} acquiring sender and receiver addresses from the headers.
@end defun


@defun sendmail-mbfl-copy-message-buffer @var{dst-buffer} @var{src-buffer}
Copy an email message from @var{src-buffer} to @var{dst-buffer}.  Set
encoding and text representation properties of the destination buffer to
be equal to the ones of the source buffer.
@end defun

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include lgpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


@xref{Top,bash,@gnu{} Bash,@gnu{} Bash}.


The documentation of @value{PACKAGE} is available online:

@center @value{DOCUMENTATION_URL}

@noindent
the latest release of this package can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

Lots of interesting stuff at the following site:

@center @url{http://www.bash-hackers.org/wiki/}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@c @node type index
@c @appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
